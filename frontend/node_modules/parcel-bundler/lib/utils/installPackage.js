'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

let install = (() => {
  var _ref = _asyncToGenerator(function* (dir, modules, installPeers = true) {
    let location = yield config.resolve(dir, ['yarn.lock', 'package.json']);

    return new Promise(function (resolve, reject) {
      let install;
      let options = {
        cwd: location ? path.dirname(location) : dir
      };

      if (location && path.basename(location) === 'yarn.lock') {
        install = spawn('yarn', ['add', ...modules, '--dev'], options);
      } else {
        install = spawn('npm', ['install', ...modules, '--save-dev'], options);
      }

      install.stdout.pipe(process.stdout);
      install.stderr.pipe(process.stderr);

      install.on('close', (() => {
        var _ref2 = _asyncToGenerator(function* (code) {
          if (code !== 0) {
            return reject(new Error(`Failed to install ${modules.join(', ')}.`));
          }

          if (!installPeers) {
            return resolve();
          }

          try {
            yield Promise.all(modules.map(function (m) {
              return installPeerDependencies(dir, m);
            }));
          } catch (err) {
            return reject(new Error(`Failed to install peerDependencies for ${modules.join(', ')}.`));
          }

          resolve();
        });

        return function (_x3) {
          return _ref2.apply(this, arguments);
        };
      })());
    });
  });

  return function install(_x, _x2) {
    return _ref.apply(this, arguments);
  };
})();

let installPeerDependencies = (() => {
  var _ref3 = _asyncToGenerator(function* (dir, name) {
    let basedir = path.dirname(dir);

    var _ref4 = yield resolve(name, { basedir }),
        _ref5 = _slicedToArray(_ref4, 1);

    const resolved = _ref5[0];

    const pkg = yield config.load(resolved, ['package.json']);
    const peers = pkg.peerDependencies || {};

    const modules = [];
    for (const peer in peers) {
      modules.push(`${peer}@${peers[peer]}`);
    }

    if (modules.length) {
      yield install(dir, modules, false);
    }
  });

  return function installPeerDependencies(_x4, _x5) {
    return _ref3.apply(this, arguments);
  };
})();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const spawn = require('cross-spawn');
const config = require('./config');
const path = require('path');
const promisify = require('./promisify');
const resolve = promisify(require('resolve'));

module.exports = install;