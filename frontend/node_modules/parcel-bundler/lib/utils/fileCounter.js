'use strict';

let countFiles = (() => {
  var _ref = _asyncToGenerator(function* (location, max = Infinity) {
    let doCount = (() => {
      var _ref2 = _asyncToGenerator(function* (location) {
        let files = yield fs.readdir(location);
        count += files.length;

        if (count > max) {
          return;
        }

        yield Promise.all(files.map((() => {
          var _ref3 = _asyncToGenerator(function* (file) {
            if (file === 'node_modules' || file === '.cache') return;
            let loc = path.join(location, file);
            let stats = yield fs.lstat(loc);
            if (stats.isDirectory()) {
              return doCount(loc);
            }
          });

          return function (_x3) {
            return _ref3.apply(this, arguments);
          };
        })()));
      });

      return function doCount(_x2) {
        return _ref2.apply(this, arguments);
      };
    })();

    let count = 0;


    yield doCount(location);
    return count;
  });

  return function countFiles(_x) {
    return _ref.apply(this, arguments);
  };
})();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const fs = require('./fs');
const path = require('path');

module.exports = countFiles;