"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var mark_1 = require("./../mark");
var boxplot_1 = require("./boxplot");
var errorbar_1 = require("./errorbar");
/**
 * Registry index for all composite mark's normalizer
 */
var normalizerRegistry = {};
function add(mark, normalizer) {
    normalizerRegistry[mark] = normalizer;
}
exports.add = add;
function remove(mark) {
    delete normalizerRegistry[mark];
}
exports.remove = remove;
exports.COMPOSITE_MARK_STYLES = boxplot_1.BOXPLOT_STYLES;
exports.VL_ONLY_COMPOSITE_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = __assign({}, boxplot_1.VL_ONLY_BOXPLOT_CONFIG_PROPERTY_INDEX);
add(boxplot_1.BOXPLOT, boxplot_1.normalizeBoxPlot);
add(errorbar_1.ERRORBAR, errorbar_1.normalizeErrorBar);
/**
 * Transform a unit spec with composite mark into a normal layer spec.
 */
function normalize(
// This GenericUnitSpec has any as Encoding because unit specs with composite mark can have additional encoding channels.
spec, config) {
    var mark = mark_1.isMarkDef(spec.mark) ? spec.mark.type : spec.mark;
    var normalizer = normalizerRegistry[mark];
    if (normalizer) {
        return normalizer(spec, config);
    }
    throw new Error("Invalid mark type \"" + mark + "\"");
}
exports.normalize = normalize;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9zaXRlbWFyay9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQ0Esa0NBQTZDO0FBRTdDLHFDQUE0STtBQUM1SSx1Q0FBdUQ7QUFNdkQ7O0dBRUc7QUFDSCxJQUFNLGtCQUFrQixHQUFxQyxFQUFFLENBQUM7QUFFaEUsYUFBb0IsSUFBWSxFQUFFLFVBQTBCO0lBQzFELGtCQUFrQixDQUFDLElBQUksQ0FBQyxHQUFHLFVBQVUsQ0FBQztBQUN4QyxDQUFDO0FBRkQsa0JBRUM7QUFFRCxnQkFBdUIsSUFBWTtJQUNqQyxPQUFPLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2xDLENBQUM7QUFGRCx3QkFFQztBQVFZLFFBQUEscUJBQXFCLEdBQUcsd0JBQWMsQ0FBQztBQUt2QyxRQUFBLHFEQUFxRCxnQkFDN0QsK0NBQXFDLEVBQ3hDO0FBRUYsR0FBRyxDQUFDLGlCQUFPLEVBQUUsMEJBQWdCLENBQUMsQ0FBQztBQUMvQixHQUFHLENBQUMsbUJBQVEsRUFBRSw0QkFBaUIsQ0FBQyxDQUFDO0FBRWpDOztHQUVHO0FBQ0g7QUFDSSx5SEFBeUg7QUFDekgsSUFBbUMsRUFDbkMsTUFBYztJQUdoQixJQUFNLElBQUksR0FBRyxnQkFBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDL0QsSUFBTSxVQUFVLEdBQUcsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUMsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUNmLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUFzQixJQUFJLE9BQUcsQ0FBQyxDQUFDO0FBQ2pELENBQUM7QUFiRCw4QkFhQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29uZmlnfSBmcm9tICcuLy4uL2NvbmZpZyc7XG5pbXBvcnQge0FueU1hcmssIGlzTWFya0RlZn0gZnJvbSAnLi8uLi9tYXJrJztcbmltcG9ydCB7R2VuZXJpY1VuaXRTcGVjLCBOb3JtYWxpemVkTGF5ZXJTcGVjfSBmcm9tICcuLy4uL3NwZWMnO1xuaW1wb3J0IHtCT1hQTE9ULCBCT1hQTE9UX1NUWUxFUywgQm94UGxvdENvbmZpZ01peGlucywgQm94UGxvdERlZiwgbm9ybWFsaXplQm94UGxvdCwgVkxfT05MWV9CT1hQTE9UX0NPTkZJR19QUk9QRVJUWV9JTkRFWH0gZnJvbSAnLi9ib3hwbG90JztcbmltcG9ydCB7RVJST1JCQVIsIG5vcm1hbGl6ZUVycm9yQmFyfSBmcm9tICcuL2Vycm9yYmFyJztcblxuXG5leHBvcnQge0JveFBsb3RDb25maWd9IGZyb20gJy4vYm94cGxvdCc7XG5leHBvcnQgdHlwZSBVbml0Tm9ybWFsaXplciA9IChzcGVjOiBHZW5lcmljVW5pdFNwZWM8YW55LCBhbnk+LCBjb25maWc6IENvbmZpZyk9PiBOb3JtYWxpemVkTGF5ZXJTcGVjO1xuXG4vKipcbiAqIFJlZ2lzdHJ5IGluZGV4IGZvciBhbGwgY29tcG9zaXRlIG1hcmsncyBub3JtYWxpemVyXG4gKi9cbmNvbnN0IG5vcm1hbGl6ZXJSZWdpc3RyeToge1ttYXJrOiBzdHJpbmddOiBVbml0Tm9ybWFsaXplcn0gPSB7fTtcblxuZXhwb3J0IGZ1bmN0aW9uIGFkZChtYXJrOiBzdHJpbmcsIG5vcm1hbGl6ZXI6IFVuaXROb3JtYWxpemVyKSB7XG4gIG5vcm1hbGl6ZXJSZWdpc3RyeVttYXJrXSA9IG5vcm1hbGl6ZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmUobWFyazogc3RyaW5nKSB7XG4gIGRlbGV0ZSBub3JtYWxpemVyUmVnaXN0cnlbbWFya107XG59XG5cbmV4cG9ydCB0eXBlIENvbXBvc2l0ZU1hcmsgPSBCT1hQTE9UIHwgRVJST1JCQVI7XG5cbmV4cG9ydCB0eXBlIENvbXBvc2l0ZU1hcmtEZWYgPSBCb3hQbG90RGVmO1xuXG5leHBvcnQgdHlwZSBDb21wb3NpdGVBZ2dyZWdhdGUgPSBCT1hQTE9UO1xuXG5leHBvcnQgY29uc3QgQ09NUE9TSVRFX01BUktfU1RZTEVTID0gQk9YUExPVF9TVFlMRVM7XG5leHBvcnQgdHlwZSBDb21wb3NpdGVNYXJrU3R5bGUgPSB0eXBlb2YgQ09NUE9TSVRFX01BUktfU1RZTEVTWzBdO1xuXG5leHBvcnQgaW50ZXJmYWNlIENvbXBvc2l0ZU1hcmtDb25maWdNaXhpbnMgZXh0ZW5kcyBCb3hQbG90Q29uZmlnTWl4aW5zIHt9XG5cbmV4cG9ydCBjb25zdCBWTF9PTkxZX0NPTVBPU0lURV9NQVJLX1NQRUNJRklDX0NPTkZJR19QUk9QRVJUWV9JTkRFWCA9IHtcbiAgLi4uVkxfT05MWV9CT1hQTE9UX0NPTkZJR19QUk9QRVJUWV9JTkRFWFxufTtcblxuYWRkKEJPWFBMT1QsIG5vcm1hbGl6ZUJveFBsb3QpO1xuYWRkKEVSUk9SQkFSLCBub3JtYWxpemVFcnJvckJhcik7XG5cbi8qKlxuICogVHJhbnNmb3JtIGEgdW5pdCBzcGVjIHdpdGggY29tcG9zaXRlIG1hcmsgaW50byBhIG5vcm1hbCBsYXllciBzcGVjLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplKFxuICAgIC8vIFRoaXMgR2VuZXJpY1VuaXRTcGVjIGhhcyBhbnkgYXMgRW5jb2RpbmcgYmVjYXVzZSB1bml0IHNwZWNzIHdpdGggY29tcG9zaXRlIG1hcmsgY2FuIGhhdmUgYWRkaXRpb25hbCBlbmNvZGluZyBjaGFubmVscy5cbiAgICBzcGVjOiBHZW5lcmljVW5pdFNwZWM8YW55LCBBbnlNYXJrPixcbiAgICBjb25maWc6IENvbmZpZ1xuICApOiBOb3JtYWxpemVkTGF5ZXJTcGVjIHtcblxuICBjb25zdCBtYXJrID0gaXNNYXJrRGVmKHNwZWMubWFyaykgPyBzcGVjLm1hcmsudHlwZSA6IHNwZWMubWFyaztcbiAgY29uc3Qgbm9ybWFsaXplciA9IG5vcm1hbGl6ZXJSZWdpc3RyeVttYXJrXTtcbiAgaWYgKG5vcm1hbGl6ZXIpIHtcbiAgICByZXR1cm4gbm9ybWFsaXplcihzcGVjLCBjb25maWcpO1xuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIG1hcmsgdHlwZSBcIiR7bWFya31cImApO1xufVxuIl19