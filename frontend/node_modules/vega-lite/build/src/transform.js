"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var logical_1 = require("./logical");
var predicate_1 = require("./predicate");
function isFilter(t) {
    return t['filter'] !== undefined;
}
exports.isFilter = isFilter;
function isLookup(t) {
    return t['lookup'] !== undefined;
}
exports.isLookup = isLookup;
function isCalculate(t) {
    return t['calculate'] !== undefined;
}
exports.isCalculate = isCalculate;
function isBin(t) {
    return !!t['bin'];
}
exports.isBin = isBin;
function isTimeUnit(t) {
    return t['timeUnit'] !== undefined;
}
exports.isTimeUnit = isTimeUnit;
function isAggregate(t) {
    return t['aggregate'] !== undefined;
}
exports.isAggregate = isAggregate;
function normalizeTransform(transform) {
    return transform.map(function (t) {
        if (isFilter(t)) {
            return {
                filter: logical_1.normalizeLogicalOperand(t.filter, predicate_1.normalizePredicate)
            };
        }
        return t;
    });
}
exports.normalizeTransform = normalizeTransform;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmb3JtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3RyYW5zZm9ybS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUdBLHFDQUFrRTtBQUNsRSx5Q0FBMEQ7QUFrQjFELGtCQUF5QixDQUFZO0lBQ25DLE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssU0FBUyxDQUFDO0FBQ25DLENBQUM7QUFGRCw0QkFFQztBQXlIRCxrQkFBeUIsQ0FBWTtJQUNuQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLFNBQVMsQ0FBQztBQUNuQyxDQUFDO0FBRkQsNEJBRUM7QUFFRCxxQkFBNEIsQ0FBWTtJQUN0QyxNQUFNLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxLQUFLLFNBQVMsQ0FBQztBQUN0QyxDQUFDO0FBRkQsa0NBRUM7QUFFRCxlQUFzQixDQUFZO0lBQ2hDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3BCLENBQUM7QUFGRCxzQkFFQztBQUVELG9CQUEyQixDQUFZO0lBQ3JDLE1BQU0sQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEtBQUssU0FBUyxDQUFDO0FBQ3JDLENBQUM7QUFGRCxnQ0FFQztBQUVELHFCQUE0QixDQUFZO0lBQ3RDLE1BQU0sQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLEtBQUssU0FBUyxDQUFDO0FBQ3RDLENBQUM7QUFGRCxrQ0FFQztBQUlELDRCQUFtQyxTQUFzQjtJQUN2RCxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUM7UUFDcEIsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNoQixNQUFNLENBQUM7Z0JBQ0wsTUFBTSxFQUFFLGlDQUF1QixDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsOEJBQWtCLENBQUM7YUFDOUQsQ0FBQztRQUNKLENBQUM7UUFDRCxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ1gsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBVEQsZ0RBU0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0FnZ3JlZ2F0ZU9wfSBmcm9tICd2ZWdhJztcbmltcG9ydCB7QmluUGFyYW1zfSBmcm9tICcuL2Jpbic7XG5pbXBvcnQge0RhdGF9IGZyb20gJy4vZGF0YSc7XG5pbXBvcnQge0xvZ2ljYWxPcGVyYW5kLCBub3JtYWxpemVMb2dpY2FsT3BlcmFuZH0gZnJvbSAnLi9sb2dpY2FsJztcbmltcG9ydCB7bm9ybWFsaXplUHJlZGljYXRlLCBQcmVkaWNhdGV9IGZyb20gJy4vcHJlZGljYXRlJztcbmltcG9ydCB7VGltZVVuaXR9IGZyb20gJy4vdGltZXVuaXQnO1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgRmlsdGVyVHJhbnNmb3JtIHtcbiAgLyoqXG4gICAqIFRoZSBgZmlsdGVyYCBwcm9wZXJ0eSBtdXN0IGJlIG9uZSBvZiB0aGUgcHJlZGljYXRlIGRlZmluaXRpb25zOlxuICAgKiAoMSkgYW4gW2V4cHJlc3Npb25dKGh0dHBzOi8vdmVnYS5naXRodWIuaW8vdmVnYS1saXRlL2RvY3MvdHlwZXMuaHRtbCNleHByZXNzaW9uKSBzdHJpbmcsXG4gICAqIHdoZXJlIGBkYXR1bWAgY2FuIGJlIHVzZWQgdG8gcmVmZXIgdG8gdGhlIGN1cnJlbnQgZGF0YSBvYmplY3Q7XG4gICAqICgyKSBvbmUgb2YgdGhlIGZpZWxkIHByZWRpY2F0ZXM6IFtlcXVhbCBwcmVkaWNhdGVdKGh0dHBzOi8vdmVnYS5naXRodWIuaW8vdmVnYS1saXRlL2RvY3MvZmlsdGVyLmh0bWwjZXF1YWwtcHJlZGljYXRlKTtcbiAgICogW3JhbmdlIHByZWRpY2F0ZV0oZmlsdGVyLmh0bWwjcmFuZ2UtcHJlZGljYXRlKSwgW29uZS1vZiBwcmVkaWNhdGVdKGh0dHBzOi8vdmVnYS5naXRodWIuaW8vdmVnYS1saXRlL2RvY3MvZmlsdGVyLmh0bWwjb25lLW9mLXByZWRpY2F0ZSk7XG4gICAqICgzKSBhIFtzZWxlY3Rpb24gcHJlZGljYXRlXShodHRwczovL3ZlZ2EuZ2l0aHViLmlvL3ZlZ2EtbGl0ZS9kb2NzL2ZpbHRlci5odG1sI3NlbGVjdGlvbi1wcmVkaWNhdGUpO1xuICAgKiBvciAoNCkgYSBsb2dpY2FsIG9wZXJhbmQgdGhhdCBjb21iaW5lcyAoMSksICgyKSwgb3IgKDMpLlxuICAgKi9cbiAgLy8gVE9ETzogaHR0cHM6Ly9naXRodWIuY29tL3ZlZ2EvdmVnYS1saXRlL2lzc3Vlcy8yOTAxXG4gIGZpbHRlcjogTG9naWNhbE9wZXJhbmQ8UHJlZGljYXRlPjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRmlsdGVyKHQ6IFRyYW5zZm9ybSk6IHQgaXMgRmlsdGVyVHJhbnNmb3JtIHtcbiAgcmV0dXJuIHRbJ2ZpbHRlciddICE9PSB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2FsY3VsYXRlVHJhbnNmb3JtIHtcbiAgLyoqXG4gICAqIEEgW2V4cHJlc3Npb25dKGh0dHBzOi8vdmVnYS5naXRodWIuaW8vdmVnYS1saXRlL2RvY3MvdHlwZXMuaHRtbCNleHByZXNzaW9uKSBzdHJpbmcuIFVzZSB0aGUgdmFyaWFibGUgYGRhdHVtYCB0byByZWZlciB0byB0aGUgY3VycmVudCBkYXRhIG9iamVjdC5cbiAgICovXG4gIGNhbGN1bGF0ZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZmllbGQgZm9yIHN0b3JpbmcgdGhlIGNvbXB1dGVkIGZvcm11bGEgdmFsdWUuXG4gICAqL1xuICBhczogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJpblRyYW5zZm9ybSB7XG4gIC8qKlxuICAgKiBBbiBvYmplY3QgaW5kaWNhdGluZyBiaW4gcHJvcGVydGllcywgb3Igc2ltcGx5IGB0cnVlYCBmb3IgdXNpbmcgZGVmYXVsdCBiaW4gcGFyYW1ldGVycy5cbiAgICovXG4gIGJpbjogYm9vbGVhbiB8IEJpblBhcmFtcztcblxuICAvKipcbiAgICogVGhlIGRhdGEgZmllbGQgdG8gYmluLlxuICAgKi9cbiAgZmllbGQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIG91dHB1dCBmaWVsZHMgYXQgd2hpY2ggdG8gd3JpdGUgdGhlIHN0YXJ0IGFuZCBlbmQgYmluIHZhbHVlcy5cbiAgICovXG4gIGFzOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGltZVVuaXRUcmFuc2Zvcm0ge1xuICAvKipcbiAgICogVGhlIHRpbWVVbml0LlxuICAgKi9cbiAgdGltZVVuaXQ6IFRpbWVVbml0O1xuXG4gIC8qKlxuICAgKiBUaGUgZGF0YSBmaWVsZCB0byBhcHBseSB0aW1lIHVuaXQuXG4gICAqL1xuICBmaWVsZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgb3V0cHV0IGZpZWxkIHRvIHdyaXRlIHRoZSB0aW1lVW5pdCB2YWx1ZS5cbiAgICovXG4gIGFzOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWdncmVnYXRlVHJhbnNmb3JtIHtcbiAgLyoqXG4gICAqIEFycmF5IG9mIG9iamVjdHMgdGhhdCBkZWZpbmUgZmllbGRzIHRvIGFnZ3JlZ2F0ZS5cbiAgICovXG4gIGFnZ3JlZ2F0ZTogQWdncmVnYXRlZEZpZWxkRGVmW107XG5cbiAgLyoqXG4gICAqIFRoZSBkYXRhIGZpZWxkcyB0byBncm91cCBieS4gSWYgbm90IHNwZWNpZmllZCwgYSBzaW5nbGUgZ3JvdXAgY29udGFpbmluZyBhbGwgZGF0YSBvYmplY3RzIHdpbGwgYmUgdXNlZC5cbiAgICovXG4gIGdyb3VwYnk/OiBzdHJpbmdbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBZ2dyZWdhdGVkRmllbGREZWYge1xuICAvKipcbiAgICogVGhlIGFnZ3JlZ2F0aW9uIG9wZXJhdGlvbnMgdG8gYXBwbHkgdG8gdGhlIGZpZWxkcywgc3VjaCBhcyBzdW0sIGF2ZXJhZ2Ugb3IgY291bnQuXG4gICAqIFNlZSB0aGUgW2Z1bGwgbGlzdCBvZiBzdXBwb3J0ZWQgYWdncmVnYXRpb24gb3BlcmF0aW9uc10oaHR0cHM6Ly92ZWdhLmdpdGh1Yi5pby92ZWdhLWxpdGUvZG9jcy9hZ2dyZWdhdGUuaHRtbCNvcHMpXG4gICAqIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgKi9cbiAgb3A6IEFnZ3JlZ2F0ZU9wO1xuXG4gIC8qKlxuICAgKiBUaGUgZGF0YSBmaWVsZCBmb3Igd2hpY2ggdG8gY29tcHV0ZSBhZ2dyZWdhdGUgZnVuY3Rpb24uXG4gICAqL1xuICBmaWVsZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgb3V0cHV0IGZpZWxkIG5hbWVzIHRvIHVzZSBmb3IgZWFjaCBhZ2dyZWdhdGVkIGZpZWxkLlxuICAgKi9cbiAgYXM6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBMb29rdXBEYXRhIHtcbiAgLyoqXG4gICAqIFNlY29uZGFyeSBkYXRhIHNvdXJjZSB0byBsb29rdXAgaW4uXG4gICAqL1xuICBkYXRhOiBEYXRhO1xuICAvKipcbiAgICogS2V5IGluIGRhdGEgdG8gbG9va3VwLlxuICAgKi9cbiAga2V5OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBGaWVsZHMgaW4gZm9yZWlnbiBkYXRhIHRvIGxvb2t1cC5cbiAgICogSWYgbm90IHNwZWNpZmllZCwgdGhlIGVudGlyZSBvYmplY3QgaXMgcXVlcmllZC5cbiAgICovXG4gIGZpZWxkcz86IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExvb2t1cFRyYW5zZm9ybSB7XG4gIC8qKlxuICAgKiBLZXkgaW4gcHJpbWFyeSBkYXRhIHNvdXJjZS5cbiAgICovXG4gIGxvb2t1cDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBTZWNvbmRhcnkgZGF0YSByZWZlcmVuY2UuXG4gICAqL1xuICBmcm9tOiBMb29rdXBEYXRhO1xuXG4gIC8qKlxuICAgKiBUaGUgZmllbGQgb3IgZmllbGRzIGZvciBzdG9yaW5nIHRoZSBjb21wdXRlZCBmb3JtdWxhIHZhbHVlLlxuICAgKiBJZiBgZnJvbS5maWVsZHNgIGlzIHNwZWNpZmllZCwgdGhlIHRyYW5zZm9ybSB3aWxsIHVzZSB0aGUgc2FtZSBuYW1lcyBmb3IgYGFzYC5cbiAgICogSWYgYGZyb20uZmllbGRzYCBpcyBub3Qgc3BlY2lmaWVkLCBgYXNgIGhhcyB0byBiZSBhIHN0cmluZyBhbmQgd2UgcHV0IHRoZSB3aG9sZSBvYmplY3QgaW50byB0aGUgZGF0YSB1bmRlciB0aGUgc3BlY2lmaWVkIG5hbWUuXG4gICAqL1xuICBhcz86IHN0cmluZyB8IHN0cmluZ1tdO1xuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSB0byB1c2UgaWYgbG9va3VwIGZhaWxzLlxuICAgKlxuICAgKiBfX0RlZmF1bHQgdmFsdWU6X18gYG51bGxgXG4gICAqL1xuICBkZWZhdWx0Pzogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNMb29rdXAodDogVHJhbnNmb3JtKTogdCBpcyBMb29rdXBUcmFuc2Zvcm0ge1xuICByZXR1cm4gdFsnbG9va3VwJ10gIT09IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQ2FsY3VsYXRlKHQ6IFRyYW5zZm9ybSk6IHQgaXMgQ2FsY3VsYXRlVHJhbnNmb3JtIHtcbiAgcmV0dXJuIHRbJ2NhbGN1bGF0ZSddICE9PSB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0Jpbih0OiBUcmFuc2Zvcm0pOiB0IGlzIEJpblRyYW5zZm9ybSB7XG4gIHJldHVybiAhIXRbJ2JpbiddO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNUaW1lVW5pdCh0OiBUcmFuc2Zvcm0pOiB0IGlzIFRpbWVVbml0VHJhbnNmb3JtIHtcbiAgcmV0dXJuIHRbJ3RpbWVVbml0J10gIT09IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQWdncmVnYXRlKHQ6IFRyYW5zZm9ybSk6IHQgaXMgQWdncmVnYXRlVHJhbnNmb3JtIHtcbiAgcmV0dXJuIHRbJ2FnZ3JlZ2F0ZSddICE9PSB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCB0eXBlIFRyYW5zZm9ybSA9IEZpbHRlclRyYW5zZm9ybSB8IENhbGN1bGF0ZVRyYW5zZm9ybSB8IExvb2t1cFRyYW5zZm9ybSB8IEJpblRyYW5zZm9ybSB8IFRpbWVVbml0VHJhbnNmb3JtIHwgQWdncmVnYXRlVHJhbnNmb3JtO1xuXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplVHJhbnNmb3JtKHRyYW5zZm9ybTogVHJhbnNmb3JtW10pIHtcbiAgcmV0dXJuIHRyYW5zZm9ybS5tYXAodCA9PiB7XG4gICAgaWYgKGlzRmlsdGVyKHQpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmaWx0ZXI6IG5vcm1hbGl6ZUxvZ2ljYWxPcGVyYW5kKHQuZmlsdGVyLCBub3JtYWxpemVQcmVkaWNhdGUpXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gdDtcbiAgfSk7XG59XG4iXX0=