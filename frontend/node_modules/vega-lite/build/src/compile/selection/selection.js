"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var vega_event_selector_1 = require("vega-event-selector");
var vega_util_1 = require("vega-util");
var channel_1 = require("../../channel");
var log_1 = require("../../log");
var selection_1 = require("../../selection");
var util_1 = require("../../util");
var model_1 = require("../model");
var interval_1 = require("./interval");
var multi_1 = require("./multi");
var single_1 = require("./single");
var transforms_1 = require("./transforms/transforms");
exports.STORE = '_store';
exports.TUPLE = '_tuple';
exports.MODIFY = '_modify';
exports.SELECTION_DOMAIN = '_selection_domain_';
function parseUnitSelection(model, selDefs) {
    var selCmpts = {};
    var selectionConfig = model.config.selection;
    var _loop_1 = function (name_1) {
        if (!selDefs.hasOwnProperty(name_1)) {
            return "continue";
        }
        var selDef = selDefs[name_1];
        var cfg = selectionConfig[selDef.type];
        // Set default values from config if a property hasn't been specified,
        // or if it is true. E.g., "translate": true should use the default
        // event handlers for translate. However, true may be a valid value for
        // a property (e.g., "nearest": true).
        for (var key in cfg) {
            // A selection should contain either `encodings` or `fields`, only use
            // default values for these two values if neither of them is specified.
            if ((key === 'encodings' && selDef.fields) || (key === 'fields' && selDef.encodings)) {
                continue;
            }
            if (key === 'mark') {
                selDef[key] = __assign({}, cfg[key], selDef[key]);
            }
            if (selDef[key] === undefined || selDef[key] === true) {
                selDef[key] = cfg[key] || selDef[key];
            }
        }
        name_1 = util_1.varName(name_1);
        var selCmpt = selCmpts[name_1] = __assign({}, selDef, { name: name_1, events: vega_util_1.isString(selDef.on) ? vega_event_selector_1.selector(selDef.on, 'scope') : selDef.on });
        transforms_1.forEachTransform(selCmpt, function (txCompiler) {
            if (txCompiler.parse) {
                txCompiler.parse(model, selDef, selCmpt);
            }
        });
    };
    for (var name_1 in selDefs) {
        _loop_1(name_1);
    }
    return selCmpts;
}
exports.parseUnitSelection = parseUnitSelection;
function assembleUnitSelectionSignals(model, signals) {
    forEachSelection(model, function (selCmpt, selCompiler) {
        var name = selCmpt.name;
        var modifyExpr = selCompiler.modifyExpr(model, selCmpt);
        signals.push.apply(signals, selCompiler.signals(model, selCmpt));
        transforms_1.forEachTransform(selCmpt, function (txCompiler) {
            if (txCompiler.signals) {
                signals = txCompiler.signals(model, selCmpt, signals);
            }
            if (txCompiler.modifyExpr) {
                modifyExpr = txCompiler.modifyExpr(model, selCmpt, modifyExpr);
            }
        });
        signals.push({
            name: name + exports.MODIFY,
            on: [{
                    events: { signal: name + exports.TUPLE },
                    update: "modify(" + vega_util_1.stringValue(selCmpt.name + exports.STORE) + ", " + modifyExpr + ")"
                }]
        });
    });
    var facetModel = getFacetModel(model);
    if (signals.length && facetModel) {
        var name_2 = vega_util_1.stringValue(facetModel.getName('cell'));
        signals.unshift({
            name: 'facet',
            value: {},
            on: [{
                    events: vega_event_selector_1.selector('mousemove', 'scope'),
                    update: "isTuple(facet) ? facet : group(" + name_2 + ").datum"
                }]
        });
    }
    return signals;
}
exports.assembleUnitSelectionSignals = assembleUnitSelectionSignals;
function assembleTopLevelSignals(model, signals) {
    var needsUnit = false;
    forEachSelection(model, function (selCmpt, selCompiler) {
        if (selCompiler.topLevelSignals) {
            signals = selCompiler.topLevelSignals(model, selCmpt, signals);
        }
        transforms_1.forEachTransform(selCmpt, function (txCompiler) {
            if (txCompiler.topLevelSignals) {
                signals = txCompiler.topLevelSignals(model, selCmpt, signals);
            }
        });
        needsUnit = true;
    });
    if (needsUnit) {
        var hasUnit = signals.filter(function (s) { return s.name === 'unit'; });
        if (!(hasUnit.length)) {
            signals.unshift({
                name: 'unit',
                value: {},
                on: [{ events: 'mousemove', update: 'isTuple(group()) ? group() : unit' }]
            });
        }
    }
    return signals;
}
exports.assembleTopLevelSignals = assembleTopLevelSignals;
function assembleUnitSelectionData(model, data) {
    forEachSelection(model, function (selCmpt) {
        var contains = data.filter(function (d) { return d.name === selCmpt.name + exports.STORE; });
        if (!contains.length) {
            data.push({ name: selCmpt.name + exports.STORE });
        }
    });
    return data;
}
exports.assembleUnitSelectionData = assembleUnitSelectionData;
function assembleUnitSelectionMarks(model, marks) {
    forEachSelection(model, function (selCmpt, selCompiler) {
        marks = selCompiler.marks ? selCompiler.marks(model, selCmpt, marks) : marks;
        transforms_1.forEachTransform(selCmpt, function (txCompiler) {
            if (txCompiler.marks) {
                marks = txCompiler.marks(model, selCmpt, marks);
            }
        });
    });
    return marks;
}
exports.assembleUnitSelectionMarks = assembleUnitSelectionMarks;
function assembleLayerSelectionMarks(model, marks) {
    model.children.forEach(function (child) {
        if (model_1.isUnitModel(child)) {
            marks = assembleUnitSelectionMarks(child, marks);
        }
    });
    return marks;
}
exports.assembleLayerSelectionMarks = assembleLayerSelectionMarks;
function selectionPredicate(model, selections, dfnode) {
    var stores = [];
    function expr(name) {
        var vname = util_1.varName(name);
        var selCmpt = model.getSelectionComponent(vname, name);
        var store = vega_util_1.stringValue(vname + exports.STORE);
        if (selCmpt.timeUnit) {
            var child = dfnode || model.component.data.raw;
            var tunode = selCmpt.timeUnit.clone();
            if (child.parent) {
                tunode.insertAsParentOf(child);
            }
            else {
                child.parent = tunode;
            }
        }
        if (selCmpt.empty !== 'none') {
            stores.push(store);
        }
        return compiler(selCmpt.type).predicate + ("(" + store + ", datum") +
            (selCmpt.resolve === 'global' ? ')' : ", " + vega_util_1.stringValue(selCmpt.resolve) + ")");
    }
    var predicateStr = util_1.logicalExpr(selections, expr);
    return (stores.length
        ? '!(' + stores.map(function (s) { return "length(data(" + s + "))"; }).join(' || ') + ') || '
        : '') + ("(" + predicateStr + ")");
}
exports.selectionPredicate = selectionPredicate;
// Selections are parsed _after_ scales. If a scale domain is set to
// use a selection, the SELECTION_DOMAIN constant is used as the
// domainRaw.signal during scale.parse and then replaced with the necessary
// selection expression function during scale.assemble. To not pollute the
// type signatures to account for this setup, the selection domain definition
// is coerced to a string and appended to SELECTION_DOMAIN.
function isRawSelectionDomain(domainRaw) {
    return domainRaw.signal.indexOf(exports.SELECTION_DOMAIN) >= 0;
}
exports.isRawSelectionDomain = isRawSelectionDomain;
function selectionScaleDomain(model, domainRaw) {
    var selDomain = JSON.parse(domainRaw.signal.replace(exports.SELECTION_DOMAIN, ''));
    var name = util_1.varName(selDomain.selection);
    var selCmpt = model.component.selection && model.component.selection[name];
    if (selCmpt) {
        log_1.warn('Use "bind": "scales" to setup a binding for scales and selections within the same view.');
    }
    else {
        selCmpt = model.getSelectionComponent(name, selDomain.selection);
        if (!selDomain.encoding && !selDomain.field) {
            selDomain.field = selCmpt.project[0].field;
            if (selCmpt.project.length > 1) {
                log_1.warn('A "field" or "encoding" must be specified when using a selection as a scale domain. ' +
                    ("Using \"field\": " + vega_util_1.stringValue(selDomain.field) + "."));
            }
        }
        return {
            signal: compiler(selCmpt.type).scaleDomain +
                ("(" + vega_util_1.stringValue(name + exports.STORE) + ", " + vega_util_1.stringValue(selDomain.encoding || null) + ", ") +
                vega_util_1.stringValue(selDomain.field || null) +
                (selCmpt.resolve === 'global' ? ')' : ", " + vega_util_1.stringValue(selCmpt.resolve) + ")")
        };
    }
    return { signal: 'null' };
}
exports.selectionScaleDomain = selectionScaleDomain;
// Utility functions
function forEachSelection(model, cb) {
    var selections = model.component.selection;
    for (var name_3 in selections) {
        if (selections.hasOwnProperty(name_3)) {
            var sel = selections[name_3];
            cb(sel, compiler(sel.type));
        }
    }
}
function compiler(type) {
    switch (type) {
        case 'single':
            return single_1.default;
        case 'multi':
            return multi_1.default;
        case 'interval':
            return interval_1.default;
    }
    return null;
}
function getFacetModel(model) {
    var parent = model.parent;
    while (parent) {
        if (model_1.isFacetModel(parent)) {
            break;
        }
        parent = parent.parent;
    }
    return parent;
}
function unitName(model) {
    var name = vega_util_1.stringValue(model.name);
    var facet = getFacetModel(model);
    if (facet) {
        name += (facet.facet.row ? " + '_' + facet" + util_1.accessPath(facet.vgField('row')) : '')
            + (facet.facet.column ? " + '_' + facet" + util_1.accessPath(facet.vgField('column')) : '');
    }
    return name;
}
exports.unitName = unitName;
function requiresSelectionId(model) {
    var identifier = false;
    forEachSelection(model, function (selCmpt) {
        identifier = identifier || selCmpt.project.some(function (proj) { return proj.field === selection_1.SELECTION_ID; });
    });
    return identifier;
}
exports.requiresSelectionId = requiresSelectionId;
function channelSignalName(selCmpt, channel, range) {
    return util_1.varName(selCmpt.name + '_' + (range === 'visual' ? channel : selCmpt.fields[channel]));
}
exports.channelSignalName = channelSignalName;
function positionalProjections(selCmpt) {
    var x = null;
    var xi = null;
    var y = null;
    var yi = null;
    selCmpt.project.forEach(function (p, i) {
        if (p.channel === channel_1.X) {
            x = p;
            xi = i;
        }
        else if (p.channel === channel_1.Y) {
            y = p;
            yi = i;
        }
    });
    return { x: x, xi: xi, y: y, yi: yi };
}
exports.positionalProjections = positionalProjections;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvc2VsZWN0aW9uL3NlbGVjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsMkRBQThEO0FBQzlELHVDQUFnRDtBQUNoRCx5Q0FBMEQ7QUFDMUQsaUNBQStCO0FBRS9CLDZDQUE0RztBQUM1RyxtQ0FBa0U7QUFNbEUsa0NBQTBEO0FBRTFELHVDQUEwQztBQUMxQyxpQ0FBb0M7QUFFcEMsbUNBQXNDO0FBQ3RDLHNEQUF5RDtBQUc1QyxRQUFBLEtBQUssR0FBRyxRQUFRLENBQUM7QUFDakIsUUFBQSxLQUFLLEdBQUcsUUFBUSxDQUFDO0FBQ2pCLFFBQUEsTUFBTSxHQUFHLFNBQVMsQ0FBQztBQUNuQixRQUFBLGdCQUFnQixHQUFHLG9CQUFvQixDQUFDO0FBcUNyRCw0QkFBbUMsS0FBZ0IsRUFBRSxPQUEyQjtJQUM5RSxJQUFNLFFBQVEsR0FBNkIsRUFBRSxDQUFDO0lBQzlDLElBQU0sZUFBZSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDOzRCQUV0QyxNQUFJO1FBQ1gsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLE1BQUksQ0FBQyxDQUFDLENBQUMsQ0FBQzs7UUFFcEMsQ0FBQztRQUVELElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFJLENBQUMsQ0FBQztRQUM3QixJQUFNLEdBQUcsR0FBRyxlQUFlLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXpDLHNFQUFzRTtRQUN0RSxtRUFBbUU7UUFDbkUsdUVBQXVFO1FBQ3ZFLHNDQUFzQztRQUN0QyxHQUFHLENBQUMsQ0FBQyxJQUFNLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ3RCLHNFQUFzRTtZQUN0RSx1RUFBdUU7WUFDdkUsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssV0FBVyxJ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QUFPLENBQUMsT0FBTyxDQUFDLFVBQUMsQ0FBQyxFQUFFLENBQUM7UUFDM0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sS0FBSyxXQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BCLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDTixFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ1QsQ0FBQztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxLQUFLLFdBQUMsQ0FBQyxDQUFDLENBQUM7WUFDM0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNOLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDVCxDQUFDO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDSCxNQUFNLENBQUMsRUFBQyxDQUFDLEdBQUEsRUFBRSxFQUFFLElBQUEsRUFBRSxDQUFDLEdBQUEsRUFBRSxFQUFFLElBQUEsRUFBQyxDQUFDO0FBQ3hCLENBQUM7QUFoQkQsc0RBZ0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtzZWxlY3RvciBhcyBwYXJzZVNlbGVjdG9yfSBmcm9tICd2ZWdhLWV2ZW50LXNlbGVjdG9yJztcbmltcG9ydCB7aXNTdHJpbmcsIHN0cmluZ1ZhbHVlfSBmcm9tICd2ZWdhLXV0aWwnO1xuaW1wb3J0IHtDaGFubmVsLCBTY2FsZUNoYW5uZWwsIFgsIFl9IGZyb20gJy4uLy4uL2NoYW5uZWwnO1xuaW1wb3J0IHt3YXJufSBmcm9tICcuLi8uLi9sb2cnO1xuaW1wb3J0IHtMb2dpY2FsT3BlcmFuZH0gZnJvbSAnLi4vLi4vbG9naWNhbCc7XG5pbXBvcnQge0JydXNoQ29uZmlnLCBTRUxFQ1RJT05fSUQsIFNlbGVjdGlvbkRlZiwgU2VsZWN0aW9uUmVzb2x1dGlvbiwgU2VsZWN0aW9uVHlwZX0gZnJvbSAnLi4vLi4vc2VsZWN0aW9uJztcbmltcG9ydCB7YWNjZXNzUGF0aCwgRGljdCwgbG9naWNhbEV4cHIsIHZhck5hbWV9IGZyb20gJy4uLy4uL3V0aWwnO1xuaW1wb3J0IHtWZ0JpbmRpbmcsIFZnRGF0YSwgVmdFdmVudFN0cmVhbSwgVmdTaWduYWxSZWZ9IGZyb20gJy4uLy4uL3ZlZ2Euc2NoZW1hJztcbmltcG9ydCB7RGF0YUZsb3dOb2RlfSBmcm9tICcuLi9kYXRhL2RhdGFmbG93JztcbmltcG9ydCB7VGltZVVuaXROb2RlfSBmcm9tICcuLi9kYXRhL3RpbWV1bml0JztcbmltcG9ydCB7RmFjZXRNb2RlbH0gZnJvbSAnLi4vZmFjZXQnO1xuaW1wb3J0IHtMYXllck1vZGVsfSBmcm9tICcuLi9sYXllcic7XG5pbXBvcnQge2lzRmFjZXRNb2RlbCwgaXNVbml0TW9kZWwsIE1vZGVsfSBmcm9tICcuLi9tb2RlbCc7XG5pbXBvcnQge1VuaXRNb2RlbH0gZnJvbSAnLi4vdW5pdCc7XG5pbXBvcnQgaW50ZXJ2YWxDb21waWxlciBmcm9tICcuL2ludGVydmFsJztcbmltcG9ydCBtdWx0aUNvbXBpbGVyIGZyb20gJy4vbXVsdGknO1xuaW1wb3J0IHtTZWxlY3Rpb25Db21wb25lbnR9IGZyb20gJy4vc2VsZWN0aW9uJztcbmltcG9ydCBzaW5nbGVDb21waWxlciBmcm9tICcuL3NpbmdsZSc7XG5pbXBvcnQge2ZvckVhY2hUcmFuc2Zvcm19IGZyb20gJy4vdHJhbnNmb3Jtcy90cmFuc2Zvcm1zJztcblxuXG5leHBvcnQgY29uc3QgU1RPUkUgPSAnX3N0b3JlJztcbmV4cG9ydCBjb25zdCBUVVBMRSA9ICdfdHVwbGUnO1xuZXhwb3J0IGNvbnN0IE1PRElGWSA9ICdfbW9kaWZ5JztcbmV4cG9ydCBjb25zdCBTRUxFQ1RJT05fRE9NQUlOID0gJ19zZWxlY3Rpb25fZG9tYWluXyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VsZWN0aW9uQ29tcG9uZW50IHtcbiAgbmFtZTogc3RyaW5nO1xuICB0eXBlOiBTZWxlY3Rpb25UeXBlO1xuICBldmVudHM6IFZnRXZlbnRTdHJlYW07XG4gIC8vIHByZWRpY2F0ZT86IHN0cmluZztcbiAgYmluZD86ICdzY2FsZXMnIHwgVmdCaW5kaW5nIHwge1trZXk6IHN0cmluZ106IFZnQmluZGluZ307XG4gIHJlc29sdmU6IFNlbGVjdGlvblJlc29sdXRpb247XG4gIGVtcHR5OiAnYWxsJyB8ICdub25lJztcbiAgbWFyaz86IEJydXNoQ29uZmlnO1xuXG4gIC8vIFRyYW5zZm9ybXNcbiAgcHJvamVjdD86IFByb2plY3RDb21wb25lbnRbXTtcbiAgZmllbGRzPzogYW55O1xuICB0aW1lVW5pdD86IFRpbWVVbml0Tm9kZTtcbiAgc2NhbGVzPzogQ2hhbm5lbFtdO1xuICB0b2dnbGU/OiBhbnk7XG4gIHRyYW5zbGF0ZT86IGFueTtcbiAgem9vbT86IGFueTtcbiAgbmVhcmVzdD86IGFueTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQcm9qZWN0Q29tcG9uZW50IHtcbiAgZmllbGQ/OiBzdHJpbmc7XG4gIGNoYW5uZWw/OiBTY2FsZUNoYW5uZWw7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VsZWN0aW9uQ29tcGlsZXIge1xuICBzaWduYWxzOiAobW9kZWw6IFVuaXRNb2RlbCwgc2VsQ21wdDogU2VsZWN0aW9uQ29tcG9uZW50KSA9PiBhbnlbXTtcbiAgdG9wTGV2ZWxTaWduYWxzPzogKG1vZGVsOiBNb2RlbCwgc2VsQ21wdDogU2VsZWN0aW9uQ29tcG9uZW50LCBzaWduYWxzOiBhbnlbXSkgPT4gYW55W107XG4gIG1vZGlmeUV4cHI6IChtb2RlbDogVW5pdE1vZGVsLCBzZWxDbXB0OiBTZWxlY3Rpb25Db21wb25lbnQpID0+IHN0cmluZztcbiAgbWFya3M/OiAobW9kZWw6IFVuaXRNb2RlbCwgc2VsQ21wdDpTZWxlY3Rpb25Db21wb25lbnQsIG1hcmtzOiBhbnlbXSkgPT4gYW55W107XG4gIHByZWRpY2F0ZTogc3RyaW5nOyAgLy8gVmVnYSBleHByIHN0cmluZyB0byBkZXRlcm1pbmUgaW5jbHVzaW9uIGluIHNlbGVjdGlvbi5cbiAgc2NhbGVEb21haW46IHN0cmluZzsgIC8vIFZlZ2EgZXhwciBzdHJpbmcgdG8gbWF0ZXJpYWxpemUgYSBzY2FsZSBkb21haW4uXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVVuaXRTZWxlY3Rpb24obW9kZWw6IFVuaXRNb2RlbCwgc2VsRGVmczogRGljdDxTZWxlY3Rpb25EZWY+KSB7XG4gIGNvbnN0IHNlbENtcHRzOiBEaWN0PFNlbGVjdGlvbkNvbXBvbmVudD4gPSB7fTtcbiAgY29uc3Qgc2VsZWN0aW9uQ29uZmlnID0gbW9kZWwuY29uZmlnLnNlbGVjdGlvbjtcblxuICBmb3IgKGxldCBuYW1lIGluIHNlbERlZnMpIHtcbiAgICBpZiAoIXNlbERlZnMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGNvbnN0IHNlbERlZiA9IHNlbERlZnNbbmFtZV07XG4gICAgY29uc3QgY2ZnID0gc2VsZWN0aW9uQ29uZmlnW3NlbERlZi50eXBlXTtcblxuICAgIC8vIFNldCBkZWZhdWx0IHZhbHVlcyBmcm9tIGNvbmZpZyBpZiBhIHByb3BlcnR5IGhhc24ndCBiZWVuIHNwZWNpZmllZCxcbiAgICAvLyBvciBpZiBpdCBpcyB0cnVlLiBFLmcuLCBcInRyYW5zbGF0ZVwiOiB0cnVlIHNob3VsZCB1c2UgdGhlIGRlZmF1bHRcbiAgICAvLyBldmVudCBoYW5kbGVycyBmb3IgdHJhbnNsYXRlLiBIb3dldmVyLCB0cnVlIG1heSBiZSBhIHZhbGlkIHZhbHVlIGZvclxuICAgIC8vIGEgcHJvcGVydHkgKGUuZy4sIFwibmVhcmVzdFwiOiB0cnVlKS5cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBjZmcpIHtcbiAgICAgIC8vIEEgc2VsZWN0aW9uIHNob3VsZCBjb250YWluIGVpdGhlciBgZW5jb2RpbmdzYCBvciBgZmllbGRzYCwgb25seSB1c2VcbiAgICAgIC8vIGRlZmF1bHQgdmFsdWVzIGZvciB0aGVzZSB0d28gdmFsdWVzIGlmIG5laXRoZXIgb2YgdGhlbSBpcyBzcGVjaWZpZWQuXG4gICAgICBpZiAoKGtleSA9PT0gJ2VuY29kaW5ncycgJiYgc2VsRGVmLmZpZWxkcykgfHwgKGtleSA9PT0gJ2ZpZWxkcycgJiYgc2VsRGVmLmVuY29kaW5ncykpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChrZXkgPT09ICdtYXJrJykge1xuICAgICAgICBzZWxEZWZba2V5XSA9IHsuLi5jZmdba2V5XSwgLi4uc2VsRGVmW2tleV19O1xuICAgICAgfVxuXG4gICAgICBpZiAoc2VsRGVmW2tleV0gPT09IHVuZGVmaW5lZCB8fCBzZWxEZWZba2V5XSA9PT0gdHJ1ZSkge1xuICAgICAgICBzZWxEZWZba2V5XSA9IGNmZ1trZXldIHx8IHNlbERlZltrZXldO1xuICAgICAgfVxuICAgIH1cblxuICAgIG5hbWUgPSB2YXJOYW1lKG5hbWUpO1xuICAgIGNvbnN0IHNlbENtcHQgPSBzZWxDbXB0c1tuYW1lXSA9IHtcbiAgICAgIC4uLnNlbERlZixcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBldmVudHM6IGlzU3RyaW5nKHNlbERlZi5vbikgPyBwYXJzZVNlbGVjdG9yKHNlbERlZi5vbiwgJ3Njb3BlJykgOiBzZWxEZWYub24sXG4gICAgfSBhcyBTZWxlY3Rpb25Db21wb25lbnQ7XG5cbiAgICBmb3JFYWNoVHJhbnNmb3JtKHNlbENtcHQsIHR4Q29tcGlsZXIgPT4ge1xuICAgICAgaWYgKHR4Q29tcGlsZXIucGFyc2UpIHtcbiAgICAgICAgdHhDb21waWxlci5wYXJzZShtb2RlbCwgc2VsRGVmLCBzZWxDbXB0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBzZWxDbXB0cztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VtYmxlVW5pdFNlbGVjdGlvblNpZ25hbHMobW9kZWw6IFVuaXRNb2RlbCwgc2lnbmFsczogYW55W10pIHtcbiAgZm9yRWFjaFNlbGVjdGlvbihtb2RlbCwgKHNlbENtcHQsIHNlbENvbXBpbGVyKSA9PiB7XG4gICAgY29uc3QgbmFtZSA9IHNlbENtcHQubmFtZTtcbiAgICBsZXQgbW9kaWZ5RXhwciA9IHNlbENvbXBpbGVyLm1vZGlmeUV4cHIobW9kZWwsIHNlbENtcHQpO1xuXG4gICAgc2lnbmFscy5wdXNoLmFwcGx5KHNpZ25hbHMsIHNlbENvbXBpbGVyLnNpZ25hbHMobW9kZWwsIHNlbENtcHQpKTtcblxuICAgIGZvckVhY2hUcmFuc2Zvcm0oc2VsQ21wdCwgdHhDb21waWxlciA9PiB7XG4gICAgICBpZiAodHhDb21waWxlci5zaWduYWxzKSB7XG4gICAgICAgIHNpZ25hbHMgPSB0eENvbXBpbGVyLnNpZ25hbHMobW9kZWwsIHNlbENtcHQsIHNpZ25hbHMpO1xuICAgICAgfVxuICAgICAgaWYgKHR4Q29tcGlsZXIubW9kaWZ5RXhwcikge1xuICAgICAgICBtb2RpZnlFeHByID0gdHhDb21waWxlci5tb2RpZnlFeHByKG1vZGVsLCBzZWxDbXB0LCBtb2RpZnlFeHByKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHNpZ25hbHMucHVzaCh7XG4gICAgICBuYW1lOiBuYW1lICsgTU9ESUZZLFxuICAgICAgb246IFt7XG4gICAgICAgIGV2ZW50czoge3NpZ25hbDogbmFtZSArIFRVUExFfSxcbiAgICAgICAgdXBkYXRlOiBgbW9kaWZ5KCR7c3RyaW5nVmFsdWUoc2VsQ21wdC5uYW1lICsgU1RPUkUpfSwgJHttb2RpZnlFeHByfSlgXG4gICAgICB9XVxuICAgIH0pO1xuICB9KTtcblxuICBjb25zdCBmYWNldE1vZGVsID0gZ2V0RmFjZXRNb2RlbChtb2RlbCk7XG4gIGlmIChzaWduYWxzLmxlbmd0aCAmJiBmYWNldE1vZGVsKSB7XG4gICAgY29uc3QgbmFtZSA9IHN0cmluZ1ZhbHVlKGZhY2V0TW9kZWwuZ2V0TmFtZSgnY2VsbCcpKTtcbiAgICBzaWduYWxzLnVuc2hpZnQoe1xuICAgICAgbmFtZTogJ2ZhY2V0JyxcbiAgICAgIHZhbHVlOiB7fSxcbiAgICAgIG9uOiBbe1xuICAgICAgICBldmVudHM6IHBhcnNlU2VsZWN0b3IoJ21vdXNlbW92ZScsICdzY29wZScpLFxuICAgICAgICB1cGRhdGU6IGBpc1R1cGxlKGZhY2V0KSA/IGZhY2V0IDogZ3JvdXAoJHtuYW1lfSkuZGF0dW1gXG4gICAgICB9XVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHNpZ25hbHM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlbWJsZVRvcExldmVsU2lnbmFscyhtb2RlbDogVW5pdE1vZGVsLCBzaWduYWxzOiBhbnlbXSkge1xuICBsZXQgbmVlZHNVbml0ID0gZmFsc2U7XG4gIGZvckVhY2hTZWxlY3Rpb24obW9kZWwsIChzZWxDbXB0LCBzZWxDb21waWxlcikgPT4ge1xuICAgIGlmIChzZWxDb21waWxlci50b3BMZXZlbFNpZ25hbHMpIHtcbiAgICAgIHNpZ25hbHMgPSBzZWxDb21waWxlci50b3BMZXZlbFNpZ25hbHMobW9kZWwsIHNlbENtcHQsIHNpZ25hbHMpO1xuICAgIH1cblxuICAgIGZvckVhY2hUcmFuc2Zvcm0oc2VsQ21wdCwgdHhDb21waWxlciA9PiB7XG4gICAgICBpZiAodHhDb21waWxlci50b3BMZXZlbFNpZ25hbHMpIHtcbiAgICAgICAgc2lnbmFscyA9IHR4Q29tcGlsZXIudG9wTGV2ZWxTaWduYWxzKG1vZGVsLCBzZWxDbXB0LCBzaWduYWxzKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIG5lZWRzVW5pdCA9IHRydWU7XG4gIH0pO1xuXG4gIGlmIChuZWVkc1VuaXQpIHtcbiAgICBjb25zdCBoYXNVbml0ID0gc2lnbmFscy5maWx0ZXIoKHMpID0+IHMubmFtZSA9PT0gJ3VuaXQnKTtcbiAgICBpZiAoIShoYXNVbml0Lmxlbmd0aCkpIHtcbiAgICAgIHNpZ25hbHMudW5zaGlmdCh7XG4gICAgICAgIG5hbWU6ICd1bml0JyxcbiAgICAgICAgdmFsdWU6IHt9LFxuICAgICAgICBvbjogW3tldmVudHM6ICdtb3VzZW1vdmUnLCB1cGRhdGU6ICdpc1R1cGxlKGdyb3VwKCkpID8gZ3JvdXAoKSA6IHVuaXQnfV1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzaWduYWxzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzZW1ibGVVbml0U2VsZWN0aW9uRGF0YShtb2RlbDogVW5pdE1vZGVsLCBkYXRhOiBWZ0RhdGFbXSk6IFZnRGF0YVtdIHtcbiAgZm9yRWFjaFNlbGVjdGlvbihtb2RlbCwgc2VsQ21wdCA9PiB7XG4gICAgY29uc3QgY29udGFpbnMgPSBkYXRhLmZpbHRlcigoZCkgPT4gZC5uYW1lID09PSBzZWxDbXB0Lm5hbWUgKyBTVE9SRSk7XG4gICAgaWYgKCFjb250YWlucy5sZW5ndGgpIHtcbiAgICAgIGRhdGEucHVzaCh7bmFtZTogc2VsQ21wdC5uYW1lICsgU1RPUkV9KTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzZW1ibGVVbml0U2VsZWN0aW9uTWFya3MobW9kZWw6IFVuaXRNb2RlbCwgbWFya3M6IGFueVtdKTogYW55W10ge1xuICBmb3JFYWNoU2VsZWN0aW9uKG1vZGVsLCAoc2VsQ21wdCwgc2VsQ29tcGlsZXIpID0+IHtcbiAgICBtYXJrcyA9IHNlbENvbXBpbGVyLm1hcmtzID8gc2VsQ29tcGlsZXIubWFya3MobW9kZWwsIHNlbENtcHQsIG1hcmtzKSA6IG1hcmtzO1xuICAgIGZvckVhY2hUcmFuc2Zvcm0oc2VsQ21wdCwgKHR4Q29tcGlsZXIpID0+IHtcbiAgICAgIGlmICh0eENvbXBpbGVyLm1hcmtzKSB7XG4gICAgICAgIG1hcmtzID0gdHhDb21waWxlci5tYXJrcyhtb2RlbCwgc2VsQ21wdCwgbWFya3MpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcblxuICByZXR1cm4gbWFya3M7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlbWJsZUxheWVyU2VsZWN0aW9uTWFya3MobW9kZWw6IExheWVyTW9kZWwsIG1hcmtzOiBhbnlbXSk6IGFueVtdIHtcbiAgbW9kZWwuY2hpbGRyZW4uZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgaWYgKGlzVW5pdE1vZGVsKGNoaWxkKSkge1xuICAgICAgbWFya3MgPSBhc3NlbWJsZVVuaXRTZWxlY3Rpb25NYXJrcyhjaGlsZCwgbWFya3MpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIG1hcmtzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VsZWN0aW9uUHJlZGljYXRlKG1vZGVsOiBNb2RlbCwgc2VsZWN0aW9uczogTG9naWNhbE9wZXJhbmQ8c3RyaW5nPiwgZGZub2RlPzogRGF0YUZsb3dOb2RlKTogc3RyaW5nIHtcbiAgY29uc3Qgc3RvcmVzOiBzdHJpbmdbXSA9IFtdO1xuICBmdW5jdGlvbiBleHByKG5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3Qgdm5hbWUgPSB2YXJOYW1lKG5hbWUpO1xuICAgIGNvbnN0IHNlbENtcHQgPSBtb2RlbC5nZXRTZWxlY3Rpb25Db21wb25lbnQodm5hbWUsIG5hbWUpO1xuICAgIGNvbnN0IHN0b3JlID0gc3RyaW5nVmFsdWUodm5hbWUgKyBTVE9SRSk7XG5cbiAgICBpZiAoc2VsQ21wdC50aW1lVW5pdCkge1xuICAgICAgY29uc3QgY2hpbGQgPSBkZm5vZGUgfHwgbW9kZWwuY29tcG9uZW50LmRhdGEucmF3O1xuICAgICAgY29uc3QgdHVub2RlID0gc2VsQ21wdC50aW1lVW5pdC5jbG9uZSgpO1xuICAgICAgaWYgKGNoaWxkLnBhcmVudCkge1xuICAgICAgICB0dW5vZGUuaW5zZXJ0QXNQYXJlbnRPZihjaGlsZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaGlsZC5wYXJlbnQgPSB0dW5vZGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNlbENtcHQuZW1wdHkgIT09ICdub25lJykge1xuICAgICAgc3RvcmVzLnB1c2goc3RvcmUpO1xuICAgIH1cblxuICAgIHJldHVybiBjb21waWxlcihzZWxDbXB0LnR5cGUpLnByZWRpY2F0ZSArIGAoJHtzdG9yZX0sIGRhdHVtYCArXG4gICAgICAoc2VsQ21wdC5yZXNvbHZlID09PSAnZ2xvYmFsJyA/ICcpJyA6IGAsICR7c3RyaW5nVmFsdWUoc2VsQ21wdC5yZXNvbHZlKX0pYCk7XG4gIH1cblxuICBjb25zdCBwcmVkaWNhdGVTdHIgPSBsb2dpY2FsRXhwcihzZWxlY3Rpb25zLCBleHByKTtcbiAgcmV0dXJuIChzdG9yZXMubGVuZ3RoXG4gICAgPyAnISgnICsgc3RvcmVzLm1hcCgocykgPT4gYGxlbmd0aChkYXRhKCR7c30pKWApLmpvaW4oJyB8fCAnKSArICcpIHx8ICdcbiAgICA6ICcnXG4gICkgKyBgKCR7cHJlZGljYXRlU3RyfSlgO1xufVxuXG4vLyBTZWxlY3Rpb25zIGFyZSBwYXJzZWQgX2FmdGVyXyBzY2FsZXMuIElmIGEgc2NhbGUgZG9tYWluIGlzIHNldCB0b1xuLy8gdXNlIGEgc2VsZWN0aW9uLCB0aGUgU0VMRUNUSU9OX0RPTUFJTiBjb25zdGFudCBpcyB1c2VkIGFzIHRoZVxuLy8gZG9tYWluUmF3LnNpZ25hbCBkdXJpbmcgc2NhbGUucGFyc2UgYW5kIHRoZW4gcmVwbGFjZWQgd2l0aCB0aGUgbmVjZXNzYXJ5XG4vLyBzZWxlY3Rpb24gZXhwcmVzc2lvbiBmdW5jdGlvbiBkdXJpbmcgc2NhbGUuYXNzZW1ibGUuIFRvIG5vdCBwb2xsdXRlIHRoZVxuLy8gdHlwZSBzaWduYXR1cmVzIHRvIGFjY291bnQgZm9yIHRoaXMgc2V0dXAsIHRoZSBzZWxlY3Rpb24gZG9tYWluIGRlZmluaXRpb25cbi8vIGlzIGNvZXJjZWQgdG8gYSBzdHJpbmcgYW5kIGFwcGVuZGVkIHRvIFNFTEVDVElPTl9ET01BSU4uXG5leHBvcnQgZnVuY3Rpb24gaXNSYXdTZWxlY3Rpb25Eb21haW4oZG9tYWluUmF3OiBWZ1NpZ25hbFJlZikge1xuICByZXR1cm4gZG9tYWluUmF3LnNpZ25hbC5pbmRleE9mKFNFTEVDVElPTl9ET01BSU4pID49IDA7XG59XG5leHBvcnQgZnVuY3Rpb24gc2VsZWN0aW9uU2NhbGVEb21haW4obW9kZWw6IE1vZGVsLCBkb21haW5SYXc6IFZnU2lnbmFsUmVmKTogVmdTaWduYWxSZWYge1xuICBjb25zdCBzZWxEb21haW4gPSBKU09OLnBhcnNlKGRvbWFpblJhdy5zaWduYWwucmVwbGFjZShTRUxFQ1RJT05fRE9NQUlOLCAnJykpO1xuICBjb25zdCBuYW1lID0gdmFyTmFtZShzZWxEb21haW4uc2VsZWN0aW9uKTtcblxuICBsZXQgc2VsQ21wdCA9IG1vZGVsLmNvbXBvbmVudC5zZWxlY3Rpb24gJiYgbW9kZWwuY29tcG9uZW50LnNlbGVjdGlvbltuYW1lXTtcbiAgaWYgKHNlbENtcHQpIHtcbiAgICB3YXJuKCdVc2UgXCJiaW5kXCI6IFwic2NhbGVzXCIgdG8gc2V0dXAgYSBiaW5kaW5nIGZvciBzY2FsZXMgYW5kIHNlbGVjdGlvbnMgd2l0aGluIHRoZSBzYW1lIHZpZXcuJyk7XG4gIH0gZWxzZSB7XG4gICAgc2VsQ21wdCA9IG1vZGVsLmdldFNlbGVjdGlvbkNvbXBvbmVudChuYW1lLCBzZWxEb21haW4uc2VsZWN0aW9uKTtcbiAgICBpZiAoIXNlbERvbWFpbi5lbmNvZGluZyAmJiAhc2VsRG9tYWluLmZpZWxkKSB7XG4gICAgICBzZWxEb21haW4uZmllbGQgPSBzZWxDbXB0LnByb2plY3RbMF0uZmllbGQ7XG4gICAgICBpZiAoc2VsQ21wdC5wcm9qZWN0Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgd2FybignQSBcImZpZWxkXCIgb3IgXCJlbmNvZGluZ1wiIG11c3QgYmUgc3BlY2lmaWVkIHdoZW4gdXNpbmcgYSBzZWxlY3Rpb24gYXMgYSBzY2FsZSBkb21haW4uICcgK1xuICAgICAgICBgVXNpbmcgXCJmaWVsZFwiOiAke3N0cmluZ1ZhbHVlKHNlbERvbWFpbi5maWVsZCl9LmApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgc2lnbmFsOiBjb21waWxlcihzZWxDbXB0LnR5cGUpLnNjYWxlRG9tYWluICtcbiAgICAgICAgYCgke3N0cmluZ1ZhbHVlKG5hbWUgKyBTVE9SRSl9LCAke3N0cmluZ1ZhbHVlKHNlbERvbWFpbi5lbmNvZGluZyB8fCBudWxsKX0sIGAgK1xuICAgICAgICAgIHN0cmluZ1ZhbHVlKHNlbERvbWFpbi5maWVsZCB8fCBudWxsKSArXG4gICAgICAgICAgKHNlbENtcHQucmVzb2x2ZSA9PT0gJ2dsb2JhbCcgPyAnKScgOiBgLCAke3N0cmluZ1ZhbHVlKHNlbENtcHQucmVzb2x2ZSl9KWApXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7c2lnbmFsOiAnbnVsbCd9O1xufVxuXG4vLyBVdGlsaXR5IGZ1bmN0aW9uc1xuXG5mdW5jdGlvbiBmb3JFYWNoU2VsZWN0aW9uKG1vZGVsOiBNb2RlbCwgY2I6IChzZWxDbXB0OiBTZWxlY3Rpb25Db21wb25lbnQsIHNlbENvbXBpbGVyOiBTZWxlY3Rpb25Db21waWxlcikgPT4gdm9pZCkge1xuICBjb25zdCBzZWxlY3Rpb25zID0gbW9kZWwuY29tcG9uZW50LnNlbGVjdGlvbjtcbiAgZm9yIChjb25zdCBuYW1lIGluIHNlbGVjdGlvbnMpIHtcbiAgICBpZiAoc2VsZWN0aW9ucy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgY29uc3Qgc2VsID0gc2VsZWN0aW9uc1tuYW1lXTtcbiAgICAgIGNiKHNlbCwgY29tcGlsZXIoc2VsLnR5cGUpKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tcGlsZXIodHlwZTogU2VsZWN0aW9uVHlwZSk6IFNlbGVjdGlvbkNvbXBpbGVyIHtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnc2luZ2xlJzpcbiAgICAgIHJldHVybiBzaW5nbGVDb21waWxlcjtcbiAgICBjYXNlICdtdWx0aSc6XG4gICAgICByZXR1cm4gbXVsdGlDb21waWxlcjtcbiAgICBjYXNlICdpbnRlcnZhbCc6XG4gICAgICByZXR1cm4gaW50ZXJ2YWxDb21waWxlcjtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0RmFjZXRNb2RlbChtb2RlbDogTW9kZWwpOiBGYWNldE1vZGVsIHtcbiAgbGV0IHBhcmVudCA9IG1vZGVsLnBhcmVudDtcbiAgd2hpbGUgKHBhcmVudCkge1xuICAgIGlmIChpc0ZhY2V0TW9kZWwocGFyZW50KSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gIH1cblxuICByZXR1cm4gcGFyZW50IGFzIEZhY2V0TW9kZWw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bml0TmFtZShtb2RlbDogTW9kZWwpIHtcbiAgbGV0IG5hbWUgPSBzdHJpbmdWYWx1ZShtb2RlbC5uYW1lKTtcbiAgY29uc3QgZmFjZXQgPSBnZXRGYWNldE1vZGVsKG1vZGVsKTtcbiAgaWYgKGZhY2V0KSB7XG4gICAgbmFtZSArPSAoZmFjZXQuZmFjZXQucm93ID8gYCArICdfJyArIGZhY2V0JHthY2Nlc3NQYXRoKGZhY2V0LnZnRmllbGQoJ3JvdycpKX1gIDogJycpXG4gICAgICArIChmYWNldC5mYWNldC5jb2x1bW4gPyBgICsgJ18nICsgZmFjZXQke2FjY2Vzc1BhdGgoZmFjZXQudmdGaWVsZCgnY29sdW1uJykpfWAgOiAnJyk7XG4gIH1cbiAgcmV0dXJuIG5hbWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXF1aXJlc1NlbGVjdGlvbklkKG1vZGVsOiBNb2RlbCkge1xuICBsZXQgaWRlbnRpZmllciA9IGZhbHNlO1xuICBmb3JFYWNoU2VsZWN0aW9uKG1vZGVsLCAoc2VsQ21wdCkgPT4ge1xuICAgIGlkZW50aWZpZXIgPSBpZGVudGlmaWVyIHx8IHNlbENtcHQucHJvamVjdC5zb21lKChwcm9qKSA9PiBwcm9qLmZpZWxkID09PSBTRUxFQ1RJT05fSUQpO1xuICB9KTtcbiAgcmV0dXJuIGlkZW50aWZpZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGFubmVsU2lnbmFsTmFtZShzZWxDbXB0OiBTZWxlY3Rpb25Db21wb25lbnQsIGNoYW5uZWw6IENoYW5uZWwsIHJhbmdlOiAndmlzdWFsJyB8ICdkYXRhJykge1xuICByZXR1cm4gdmFyTmFtZShzZWxDbXB0Lm5hbWUgKyAnXycgKyAocmFuZ2UgPT09ICd2aXN1YWwnID8gY2hhbm5lbCA6IHNlbENtcHQuZmllbGRzW2NoYW5uZWxdKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwb3NpdGlvbmFsUHJvamVjdGlvbnMoc2VsQ21wdDogU2VsZWN0aW9uQ29tcG9uZW50KSB7XG4gIGxldCB4OlByb2plY3RDb21wb25lbnQgPSBudWxsO1xuICBsZXQgeGk6bnVtYmVyID0gbnVsbDtcbiAgbGV0IHk6UHJvamVjdENvbXBvbmVudCA9IG51bGw7XG4gIGxldCB5aTogbnVtYmVyID0gbnVsbDtcblxuICBzZWxDbXB0LnByb2plY3QuZm9yRWFjaCgocCwgaSkgPT4ge1xuICAgIGlmIChwLmNoYW5uZWwgPT09IFgpIHtcbiAgICAgIHggPSBwO1xuICAgICAgeGkgPSBpO1xuICAgIH0gZWxzZSBpZiAocC5jaGFubmVsID09PSBZKSB7XG4gICAgICB5ID0gcDtcbiAgICAgIHlpID0gaTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4ge3gsIHhpLCB5LCB5aX07XG59XG4iXX0=