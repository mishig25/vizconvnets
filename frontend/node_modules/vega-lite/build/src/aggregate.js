"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var vega_util_1 = require("vega-util");
var util_1 = require("./util");
var AGGREGATE_OP_INDEX = {
    argmax: 1,
    argmin: 1,
    average: 1,
    count: 1,
    distinct: 1,
    max: 1,
    mean: 1,
    median: 1,
    min: 1,
    missing: 1,
    q1: 1,
    q3: 1,
    ci0: 1,
    ci1: 1,
    stderr: 1,
    stdev: 1,
    stdevp: 1,
    sum: 1,
    valid: 1,
    values: 1,
    variance: 1,
    variancep: 1,
};
exports.AGGREGATE_OPS = util_1.flagKeys(AGGREGATE_OP_INDEX);
function isAggregateOp(a) {
    return !!AGGREGATE_OP_INDEX[a];
}
exports.isAggregateOp = isAggregateOp;
exports.COUNTING_OPS = ['count', 'valid', 'missing', 'distinct'];
function isCountingAggregateOp(aggregate) {
    return aggregate && util_1.contains(exports.COUNTING_OPS, aggregate);
}
exports.isCountingAggregateOp = isCountingAggregateOp;
/** Additive-based aggregation operations.  These can be applied to stack. */
exports.SUM_OPS = [
    'count',
    'sum',
    'distinct',
    'valid',
    'missing'
];
/**
 * Aggregation operators that always produce values within the range [domainMin, domainMax].
 */
exports.SHARED_DOMAIN_OPS = [
    'mean',
    'average',
    'median',
    'q1',
    'q3',
    'min',
    'max',
];
exports.SHARED_DOMAIN_OP_INDEX = vega_util_1.toSet(exports.SHARED_DOMAIN_OPS);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWdncmVnYXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FnZ3JlZ2F0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLHVDQUFnQztBQUNoQywrQkFBZ0Q7QUFFaEQsSUFBTSxrQkFBa0IsR0FBc0I7SUFDNUMsTUFBTSxFQUFFLENBQUM7SUFDVCxNQUFNLEVBQUUsQ0FBQztJQUNULE9BQU8sRUFBRSxDQUFDO0lBQ1YsS0FBSyxFQUFFLENBQUM7SUFDUixRQUFRLEVBQUUsQ0FBQztJQUNYLEdBQUcsRUFBRSxDQUFDO0lBQ04sSUFBSSxFQUFFLENBQUM7SUFDUCxNQUFNLEVBQUUsQ0FBQztJQUNULEdBQUcsRUFBRSxDQUFDO0lBQ04sT0FBTyxFQUFFLENBQUM7SUFDVixFQUFFLEVBQUUsQ0FBQztJQUNMLEVBQUUsRUFBRSxDQUFDO0lBQ0wsR0FBRyxFQUFFLENBQUM7SUFDTixHQUFHLEVBQUUsQ0FBQztJQUNOLE1BQU0sRUFBRSxDQUFDO0lBQ1QsS0FBSyxFQUFFLENBQUM7SUFDUixNQUFNLEVBQUUsQ0FBQztJQUNULEdBQUcsRUFBRSxDQUFDO0lBQ04sS0FBSyxFQUFFLENBQUM7SUFDUixNQUFNLEVBQUUsQ0FBQztJQUNULFFBQVEsRUFBRSxDQUFDO0lBQ1gsU0FBUyxFQUFFLENBQUM7Q0FDYixDQUFDO0FBRVcsUUFBQSxhQUFhLEdBQUcsZUFBUSxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFFMUQsdUJBQThCLENBQVM7SUFDckMsTUFBTSxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqQyxDQUFDO0FBRkQsc0NBRUM7QUFFWSxRQUFBLFlBQVksR0FBa0IsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUVyRiwrQkFBc0MsU0FBaUI7SUFDckQsTUFBTSxDQUFDLFNBQVMsSUFBSSxlQUFRLENBQUMsb0JBQVksRUFBRSxTQUFTLENBQUMsQ0FBQztBQUN4RCxDQUFDO0FBRkQsc0RBRUM7QUFFRCw2RUFBNkU7QUFDaEUsUUFBQSxPQUFPLEdBQWtCO0lBQ2xDLE9BQU87SUFDUCxLQUFLO0lBQ0wsVUFBVTtJQUNWLE9BQU87SUFDUCxTQUFTO0NBQ1osQ0FBQztBQUVGOztHQUVHO0FBQ1UsUUFBQSxpQkFBaUIsR0FBa0I7SUFDNUMsTUFBTTtJQUNOLFNBQVM7SUFDVCxRQUFRO0lBQ1IsSUFBSTtJQUNKLElBQUk7SUFDSixLQUFLO0lBQ0wsS0FBSztDQUNSLENBQUM7QUFFVyxRQUFBLHNCQUFzQixHQUFHLGlCQUFLLENBQUMseUJBQWlCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QWdncmVnYXRlT3B9IGZyb20gJ3ZlZ2EnO1xuaW1wb3J0IHt0b1NldH0gZnJvbSAndmVnYS11dGlsJztcbmltcG9ydCB7Y29udGFpbnMsIEZsYWcsIGZsYWdLZXlzfSBmcm9tICcuL3V0aWwnO1xuXG5jb25zdCBBR0dSRUdBVEVfT1BfSU5ERVg6IEZsYWc8QWdncmVnYXRlT3A+ID0ge1xuICBhcmdtYXg6IDEsXG4gIGFyZ21pbjogMSxcbiAgYXZlcmFnZTogMSxcbiAgY291bnQ6IDEsXG4gIGRpc3RpbmN0OiAxLFxuICBtYXg6IDEsXG4gIG1lYW46IDEsXG4gIG1lZGlhbjogMSxcbiAgbWluOiAxLFxuICBtaXNzaW5nOiAxLFxuICBxMTogMSxcbiAgcTM6IDEsXG4gIGNpMDogMSxcbiAgY2kxOiAxLFxuICBzdGRlcnI6IDEsXG4gIHN0ZGV2OiAxLFxuICBzdGRldnA6IDEsXG4gIHN1bTogMSxcbiAgdmFsaWQ6IDEsXG4gIHZhbHVlczogMSxcbiAgdmFyaWFuY2U6IDEsXG4gIHZhcmlhbmNlcDogMSxcbn07XG5cbmV4cG9ydCBjb25zdCBBR0dSRUdBVEVfT1BTID0gZmxhZ0tleXMoQUdHUkVHQVRFX09QX0lOREVYKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzQWdncmVnYXRlT3AoYTogc3RyaW5nKTogYSBpcyBBZ2dyZWdhdGVPcCB7XG4gIHJldHVybiAhIUFHR1JFR0FURV9PUF9JTkRFWFthXTtcbn1cblxuZXhwb3J0IGNvbnN0IENPVU5USU5HX09QUzogQWdncmVnYXRlT3BbXSA9IFsnY291bnQnLCAndmFsaWQnLCAnbWlzc2luZycsICdkaXN0aW5jdCddO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNDb3VudGluZ0FnZ3JlZ2F0ZU9wKGFnZ3JlZ2F0ZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiBhZ2dyZWdhdGUgJiYgY29udGFpbnMoQ09VTlRJTkdfT1BTLCBhZ2dyZWdhdGUpO1xufVxuXG4vKiogQWRkaXRpdmUtYmFzZWQgYWdncmVnYXRpb24gb3BlcmF0aW9ucy4gIFRoZXNlIGNhbiBiZSBhcHBsaWVkIHRvIHN0YWNrLiAqL1xuZXhwb3J0IGNvbnN0IFNVTV9PUFM6IEFnZ3JlZ2F0ZU9wW10gPSBbXG4gICAgJ2NvdW50JyxcbiAgICAnc3VtJyxcbiAgICAnZGlzdGluY3QnLFxuICAgICd2YWxpZCcsXG4gICAgJ21pc3NpbmcnXG5dO1xuXG4vKipcbiAqIEFnZ3JlZ2F0aW9uIG9wZXJhdG9ycyB0aGF0IGFsd2F5cyBwcm9kdWNlIHZhbHVlcyB3aXRoaW4gdGhlIHJhbmdlIFtkb21haW5NaW4sIGRvbWFpbk1heF0uXG4gKi9cbmV4cG9ydCBjb25zdCBTSEFSRURfRE9NQUlOX09QUzogQWdncmVnYXRlT3BbXSA9IFtcbiAgICAnbWVhbicsXG4gICAgJ2F2ZXJhZ2UnLFxuICAgICdtZWRpYW4nLFxuICAgICdxMScsXG4gICAgJ3EzJyxcbiAgICAnbWluJyxcbiAgICAnbWF4Jyxcbl07XG5cbmV4cG9ydCBjb25zdCBTSEFSRURfRE9NQUlOX09QX0lOREVYID0gdG9TZXQoU0hBUkVEX0RPTUFJTl9PUFMpO1xuIl19