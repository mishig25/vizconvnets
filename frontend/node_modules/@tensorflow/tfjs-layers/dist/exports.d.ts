import { Constraint, MaxNormConfig, MinMaxNormConfig, UnitNormConfig } from './constraints';
import { ContainerConfig, InputConfig, InputLayerConfig, Layer, LayerConfig } from './engine/topology';
import { Model } from './engine/training';
import { ConstantConfig, IdentityConfig, Initializer, OrthogonalConfig, RandomNormalConfig, RandomUniformConfig, SeedOnlyInitializerConfig, TruncatedNormalConfig, VarianceScalingConfig, Zeros } from './initializers';
import { ConvLayerConfig } from './layers/convolutional';
import { DepthwiseConv2DLayerConfig } from './layers/convolutional_depthwise';
import { ActivationLayerConfig, DenseLayerConfig, DropoutLayerConfig, RepeatVectorLayerConfig } from './layers/core';
import { EmbeddingLayerConfig } from './layers/embeddings';
import { ConcatenateLayerConfig } from './layers/merge';
import { BatchNormalizationLayerConfig } from './layers/normalization';
import { GlobalPooling2DLayerConfig, Pooling1DLayerConfig, Pooling2DLayerConfig } from './layers/pooling';
import { GRUCellLayerConfig, GRULayerConfig, LSTMCellLayerConfig, LSTMLayerConfig, RNNCell, RNNLayerConfig, SimpleRNNCellLayerConfig, SimpleRNNLayerConfig, StackedRNNCellsConfig } from './layers/recurrent';
import { BidirectionalLayerConfig, WrapperLayerConfig } from './layers/wrappers';
import { Sequential, SequentialConfig } from './models';
import { L1Config, L1L2Config, L2Config, Regularizer } from './regularizers';
import { SymbolicTensor } from './types';
export declare class ModelExports {
    static model(config: ContainerConfig): Model;
    static sequential(config?: SequentialConfig): Sequential;
    static loadModel(modelConfigPath: string): Promise<Model>;
    static input(config: InputConfig): SymbolicTensor;
}
export declare class LayerExports {
    static Layer: typeof Layer;
    static RNNCell: typeof RNNCell;
    static inputLayer(config: InputLayerConfig): Layer;
    static input: typeof ModelExports.input;
    static conv1d(config: ConvLayerConfig): Layer;
    static conv2d(config: ConvLayerConfig): Layer;
    static depthwiseConv2d(config: DepthwiseConv2DLayerConfig): Layer;
    static activation(config: ActivationLayerConfig): Layer;
    static dense(config: DenseLayerConfig): Layer;
    static dropout(config: DropoutLayerConfig): Layer;
    static flatten(config?: LayerConfig): Layer;
    static repeatVector(config: RepeatVectorLayerConfig): Layer;
    static embedding(config: EmbeddingLayerConfig): Layer;
    static add(config?: LayerConfig): Layer;
    static average(config?: LayerConfig): Layer;
    static concatenate(config: ConcatenateLayerConfig): Layer;
    static maximum(config?: LayerConfig): Layer;
    static minimum(config?: LayerConfig): Layer;
    static multiply(config?: LayerConfig): Layer;
    static batchNormalization(config: BatchNormalizationLayerConfig): Layer;
    static avgPooling1d(config: Pooling1DLayerConfig): Layer;
    static avgPooling2d(config: Pooling2DLayerConfig): Layer;
    static globalAveragePooling1d(config: LayerConfig): Layer;
    static globalAveragePooling2d(config: GlobalPooling2DLayerConfig): Layer;
    static globalMaxPooling1d(config: LayerConfig): Layer;
    static globalMaxPooling2d(config: GlobalPooling2DLayerConfig): Layer;
    static maxPooling1d(config: Pooling1DLayerConfig): Layer;
    static maxPooling2d(config: Pooling2DLayerConfig): Layer;
    static gru(config: GRULayerConfig): Layer;
    static gruCell(config: GRUCellLayerConfig): RNNCell;
    static lstm(config: LSTMLayerConfig): Layer;
    static lstmCell(config: LSTMCellLayerConfig): RNNCell;
    static simpleRNN(config: SimpleRNNLayerConfig): Layer;
    static simpleRNNCell(config: SimpleRNNCellLayerConfig): RNNCell;
    static rnn(config: RNNLayerConfig): Layer;
    static stackedRNNCells(config: StackedRNNCellsConfig): RNNCell;
    static bidirectional(config: BidirectionalLayerConfig): Layer;
    static timeDistributed(config: WrapperLayerConfig): Layer;
}
export declare class ConstraintExports {
    static maxNorm(config: MaxNormConfig): Constraint;
    static unitNorm(config: UnitNormConfig): Constraint;
    static nonNeg(): Constraint;
    static minMaxNorm(config: MinMaxNormConfig): Constraint;
}
export declare class InitializerExports {
    static zeros(): Zeros;
    static ones(): Initializer;
    static constant(config: ConstantConfig): Initializer;
    static randomUniform(config: RandomUniformConfig): Initializer;
    static randomNormal(config: RandomNormalConfig): Initializer;
    static truncatedNormal(config: TruncatedNormalConfig): Initializer;
    static identity(config: IdentityConfig): Initializer;
    static varianceScaling(config: VarianceScalingConfig): Initializer;
    static glorotUniform(config: SeedOnlyInitializerConfig): Initializer;
    static glorotNormal(config: SeedOnlyInitializerConfig): Initializer;
    static heNormal(config: SeedOnlyInitializerConfig): Initializer;
    static leCunNormal(config: SeedOnlyInitializerConfig): Initializer;
    static orthogonal(config: OrthogonalConfig): Initializer;
}
export declare class RegularizerExports {
    static l1l2(config?: L1L2Config): Regularizer;
    static l1(config?: L1Config): Regularizer;
    static l2(config?: L2Config): Regularizer;
}
