{"dependencies":[{"name":"/home/mishig/Desktop/viz/final/package.json","includedInParent":true,"mtime":1522648746056},{"name":"/home/mishig/Desktop/viz/final/node_modules/phaser/package.json","includedInParent":true,"mtime":1521632677000},{"name":"./MergeXHRSettings","loc":{"line":7,"column":31}}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar MergeXHRSettings = require('./MergeXHRSettings');\r\n\r\n/**\r\n * Creates a new XMLHttpRequest (xhr) object based on the given File and XHRSettings\r\n * and starts the download of it. It uses the Files own XHRSettings and merges them\r\n * with the global XHRSettings object to set the xhr values before download.\r\n *\r\n * @function Phaser.Loader.XHRLoader\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Loader.File} file - The File to download.\r\n * @param {XHRSettingsObject} globalXHRSettings - The global XHRSettings object.\r\n *\r\n * @return {XMLHttpRequest} The XHR object.\r\n */\r\nvar XHRLoader = function (file, globalXHRSettings)\r\n{\r\n    var config = MergeXHRSettings(globalXHRSettings, file.xhrSettings);\r\n\r\n    var xhr = new XMLHttpRequest();\r\n\r\n    xhr.open('GET', file.src, config.async, config.user, config.password);\r\n\r\n    xhr.responseType = file.xhrSettings.responseType;\r\n    xhr.timeout = config.timeout;\r\n\r\n    if (config.header && config.headerValue)\r\n    {\r\n        xhr.setRequestHeader(config.header, config.headerValue);\r\n    }\r\n\r\n    if (config.overrideMimeType)\r\n    {\r\n        xhr.overrideMimeType(config.overrideMimeType);\r\n    }\r\n\r\n    // After a successful request, the xhr.response property will contain the requested data as a DOMString, ArrayBuffer, Blob, or Document (depending on what was set for responseType.)\r\n\r\n    xhr.onload = file.onLoad.bind(file);\r\n    xhr.onerror = file.onError.bind(file);\r\n    xhr.onprogress = file.onProgress.bind(file);\r\n\r\n    //  This is the only standard method, the ones above are browser additions (maybe not universal?)\r\n    // xhr.onreadystatechange\r\n\r\n    xhr.send();\r\n\r\n    return xhr;\r\n};\r\n\r\nmodule.exports = XHRLoader;\r\n","map":{"mappings":[{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/phaser/src/loader/XHRLoader.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}}],"sources":{"node_modules/phaser/src/loader/XHRLoader.js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar MergeXHRSettings = require('./MergeXHRSettings');\r\n\r\n/**\r\n * Creates a new XMLHttpRequest (xhr) object based on the given File and XHRSettings\r\n * and starts the download of it. It uses the Files own XHRSettings and merges them\r\n * with the global XHRSettings object to set the xhr values before download.\r\n *\r\n * @function Phaser.Loader.XHRLoader\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Loader.File} file - The File to download.\r\n * @param {XHRSettingsObject} globalXHRSettings - The global XHRSettings object.\r\n *\r\n * @return {XMLHttpRequest} The XHR object.\r\n */\r\nvar XHRLoader = function (file, globalXHRSettings)\r\n{\r\n    var config = MergeXHRSettings(globalXHRSettings, file.xhrSettings);\r\n\r\n    var xhr = new XMLHttpRequest();\r\n\r\n    xhr.open('GET', file.src, config.async, config.user, config.password);\r\n\r\n    xhr.responseType = file.xhrSettings.responseType;\r\n    xhr.timeout = config.timeout;\r\n\r\n    if (config.header && config.headerValue)\r\n    {\r\n        xhr.setRequestHeader(config.header, config.headerValue);\r\n    }\r\n\r\n    if (config.overrideMimeType)\r\n    {\r\n        xhr.overrideMimeType(config.overrideMimeType);\r\n    }\r\n\r\n    // After a successful request, the xhr.response property will contain the requested data as a DOMString, ArrayBuffer, Blob, or Document (depending on what was set for responseType.)\r\n\r\n    xhr.onload = file.onLoad.bind(file);\r\n    xhr.onerror = file.onError.bind(file);\r\n    xhr.onprogress = file.onProgress.bind(file);\r\n\r\n    //  This is the only standard method, the ones above are browser additions (maybe not universal?)\r\n    // xhr.onreadystatechange\r\n\r\n    xhr.send();\r\n\r\n    return xhr;\r\n};\r\n\r\nmodule.exports = XHRLoader;\r\n"},"lineCount":58}},"hash":"5b44956b94b322b4dbc90192517354be","cacheData":{"env":{}}}