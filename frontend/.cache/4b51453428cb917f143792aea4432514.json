{"dependencies":[{"name":"/home/mishig/Desktop/vizgithub/frontend/package.json","includedInParent":true,"mtime":1523230167415},{"name":"/home/mishig/Desktop/vizgithub/frontend/node_modules/@tensorflow/tfjs-layers/package.json","includedInParent":true,"mtime":1522260134000},{"name":"@tensorflow/tfjs-core","loc":{"line":55,"column":26}},{"name":"underscore","loc":{"line":56,"column":16}},{"name":"../backend/tfjs_backend","loc":{"line":57,"column":16}},{"name":"../callbacks","loc":{"line":58,"column":26}},{"name":"../errors","loc":{"line":59,"column":23}},{"name":"../losses","loc":{"line":60,"column":21}},{"name":"../metrics","loc":{"line":61,"column":22}},{"name":"../optimizers","loc":{"line":62,"column":25}},{"name":"../utils/generic_utils","loc":{"line":63,"column":30}},{"name":"./executor","loc":{"line":64,"column":25}},{"name":"./topology","loc":{"line":65,"column":25}}],"generated":{"js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfc = require(\"@tensorflow/tfjs-core\");\nvar tfjs_core_1 = require(\"@tensorflow/tfjs-core\");\nvar _ = require(\"underscore\");\nvar K = require(\"../backend/tfjs_backend\");\nvar callbacks_1 = require(\"../callbacks\");\nvar errors_1 = require(\"../errors\");\nvar losses = require(\"../losses\");\nvar Metrics = require(\"../metrics\");\nvar optimizers = require(\"../optimizers\");\nvar generic_utils_1 = require(\"../utils/generic_utils\");\nvar executor_1 = require(\"./executor\");\nvar topology_1 = require(\"./topology\");\nfunction isDataTensor(x) {\n    return x instanceof tfjs_core_1.Tensor;\n}\nexports.isDataTensor = isDataTensor;\nfunction isDataArray(x) {\n    return Array.isArray(x);\n}\nexports.isDataArray = isDataArray;\nfunction isDataDict(x) {\n    return !isDataTensor(x) && !isDataArray(x);\n}\nexports.isDataDict = isDataDict;\nfunction standardizeInputData(data, names, shapes, checkBatchAxis, exceptionPrefix) {\n    if (checkBatchAxis === void 0) { checkBatchAxis = true; }\n    if (exceptionPrefix === void 0) { exceptionPrefix = ''; }\n    if (names == null || names.length === 0) {\n        if (data != null) {\n            var gotUnexpectedData = false;\n            if (isDataArray(data) && data.length > 0) {\n                gotUnexpectedData = true;\n            }\n            else if (isDataDict(data)) {\n                for (var key in data) {\n                    if (data.hasOwnProperty(key)) {\n                        gotUnexpectedData = true;\n                        break;\n                    }\n                }\n            }\n            else {\n                gotUnexpectedData = true;\n            }\n            if (gotUnexpectedData) {\n                throw new errors_1.ValueError(\"Error when checking model \" + exceptionPrefix + \" expected no data, \" +\n                    (\"but got \" + data));\n            }\n        }\n        return [];\n    }\n    if (data == null) {\n        return names.map(function (name) { return null; });\n    }\n    var arrays;\n    if (isDataDict(data)) {\n        data = data;\n        arrays = [];\n        for (var _i = 0, names_1 = names; _i < names_1.length; _i++) {\n            var name_1 = names_1[_i];\n            if (data[name_1] == null) {\n                throw new errors_1.ValueError(\"No data provided for \\\"\" + name_1 + \"\\\". Need data for each key in: \" +\n                    (\"\" + names));\n            }\n            arrays.push(data[name_1]);\n        }\n    }\n    else if (isDataArray(data)) {\n        data = data;\n        if (data.length !== names.length) {\n            throw new errors_1.ValueError(\"Error when checking model \" + exceptionPrefix + \": the Array of \" +\n                \"Tensors that you are passing to your model is not the size the \" +\n                (\"model expected. Expected to see \" + names.length + \" Tensor(s), but \") +\n                (\"instead got the following list of Tensor(s): \" + data));\n        }\n        arrays = data;\n    }\n    else {\n        data = data;\n        if (names.length > 1) {\n            throw new errors_1.ValueError(\"The model \" + exceptionPrefix + \" expects \" + names.length + \" Tensor(s), \" +\n                (\"but only received one Tensor. Found: Tensor with shape \" + data.shape));\n        }\n        arrays = [data];\n    }\n    for (var i = 0; i < names.length; ++i) {\n        var array = arrays[i];\n        if (array.shape.length === 1) {\n            arrays[i] = K.expandDims(array, 1);\n        }\n    }\n    if (shapes != null) {\n        for (var i = 0; i < names.length; ++i) {\n            if (shapes[i] == null) {\n                continue;\n            }\n            var array = arrays[i];\n            if (array.shape.length !== shapes[i].length) {\n                throw new errors_1.ValueError(\"Error when checking \" + exceptionPrefix + \": expected \" + names[i] + \" \" +\n                    (\"to have \" + shapes[i].length + \" dimension(s). but got array with \") +\n                    (\"shape \" + array.shape));\n            }\n            for (var j = 0; j < shapes[i].length; ++j) {\n                if (j === 0 && !checkBatchAxis) {\n                    continue;\n                }\n                var dim = array.shape[j];\n                var refDim = shapes[i][j];\n                if (refDim != null && refDim >= 0 && dim !== refDim) {\n                    throw new errors_1.ValueError(\"Error when checking \" + exceptionPrefix + \": expected \" + names[i] + \" \" +\n                        (\"to have shape [\" + shapes[i] + \"], but got array with shape \") +\n                        (\"[\" + array.shape + \"].\"));\n                }\n            }\n        }\n    }\n    return arrays;\n}\nexports.standardizeInputData = standardizeInputData;\nfunction checkArrayLengths(inputs, targets, weights) {\n    var setX = _.unique(inputs.map(function (input) { return input.shape[0]; }));\n    setX.sort();\n    var setY = _.unique(targets.map(function (target) { return target.shape[0]; }));\n    setY.sort();\n    if (setX.length > 1) {\n        throw new errors_1.ValueError(\"All input Tensors (x) should have the same number of samples. \" +\n            \"Got array shapes: \" +\n            (\"\" + JSON.stringify(inputs.map(function (input) { return input.shape; }))));\n    }\n    if (setY.length > 1) {\n        throw new errors_1.ValueError(\"All target Tensors (y) should have the same number of samples. \" +\n            \"Got array shapes: \" +\n            (\"\" + JSON.stringify(targets.map(function (target) { return target.shape; }))));\n    }\n    if (setX.length > 0 && setY.length > 0 && !_.isEqual(setX, setY)) {\n        throw new errors_1.ValueError(\"Input Tensors should have the same number of samples as target \" +\n            (\"Tensors. Found \" + setX[0] + \" input sample(s) and \" + setY[0] + \" target \") +\n            \"sample(s).\");\n    }\n}\nexports.checkArrayLengths = checkArrayLengths;\nfunction checkLossAndTargetCompatibility(targets, lossFns, outputShapes) {\n    var keyLosses = [\n        losses.meanSquaredError, losses.binaryCrossentropy,\n        losses.categoricalCrossentropy\n    ];\n    for (var i = 0; i < targets.length; ++i) {\n        var y = targets[i];\n        var loss = lossFns[i];\n        var shape = outputShapes[i];\n        if (loss == null) {\n            continue;\n        }\n        if (loss === losses.categoricalCrossentropy) {\n            if (y.shape[y.shape.length - 1] === 1) {\n                throw new errors_1.ValueError(\"You are passing a target array of shape \" + y.shape + \" while using \" +\n                    \"a loss 'categorical_crossentropy'. 'categorical_crossentropy'\" +\n                    \"expects targets to be binary matrices (1s and 0s) of shape \" +\n                    \"[samples, classes].\");\n            }\n        }\n        if (_.contains(keyLosses, loss)) {\n            var slicedYShape = y.shape.slice(1);\n            var slicedShape = shape.slice(1);\n            for (var j = 0; j < slicedYShape.length; ++j) {\n                var targetDim = slicedYShape[j];\n                var outDim = slicedShape[j];\n                if (outDim != null && targetDim !== outDim) {\n                    throw new errors_1.ValueError(\"A target Tensor with shape \" + y.shape + \" was passed for an \" +\n                        (\"output of shape \" + shape + \", while using a loss function that \") +\n                        \"expects targets to have the same shape as the output.\");\n                }\n            }\n        }\n    }\n}\nfunction makeBatches(size, batchSize) {\n    var output = [];\n    var batchStart = 0;\n    var batchEnd = null;\n    while (batchStart < size) {\n        batchEnd = batchStart + batchSize;\n        if (batchEnd >= size) {\n            batchEnd = size;\n        }\n        output.push([batchStart, batchEnd]);\n        batchStart = batchEnd;\n    }\n    return output;\n}\nexports.makeBatches = makeBatches;\nfunction sliceArrays(arrays, start, stop) {\n    if (arrays == null) {\n        return [null];\n    }\n    else if (Array.isArray(arrays)) {\n        return arrays.map(function (array) { return K.sliceAlongFirstAxis(array, start, stop - start); });\n    }\n    else {\n        return K.sliceAlongFirstAxis(arrays, start, stop - start);\n    }\n}\nfunction sliceArraysByIndices(arrays, indices) {\n    if (arrays == null) {\n        return null;\n    }\n    else if (Array.isArray(arrays)) {\n        return arrays.map(function (array) { return sliceArraysByIndices(array, indices); });\n    }\n    else {\n        return K.gather(arrays, indices);\n    }\n}\nexports.sliceArraysByIndices = sliceArraysByIndices;\nfunction checkInputData(data, names, shapes, checkBatchAxis, exceptionPrefix) {\n    if (checkBatchAxis === void 0) { checkBatchAxis = true; }\n    if (exceptionPrefix === void 0) { exceptionPrefix = ''; }\n    var arrays;\n    if (Array.isArray(data)) {\n        if (data.length !== names.length) {\n            throw new errors_1.ValueError(\"Error when checking model \" + exceptionPrefix + \": the Array of \" +\n                \"Tensors that you are passing to your model is not the size the \" +\n                (\"the model expected. Expected to see \" + names.length + \" Tensor(s),\") +\n                (\" but instead got \" + data.length + \" Tensors(s).\"));\n        }\n        arrays = data;\n    }\n    else {\n        if (names.length > 1) {\n            throw new errors_1.ValueError(\"The model expects \" + names.length + \" \" + exceptionPrefix + \" Tensors, \" +\n                \"but only received one Tensor. Found: array with shape \" +\n                (JSON.stringify(data.shape) + \".\"));\n        }\n        arrays = [data];\n    }\n    if (shapes != null) {\n        for (var i = 0; i < names.length; ++i) {\n            if (shapes[i] == null) {\n                continue;\n            }\n            var array = arrays[i];\n            if (array.shape.length !== shapes[i].length) {\n                throw new errors_1.ValueError(\"Error when checking \" + exceptionPrefix + \": expected \" + names[i] + \" \" +\n                    (\"to have \" + shapes[i].length + \" dimension(s), but got array with \") +\n                    (\"shape \" + JSON.stringify(array.shape)));\n            }\n            for (var j = 0; j < shapes[i].length; ++j) {\n                if (j === 0 && !checkBatchAxis) {\n                    continue;\n                }\n                var dim = array.shape[j];\n                var refDim = shapes[i][j];\n                if (refDim != null) {\n                    if (refDim !== dim) {\n                        throw new errors_1.ValueError(\"Error when checking \" + exceptionPrefix + \": expected \" +\n                            (names[i] + \" to have shape \" + JSON.stringify(shapes[i]) + \" but \") +\n                            (\"got array with shape \" + JSON.stringify(array.shape) + \".\"));\n                    }\n                }\n            }\n        }\n    }\n}\nfunction collectMetrics(metrics, outputNames) {\n    if (metrics == null || Array.isArray(metrics) && metrics.length === 0) {\n        return outputNames.map(function (name) { return []; });\n    }\n    if (Array.isArray(metrics)) {\n        return outputNames.map(function (name) { return metrics; });\n    }\n    else if (metrics != null) {\n        var nestedMetrics = [];\n        for (var _i = 0, outputNames_1 = outputNames; _i < outputNames_1.length; _i++) {\n            var name_2 = outputNames_1[_i];\n            var outputMetrics = metrics.hasOwnProperty(name_2) ? metrics[name_2] : [];\n            if (!Array.isArray(outputMetrics)) {\n                outputMetrics = [outputMetrics];\n            }\n            nestedMetrics.push(outputMetrics);\n        }\n        return nestedMetrics;\n    }\n    else {\n        throw new TypeError('Type of metrics argument not understood. Expected an Array or ' +\n            'Object, found: ' + metrics);\n    }\n}\nvar ModelLoggingVerbosity;\n(function (ModelLoggingVerbosity) {\n    ModelLoggingVerbosity[ModelLoggingVerbosity[\"SILENT\"] = 0] = \"SILENT\";\n    ModelLoggingVerbosity[ModelLoggingVerbosity[\"VERBOSE\"] = 1] = \"VERBOSE\";\n})(ModelLoggingVerbosity = exports.ModelLoggingVerbosity || (exports.ModelLoggingVerbosity = {}));\nvar Model = (function (_super) {\n    __extends(Model, _super);\n    function Model(config) {\n        return _super.call(this, config) || this;\n    }\n    Model.prototype.compile = function (config) {\n        var _this = this;\n        if (config.loss == null) {\n            config.loss = [];\n        }\n        this.loss = config.loss;\n        var optimizerConstructor = optimizers.get(config.optimizer);\n        if (typeof config.optimizer === 'string') {\n            this.optimizer = new optimizerConstructor({});\n        }\n        else {\n            this.optimizer = new optimizerConstructor(config.optimizer);\n        }\n        var lossFunctions = [];\n        if (!Array.isArray(config.loss) && typeof config.loss !== 'string') {\n            config.loss = config.loss;\n            for (var name_3 in config.loss) {\n                if (!_.contains(this.outputNames, name_3)) {\n                    throw new errors_1.ValueError(\"Unknown entry in loss dictionary: \\\"\" + name_3 + \"\\\". Only expect the \" +\n                        (\"following keys: \" + this.outputNames));\n                }\n            }\n            for (var name_4 in this.outputNames) {\n                if (config.loss[name_4] == null) {\n                    console.warn(\"Output \\\"\" + name_4 + \"\\\" is missing from loss dictionary. We assume \" +\n                        \"this was done on purpose, and we will not be expecting data \" +\n                        (\"to be passed to \" + name_4 + \" during training\"));\n                }\n                lossFunctions.push(losses.get(config.loss[name_4]));\n            }\n        }\n        else if (Array.isArray(config.loss)) {\n            if (config.loss.length !== this.outputs.length) {\n                throw new errors_1.ValueError(\"When passing an Array as loss, it should have one entry per \" +\n                    (\"model output. The model has \" + this.outputs.length + \" output(s), \") +\n                    (\"but you passed loss=\" + config.loss + \".\"));\n            }\n            lossFunctions = config.loss.map(function (l) { return losses.get(l); });\n        }\n        else {\n            var lossFunction_1 = losses.get(config.loss);\n            this.outputs.map(function (layer) {\n                lossFunctions.push(lossFunction_1);\n            });\n        }\n        this.lossFunctions = lossFunctions;\n        this.feedOutputNames = [];\n        this.feedOutputShapes = [];\n        this.feedLossFns = [];\n        for (var i = 0; i < this.outputs.length; ++i) {\n            var shape = this.internalOutputShapes[i];\n            var name_5 = this.outputNames[i];\n            this.feedOutputNames.push(name_5);\n            this.feedOutputShapes.push(shape);\n            this.feedLossFns.push(this.lossFunctions[i]);\n        }\n        var skipTargetIndices = [];\n        this.metrics = config.metrics;\n        this.metricsNames = ['loss'];\n        this.metricsTensors = [];\n        K.nameScope('loss', function () {\n            for (var i = 0; i < _this.outputs.length; ++i) {\n                if (skipTargetIndices.indexOf(i) !== -1) {\n                    continue;\n                }\n                var weightedLoss = _this.lossFunctions[i];\n                if (_this.outputs.length > 1) {\n                    _this.metricsTensors.push([weightedLoss, i]);\n                    _this.metricsNames.push(_this.outputNames[i] + '_loss');\n                }\n            }\n        });\n        var nestedMetrics = collectMetrics(config.metrics, this.outputNames);\n        var appendMetric = function (outputIndex, metricName, metricTensor) {\n            if (_this.outputNames.length > 1) {\n                metricName = _this.outputNames[outputIndex] + '_' + metricName;\n            }\n            _this.metricsNames.push(metricName);\n            _this.metricsTensors.push([metricTensor, outputIndex]);\n        };\n        K.nameScope('metric', function () {\n            var _loop_1 = function (i) {\n                if (skipTargetIndices.indexOf(i) !== -1) {\n                    return \"continue\";\n                }\n                var outputMetrics = nestedMetrics[i];\n                var handleMetrics = function (metrics) {\n                    var metricNamePrefix = '';\n                    var metricName;\n                    var accFn;\n                    var weightedMetricFn;\n                    var _loop_2 = function (metric) {\n                        if (['accuracy', 'acc', 'crossentropy', 'ce'].indexOf(metric) !==\n                            -1) {\n                            var outputShape = _this.internalOutputShapes[i];\n                            if (outputShape[outputShape.length - 1] === 1 ||\n                                _this.lossFunctions[i] === losses.binaryCrossentropy) {\n                                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                                    accFn = Metrics.binaryAccuracy;\n                                }\n                                else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                                    accFn = Metrics.binaryCrossentropy;\n                                }\n                            }\n                            else if (_this.lossFunctions[i] ===\n                                losses.sparseCategoricalCrossentropy) {\n                                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                                    accFn = Metrics.sparseCategoricalAccuracy;\n                                }\n                                else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                                    accFn = Metrics.sparseCategoricalCrossentropy;\n                                }\n                            }\n                            else {\n                                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                                    accFn = Metrics.categoricalAccuracy;\n                                }\n                                else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                                    accFn = Metrics.categoricalCrossentropy;\n                                }\n                            }\n                            var suffix = void 0;\n                            if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                                suffix = 'acc';\n                            }\n                            else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                                suffix = 'ce';\n                            }\n                            weightedMetricFn = accFn;\n                            metricName = metricNamePrefix + suffix;\n                        }\n                        else {\n                            var metricFn = Metrics.get(metric);\n                            weightedMetricFn = metricFn;\n                            metricName = metricNamePrefix + metric;\n                        }\n                        var metricResult;\n                        K.nameScope(metricName, function () {\n                            metricResult = weightedMetricFn;\n                        });\n                        appendMetric(i, metricName, metricResult);\n                    };\n                    for (var _i = 0, metrics_1 = metrics; _i < metrics_1.length; _i++) {\n                        var metric = metrics_1[_i];\n                        _loop_2(metric);\n                    }\n                };\n                handleMetrics(outputMetrics);\n            };\n            for (var i = 0; i < _this.outputs.length; ++i) {\n                _loop_1(i);\n            }\n        });\n        this.collectedTrainableWeights = this.trainableWeights;\n    };\n    Model.prototype.checkTrainableWeightsConsistency = function () {\n        if (this.collectedTrainableWeights == null) {\n            return;\n        }\n        if (this.trainableWeights.length !==\n            this.collectedTrainableWeights.length) {\n            console.warn('Discrepancy between trainableweights and collected trainable ' +\n                'weights. Did you set `model.trainable` without calling ' +\n                '`model.compile()` afterwards?');\n        }\n    };\n    Model.prototype.evaluate = function (x, y, config) {\n        if (config === void 0) { config = {}; }\n        var batchSize = config.batchSize == null ? 32 : config.batchSize;\n        var standardizedOuts = this.standardizeUserData(x, y, true, batchSize);\n        var ins = standardizedOuts[0].concat(standardizedOuts[1]);\n        this.makeTestFunction();\n        var f = this.testFunction;\n        var testOuts = this.testLoop(f, ins, batchSize, config.verbose, config.steps);\n        return generic_utils_1.singletonOrArray(testOuts);\n    };\n    Model.prototype.checkNumSamples = function (ins, batchSize, steps, stepsName) {\n        if (stepsName === void 0) { stepsName = 'steps'; }\n        var numSamples;\n        if (steps != null) {\n            numSamples = null;\n            if (batchSize != null) {\n                throw new errors_1.ValueError(\"If \" + stepsName + \" is set, batchSize must be null or undefined.\" +\n                    (\"Got batchSize = \" + batchSize));\n            }\n        }\n        else if (ins != null) {\n            if (Array.isArray(ins)) {\n                numSamples = ins[0].shape[0];\n            }\n            else {\n                numSamples = ins.shape[0];\n            }\n        }\n        else {\n            throw new errors_1.ValueError(\"Either the input data should have a defined shape, or \" +\n                (stepsName + \" shoud be specified.\"));\n        }\n        return numSamples;\n    };\n    Model.prototype.predictLoop = function (ins, batchSize, verbose) {\n        var _this = this;\n        if (batchSize === void 0) { batchSize = 32; }\n        if (verbose === void 0) { verbose = false; }\n        var numSamples = this.checkNumSamples(ins);\n        if (verbose) {\n            throw new errors_1.NotImplementedError('Verbose predictLoop() is not implemented yet.');\n        }\n        var batches = makeBatches(numSamples, batchSize);\n        var outs = [];\n        var _loop_3 = function (batchIndex) {\n            var batchOuts = tfc.tidy(function () {\n                var batchStart = batches[batchIndex][0];\n                var batchEnd = batches[batchIndex][1];\n                var insBatch = sliceArrays(ins, batchStart, batchEnd);\n                var feeds = [];\n                if (Array.isArray(insBatch)) {\n                    for (var i = 0; i < insBatch.length; ++i) {\n                        feeds.push({ key: _this.inputs[i], value: insBatch[i] });\n                    }\n                }\n                else {\n                    feeds.push({ key: _this.inputs[0], value: insBatch });\n                }\n                var feedDict = new executor_1.FeedDict(feeds);\n                return executor_1.execute(_this.outputs, feedDict);\n            });\n            if (batchIndex === 0) {\n                for (var _i = 0, batchOuts_1 = batchOuts; _i < batchOuts_1.length; _i++) {\n                    var batchOut = batchOuts_1[_i];\n                    outs.push(batchOut);\n                }\n            }\n            else {\n                for (var i = 0; i < batchOuts.length; ++i) {\n                    outs[i] = K.concatAlongFirstAxis(outs[i], batchOuts[i]);\n                }\n            }\n        };\n        for (var batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n            _loop_3(batchIndex);\n        }\n        return generic_utils_1.singletonOrArray(outs);\n    };\n    Model.prototype.predict = function (x, config) {\n        if (config === void 0) { config = {}; }\n        checkInputData(x, this.inputNames, this.feedInputShapes, false);\n        var batchSize = config.batchSize == null ? 32 : config.batchSize;\n        return this.predictLoop(x, batchSize);\n    };\n    Model.prototype.predictOnBatch = function (x) {\n        checkInputData(x, this.inputNames, this.feedInputShapes, true);\n        return this.predictLoop(x, x.shape[0]);\n    };\n    Model.prototype.standardizeUserData = function (x, y, checkBatchAxis, batchSize) {\n        if (checkBatchAxis === void 0) { checkBatchAxis = true; }\n        if (this.optimizer == null) {\n            throw new errors_1.RuntimeError('You must compile a model before training/testing. Use ' +\n                'Model.compile(modelCompileConfig).');\n        }\n        var outputShapes = [];\n        for (var i = 0; i < this.feedOutputShapes.length; ++i) {\n            var outputShape = this.feedOutputShapes[i];\n            var lossFn = this.feedLossFns[i];\n            if (lossFn === losses.sparseCategoricalCrossentropy) {\n                outputShapes.push(outputShape.slice(0, outputShape.length - 1).concat([1]));\n            }\n            else {\n                outputShapes.push(outputShape);\n            }\n        }\n        x = standardizeInputData(x, this.feedInputNames, this.feedInputShapes, false, 'input');\n        y = standardizeInputData(y, this.feedOutputNames, outputShapes, false, 'target');\n        checkArrayLengths(x, y, null);\n        checkLossAndTargetCompatibility(y, this.feedLossFns, this.feedOutputShapes);\n        if (this.stateful && batchSize != null && batchSize > 0) {\n            if (x[0].shape[0] % batchSize !== 0) {\n                throw new errors_1.ValueError(\"In a stateful network, you should only pass inputs with a \" +\n                    \"number of samples that is divisible by the batch size \" +\n                    (batchSize + \". Found: \" + x[0].shape[0] + \" sample(s).\"));\n            }\n        }\n        return [x, y, null];\n    };\n    Model.prototype.fitLoop = function (f, ins, outLabels, batchSize, epochs, verbose, callbacks, valF, valIns, shuffle, callbackMetrics, initialEpoch, stepsPerEpoch, validationSteps) {\n        if (initialEpoch === void 0) { initialEpoch = 0; }\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var doValidation, numTrainSamples, indexArray, callbackList, _loop_4, epoch;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (batchSize == null) {\n                            batchSize = 32;\n                        }\n                        if (epochs == null) {\n                            epochs = 100;\n                        }\n                        if (shuffle == null) {\n                            shuffle = true;\n                        }\n                        if (initialEpoch == null) {\n                            initialEpoch = 0;\n                        }\n                        doValidation = false;\n                        if (valF != null && valIns != null) {\n                            doValidation = true;\n                        }\n                        if (validationSteps != null) {\n                            doValidation = true;\n                            if (stepsPerEpoch == null) {\n                                throw new errors_1.ValueError('Can only use `validationSteps` when doing step-wise training, ' +\n                                    'i.e., `stepsPerEpoch` must be set.');\n                            }\n                        }\n                        numTrainSamples = this.checkNumSamples(ins, batchSize, stepsPerEpoch, 'steps_per_epoch');\n                        if (numTrainSamples != null) {\n                            indexArray = _.range(numTrainSamples);\n                        }\n                        this.history = new callbacks_1.History();\n                        if (callbacks == null) {\n                            callbacks = [new callbacks_1.BaseLogger()];\n                        }\n                        else {\n                            callbacks = [new callbacks_1.BaseLogger()].concat(callbacks);\n                        }\n                        callbacks = callbacks.concat([this.history]);\n                        if (verbose > 0) {\n                            throw new errors_1.NotImplementedError('Verbose mode is not implemented yet.');\n                        }\n                        callbackList = new callbacks_1.CallbackList(callbacks);\n                        callbackList.setModel(this);\n                        callbackList.setParams({\n                            epochs: epochs,\n                            steps: stepsPerEpoch,\n                            verbose: verbose,\n                            doValidation: doValidation,\n                            metrics: callbackMetrics,\n                        });\n                        return [4, callbackList.onTrainBegin()];\n                    case 1:\n                        _a.sent();\n                        _loop_4 = function (epoch) {\n                            var epochLogs, epochIndexArray, epochIndexArray1D_1, batches_1, _loop_5, batchIndex;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0: return [4, callbackList.onEpochBegin(epoch)];\n                                    case 1:\n                                        _a.sent();\n                                        epochLogs = {};\n                                        epochIndexArray = indexArray;\n                                        if (!(stepsPerEpoch != null)) return [3, 2];\n                                        throw new errors_1.NotImplementedError('stepsPerEpoch mode is not implemented yet.');\n                                    case 2:\n                                        if (shuffle === 'batch') {\n                                            throw new errors_1.NotImplementedError('batch shuffling is not implemneted yet');\n                                        }\n                                        else if (shuffle) {\n                                            epochIndexArray = _.shuffle(indexArray);\n                                        }\n                                        epochIndexArray1D_1 = tfjs_core_1.tensor1d(epochIndexArray);\n                                        batches_1 = makeBatches(numTrainSamples, batchSize);\n                                        _loop_5 = function (batchIndex) {\n                                            var batchLogs;\n                                            return __generator(this, function (_a) {\n                                                switch (_a.label) {\n                                                    case 0:\n                                                        batchLogs = {};\n                                                        return [4, callbackList.onBatchBegin(batchIndex, batchLogs)];\n                                                    case 1:\n                                                        _a.sent();\n                                                        tfc.tidy(function () {\n                                                            var batchStart = batches_1[batchIndex][0];\n                                                            var batchEnd = batches_1[batchIndex][1];\n                                                            var batchIds = K.sliceAlongFirstAxis(epochIndexArray1D_1, batchStart, batchEnd - batchStart);\n                                                            batchLogs['batch'] = batchIndex;\n                                                            batchLogs['size'] = batchEnd - batchStart;\n                                                            var insBatch = sliceArraysByIndices(ins, batchIds);\n                                                            var outs = f(insBatch);\n                                                            for (var i = 0; i < outLabels.length; ++i) {\n                                                                var label = outLabels[i];\n                                                                var out = outs[i];\n                                                                batchLogs[label] = out;\n                                                                K.keep(out);\n                                                            }\n                                                            if (batchIndex === batches_1.length - 1) {\n                                                                if (doValidation) {\n                                                                    var valOuts = _this.testLoop(valF, valIns, batchSize);\n                                                                    for (var i = 0; i < outLabels.length; ++i) {\n                                                                        var label = outLabels[i];\n                                                                        var out = valOuts[i];\n                                                                        K.keep(out);\n                                                                        epochLogs['val_' + label] = out;\n                                                                    }\n                                                                }\n                                                            }\n                                                        });\n                                                        return [4, callbackList.onBatchEnd(batchIndex, batchLogs)];\n                                                    case 2:\n                                                        _a.sent();\n                                                        callbacks_1.disposeTensorsInLogs(batchLogs);\n                                                        return [2];\n                                                }\n                                            });\n                                        };\n                                        batchIndex = 0;\n                                        _a.label = 3;\n                                    case 3:\n                                        if (!(batchIndex < batches_1.length)) return [3, 6];\n                                        return [5, _loop_5(batchIndex)];\n                                    case 4:\n                                        _a.sent();\n                                        _a.label = 5;\n                                    case 5:\n                                        ++batchIndex;\n                                        return [3, 3];\n                                    case 6:\n                                        epochIndexArray1D_1.dispose();\n                                        _a.label = 7;\n                                    case 7: return [4, callbackList.onEpochEnd(epoch, epochLogs)];\n                                    case 8:\n                                        _a.sent();\n                                        return [2];\n                                }\n                            });\n                        };\n                        epoch = initialEpoch;\n                        _a.label = 2;\n                    case 2:\n                        if (!(epoch < epochs)) return [3, 5];\n                        return [5, _loop_4(epoch)];\n                    case 3:\n                        _a.sent();\n                        _a.label = 4;\n                    case 4:\n                        ++epoch;\n                        return [3, 2];\n                    case 5: return [4, callbackList.onTrainEnd()];\n                    case 6:\n                        _a.sent();\n                        return [4, this.history.syncData()];\n                    case 7:\n                        _a.sent();\n                        return [2, this.history];\n                }\n            });\n        });\n    };\n    Model.prototype.testLoop = function (f, ins, batchSize, verbose, steps) {\n        if (verbose === void 0) { verbose = 0; }\n        var numSamples = this.checkNumSamples(ins, batchSize, steps, 'steps');\n        var outs = [];\n        if (verbose === 1) {\n            throw new errors_1.NotImplementedError('Verbose mode is not implemented yet.');\n        }\n        if (steps != null) {\n            throw new errors_1.NotImplementedError('steps mode in testLoop() is not implemented yet');\n        }\n        else {\n            var batches = makeBatches(numSamples, batchSize);\n            var indexArray = tfjs_core_1.tensor1d(_.range(numSamples));\n            for (var batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n                var batchStart = batches[batchIndex][0];\n                var batchEnd = batches[batchIndex][1];\n                var batchIds = K.sliceAlongFirstAxis(indexArray, batchStart, batchEnd - batchStart);\n                var insBatch = sliceArraysByIndices(ins, batchIds);\n                var batchOuts = f(insBatch);\n                if (batchIndex === 0) {\n                    for (var i = 0; i < batchOuts.length; ++i) {\n                        outs.push(K.getScalar(0));\n                    }\n                }\n                for (var i = 0; i < batchOuts.length; ++i) {\n                    var batchOut = batchOuts[i];\n                    outs[i] =\n                        K.add(outs[i], K.scalarTimesArray(K.getScalar(batchEnd - batchStart), batchOut));\n                }\n            }\n            for (var i = 0; i < outs.length; ++i) {\n                outs[i] = K.divide(outs[i], K.getScalar(numSamples));\n            }\n        }\n        return outs;\n    };\n    Model.prototype.getDedupedMetricsNames = function () {\n        var outLabels = this.metricsNames;\n        var dedupedOutLabels = [];\n        for (var i = 0; i < outLabels.length; ++i) {\n            var label = outLabels[i];\n            var newLabel = label;\n            if (generic_utils_1.count(outLabels, label) > 1) {\n                var dupIndex = generic_utils_1.count(outLabels.slice(0, i), label);\n                newLabel += \"_\" + dupIndex;\n            }\n            dedupedOutLabels.push(newLabel);\n        }\n        return dedupedOutLabels;\n    };\n    Model.prototype.makeTestFunction = function () {\n        var _this = this;\n        this.testFunction = function (data) {\n            return tfc.tidy(function () {\n                var valOutputs = [];\n                var totalLoss;\n                var inputs = data.slice(0, _this.inputs.length);\n                var targets = data.slice(_this.inputs.length, _this.inputs.length + _this.outputs.length);\n                var feeds = [];\n                for (var i = 0; i < _this.inputs.length; ++i) {\n                    feeds.push({ key: _this.inputs[i], value: inputs[i] });\n                }\n                var feedDict = new executor_1.FeedDict(feeds);\n                var outputs = executor_1.execute(_this.outputs, feedDict);\n                for (var i = 0; i < _this.lossFunctions.length; ++i) {\n                    var lossFunction = _this.lossFunctions[i];\n                    var loss = K.mean(lossFunction(targets[i], outputs[i]));\n                    if (i === 0) {\n                        totalLoss = loss;\n                    }\n                    else {\n                        totalLoss = K.add(totalLoss, loss);\n                    }\n                    valOutputs.push(totalLoss);\n                }\n                for (var i = 0; i < _this.metricsTensors.length; ++i) {\n                    var metric = _this.metricsTensors[i][0];\n                    var outputIndex = _this.metricsTensors[i][1];\n                    var meanMetric = K.mean(metric(targets[outputIndex], outputs[outputIndex]));\n                    valOutputs.push(meanMetric);\n                }\n                return valOutputs;\n            });\n        };\n    };\n    Model.prototype.fit = function (x, y, config) {\n        if (config === void 0) { config = {}; }\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var batchSize, standardizedOuts, inputs, targets, doValidation, valX, valY, valIns, valStandardized, splitAt, originalBatchSize, ins, trainFunction, outLabels, valFunction, callbackMetrics, callbacks;\n            return __generator(this, function (_a) {\n                batchSize = config.batchSize == null ? 32 : config.batchSize;\n                standardizedOuts = this.standardizeUserData(x, y, false, batchSize);\n                inputs = standardizedOuts[0];\n                targets = standardizedOuts[1];\n                doValidation = false;\n                if (config.validationData != null && config.validationData.length > 0) {\n                    doValidation = true;\n                    if (config.validationData.length === 2) {\n                        valX = config.validationData[0];\n                        valY = config.validationData[1];\n                    }\n                    else if (config.validationData.length === 3) {\n                        throw new errors_1.NotImplementedError('validationData including sample weights is not supported yet.');\n                    }\n                    else {\n                        throw new errors_1.ValueError(\"When passing validation data, it must contain 2 (valX, valY) \" +\n                            \"or 3 (valX, valY, valSampleWeight) items, however it contains \" +\n                            (config.validationData.length + \" items\"));\n                    }\n                    valStandardized = this.standardizeUserData(valX, valY, true, batchSize);\n                    valX = valStandardized[0];\n                    valY = valStandardized[1];\n                    valIns = valX.concat(valY);\n                }\n                else if (config.validationSplit != null && config.validationSplit > 0 &&\n                    config.validationSplit < 1) {\n                    doValidation = true;\n                    splitAt = Math.floor(inputs[0].shape[0] * (1 - config.validationSplit));\n                    originalBatchSize = inputs[0].shape[0];\n                    valX = sliceArrays(inputs, splitAt, originalBatchSize);\n                    inputs = sliceArrays(inputs, 0, splitAt);\n                    valY = sliceArrays(targets, splitAt, originalBatchSize);\n                    targets = sliceArrays(targets, 0, splitAt);\n                    valIns = valX.concat(valY);\n                }\n                else if (config.validationSteps != null) {\n                    doValidation = true;\n                }\n                ins = inputs.concat(targets);\n                this.checkTrainableWeightsConsistency();\n                trainFunction = function (data) {\n                    var losses = [];\n                    var lossValues = [];\n                    var inputs = data.slice(0, _this.inputs.length);\n                    var targets = data.slice(_this.inputs.length, _this.inputs.length + _this.outputs.length);\n                    var metricsValues = [];\n                    var totalLossFunction = function () {\n                        var feeds = [];\n                        for (var i = 0; i < _this.inputs.length; ++i) {\n                            feeds.push({ key: _this.inputs[i], value: inputs[i] });\n                        }\n                        var feedDict = new executor_1.FeedDict(feeds);\n                        var outputs = executor_1.execute(_this.outputs, feedDict, { 'training': true });\n                        var totalLoss;\n                        for (var i = 0; i < _this.lossFunctions.length; ++i) {\n                            var lossFunction = _this.lossFunctions[i];\n                            var loss = lossFunction(targets[i], outputs[i]);\n                            losses.push(loss);\n                            var meanLoss = K.mean(loss);\n                            lossValues.push(meanLoss);\n                            if (i === 0) {\n                                totalLoss = loss;\n                            }\n                            else {\n                                totalLoss = K.add(totalLoss, loss);\n                            }\n                        }\n                        for (var i = 0; i < _this.metricsTensors.length; ++i) {\n                            var metric = _this.metricsTensors[i][0];\n                            var outputIndex = _this.metricsTensors[i][1];\n                            var meanMetric = K.mean(metric(targets[outputIndex], outputs[outputIndex]));\n                            K.keep(meanMetric);\n                            metricsValues.push(meanMetric);\n                        }\n                        totalLoss = K.mean(totalLoss);\n                        _this.calculateLosses().forEach(function (regularizerLoss) {\n                            totalLoss = K.add(totalLoss, regularizerLoss);\n                        });\n                        return totalLoss;\n                    };\n                    var totalLossValue = _this.optimizer.updateVariables(totalLossFunction, _this.collectedTrainableWeights);\n                    return [totalLossValue].concat(metricsValues);\n                };\n                outLabels = this.getDedupedMetricsNames();\n                if (doValidation) {\n                    this.makeTestFunction();\n                    valFunction = this.testFunction;\n                    callbackMetrics =\n                        outLabels.slice().concat(outLabels.map(function (n) { return 'val_' + n; }));\n                }\n                else {\n                    valFunction = null;\n                    valIns = [];\n                    callbackMetrics = outLabels.slice();\n                }\n                callbacks = callbacks_1.standardizeCallbacks(config.callbacks);\n                return [2, this.fitLoop(trainFunction, ins, outLabels, batchSize, config.epochs, config.verbose, callbacks, valFunction, valIns, config.shuffle, callbackMetrics, null, null, null)];\n            });\n        });\n    };\n    __decorate([\n        tfjs_core_1.doc({ heading: 'Models', subheading: 'Classes', configParamIndices: [0] })\n    ], Model.prototype, \"compile\", null);\n    __decorate([\n        tfjs_core_1.doc({ heading: 'Models', subheading: 'Classes', configParamIndices: [2] })\n    ], Model.prototype, \"evaluate\", null);\n    __decorate([\n        tfjs_core_1.doc({ heading: 'Models', subheading: 'Classes', configParamIndices: [1] })\n    ], Model.prototype, \"predict\", null);\n    __decorate([\n        tfjs_core_1.doc({ heading: 'Models', subheading: 'Classes' })\n    ], Model.prototype, \"predictOnBatch\", null);\n    __decorate([\n        tfjs_core_1.doc({ heading: 'Models', subheading: 'Classes', configParamIndices: [2] })\n    ], Model.prototype, \"fit\", null);\n    Model = __decorate([\n        tfjs_core_1.doc({ heading: 'Models', subheading: 'Classes' })\n    ], Model);\n    return Model;\n}(topology_1.Container));\nexports.Model = Model;\ngeneric_utils_1.ClassNameMap.register('Model', Model);\n","map":{"mappings":[{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":607,"column":0},"generated":{"line":607,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":608,"column":0},"generated":{"line":608,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":609,"column":0},"generated":{"line":609,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":610,"column":0},"generated":{"line":610,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":611,"column":0},"generated":{"line":611,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":612,"column":0},"generated":{"line":612,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":613,"column":0},"generated":{"line":613,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":614,"column":0},"generated":{"line":614,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":615,"column":0},"generated":{"line":615,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":616,"column":0},"generated":{"line":616,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":617,"column":0},"generated":{"line":617,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":618,"column":0},"generated":{"line":618,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":619,"column":0},"generated":{"line":619,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":620,"column":0},"generated":{"line":620,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":621,"column":0},"generated":{"line":621,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":622,"column":0},"generated":{"line":622,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":623,"column":0},"generated":{"line":623,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":624,"column":0},"generated":{"line":624,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":625,"column":0},"generated":{"line":625,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":626,"column":0},"generated":{"line":626,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":627,"column":0},"generated":{"line":627,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":628,"column":0},"generated":{"line":628,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":629,"column":0},"generated":{"line":629,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":630,"column":0},"generated":{"line":630,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":631,"column":0},"generated":{"line":631,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":632,"column":0},"generated":{"line":632,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":633,"column":0},"generated":{"line":633,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":634,"column":0},"generated":{"line":634,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":635,"column":0},"generated":{"line":635,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":636,"column":0},"generated":{"line":636,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":637,"column":0},"generated":{"line":637,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":638,"column":0},"generated":{"line":638,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":639,"column":0},"generated":{"line":639,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":640,"column":0},"generated":{"line":640,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":641,"column":0},"generated":{"line":641,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":642,"column":0},"generated":{"line":642,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":643,"column":0},"generated":{"line":643,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":644,"column":0},"generated":{"line":644,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":645,"column":0},"generated":{"line":645,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":646,"column":0},"generated":{"line":646,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":647,"column":0},"generated":{"line":647,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":648,"column":0},"generated":{"line":648,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":649,"column":0},"generated":{"line":649,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":650,"column":0},"generated":{"line":650,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":651,"column":0},"generated":{"line":651,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":652,"column":0},"generated":{"line":652,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":653,"column":0},"generated":{"line":653,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":654,"column":0},"generated":{"line":654,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":655,"column":0},"generated":{"line":655,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":656,"column":0},"generated":{"line":656,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":657,"column":0},"generated":{"line":657,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":658,"column":0},"generated":{"line":658,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":659,"column":0},"generated":{"line":659,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":660,"column":0},"generated":{"line":660,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":661,"column":0},"generated":{"line":661,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":662,"column":0},"generated":{"line":662,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":663,"column":0},"generated":{"line":663,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":664,"column":0},"generated":{"line":664,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":665,"column":0},"generated":{"line":665,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":666,"column":0},"generated":{"line":666,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":667,"column":0},"generated":{"line":667,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":668,"column":0},"generated":{"line":668,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":669,"column":0},"generated":{"line":669,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":670,"column":0},"generated":{"line":670,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":671,"column":0},"generated":{"line":671,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":672,"column":0},"generated":{"line":672,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":673,"column":0},"generated":{"line":673,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":674,"column":0},"generated":{"line":674,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":675,"column":0},"generated":{"line":675,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":676,"column":0},"generated":{"line":676,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":677,"column":0},"generated":{"line":677,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":678,"column":0},"generated":{"line":678,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":679,"column":0},"generated":{"line":679,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":680,"column":0},"generated":{"line":680,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":681,"column":0},"generated":{"line":681,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":682,"column":0},"generated":{"line":682,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":683,"column":0},"generated":{"line":683,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":684,"column":0},"generated":{"line":684,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":685,"column":0},"generated":{"line":685,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":686,"column":0},"generated":{"line":686,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":687,"column":0},"generated":{"line":687,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":688,"column":0},"generated":{"line":688,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":689,"column":0},"generated":{"line":689,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":690,"column":0},"generated":{"line":690,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":691,"column":0},"generated":{"line":691,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":692,"column":0},"generated":{"line":692,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":693,"column":0},"generated":{"line":693,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":694,"column":0},"generated":{"line":694,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":695,"column":0},"generated":{"line":695,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":696,"column":0},"generated":{"line":696,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":697,"column":0},"generated":{"line":697,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":698,"column":0},"generated":{"line":698,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":699,"column":0},"generated":{"line":699,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":700,"column":0},"generated":{"line":700,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":701,"column":0},"generated":{"line":701,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":702,"column":0},"generated":{"line":702,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":703,"column":0},"generated":{"line":703,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":704,"column":0},"generated":{"line":704,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":705,"column":0},"generated":{"line":705,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":706,"column":0},"generated":{"line":706,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":707,"column":0},"generated":{"line":707,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":708,"column":0},"generated":{"line":708,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":709,"column":0},"generated":{"line":709,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":710,"column":0},"generated":{"line":710,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":711,"column":0},"generated":{"line":711,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":712,"column":0},"generated":{"line":712,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":713,"column":0},"generated":{"line":713,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":714,"column":0},"generated":{"line":714,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":715,"column":0},"generated":{"line":715,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":716,"column":0},"generated":{"line":716,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":717,"column":0},"generated":{"line":717,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":718,"column":0},"generated":{"line":718,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":719,"column":0},"generated":{"line":719,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":720,"column":0},"generated":{"line":720,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":721,"column":0},"generated":{"line":721,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":722,"column":0},"generated":{"line":722,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":723,"column":0},"generated":{"line":723,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":724,"column":0},"generated":{"line":724,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":725,"column":0},"generated":{"line":725,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":726,"column":0},"generated":{"line":726,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":727,"column":0},"generated":{"line":727,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":728,"column":0},"generated":{"line":728,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":729,"column":0},"generated":{"line":729,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":730,"column":0},"generated":{"line":730,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":731,"column":0},"generated":{"line":731,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":732,"column":0},"generated":{"line":732,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":733,"column":0},"generated":{"line":733,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":734,"column":0},"generated":{"line":734,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":735,"column":0},"generated":{"line":735,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":736,"column":0},"generated":{"line":736,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":737,"column":0},"generated":{"line":737,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":738,"column":0},"generated":{"line":738,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":739,"column":0},"generated":{"line":739,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":740,"column":0},"generated":{"line":740,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":741,"column":0},"generated":{"line":741,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":742,"column":0},"generated":{"line":742,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":743,"column":0},"generated":{"line":743,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":744,"column":0},"generated":{"line":744,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":745,"column":0},"generated":{"line":745,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":746,"column":0},"generated":{"line":746,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":747,"column":0},"generated":{"line":747,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":748,"column":0},"generated":{"line":748,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":749,"column":0},"generated":{"line":749,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":750,"column":0},"generated":{"line":750,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":751,"column":0},"generated":{"line":751,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":752,"column":0},"generated":{"line":752,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":753,"column":0},"generated":{"line":753,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":754,"column":0},"generated":{"line":754,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":755,"column":0},"generated":{"line":755,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":756,"column":0},"generated":{"line":756,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":757,"column":0},"generated":{"line":757,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":758,"column":0},"generated":{"line":758,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":759,"column":0},"generated":{"line":759,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":760,"column":0},"generated":{"line":760,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":761,"column":0},"generated":{"line":761,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":762,"column":0},"generated":{"line":762,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":763,"column":0},"generated":{"line":763,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":764,"column":0},"generated":{"line":764,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":765,"column":0},"generated":{"line":765,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":766,"column":0},"generated":{"line":766,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":767,"column":0},"generated":{"line":767,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":768,"column":0},"generated":{"line":768,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":769,"column":0},"generated":{"line":769,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":770,"column":0},"generated":{"line":770,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":771,"column":0},"generated":{"line":771,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":772,"column":0},"generated":{"line":772,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":773,"column":0},"generated":{"line":773,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":774,"column":0},"generated":{"line":774,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":775,"column":0},"generated":{"line":775,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":776,"column":0},"generated":{"line":776,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":777,"column":0},"generated":{"line":777,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":778,"column":0},"generated":{"line":778,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":779,"column":0},"generated":{"line":779,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":780,"column":0},"generated":{"line":780,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":781,"column":0},"generated":{"line":781,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":782,"column":0},"generated":{"line":782,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":783,"column":0},"generated":{"line":783,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":784,"column":0},"generated":{"line":784,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":785,"column":0},"generated":{"line":785,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":786,"column":0},"generated":{"line":786,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":787,"column":0},"generated":{"line":787,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":788,"column":0},"generated":{"line":788,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":789,"column":0},"generated":{"line":789,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":790,"column":0},"generated":{"line":790,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":791,"column":0},"generated":{"line":791,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":792,"column":0},"generated":{"line":792,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":793,"column":0},"generated":{"line":793,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":794,"column":0},"generated":{"line":794,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":795,"column":0},"generated":{"line":795,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":796,"column":0},"generated":{"line":796,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":797,"column":0},"generated":{"line":797,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":798,"column":0},"generated":{"line":798,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":799,"column":0},"generated":{"line":799,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":800,"column":0},"generated":{"line":800,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":801,"column":0},"generated":{"line":801,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":802,"column":0},"generated":{"line":802,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":803,"column":0},"generated":{"line":803,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":804,"column":0},"generated":{"line":804,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":805,"column":0},"generated":{"line":805,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":806,"column":0},"generated":{"line":806,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":807,"column":0},"generated":{"line":807,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":808,"column":0},"generated":{"line":808,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":809,"column":0},"generated":{"line":809,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":810,"column":0},"generated":{"line":810,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":811,"column":0},"generated":{"line":811,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":812,"column":0},"generated":{"line":812,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":813,"column":0},"generated":{"line":813,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":814,"column":0},"generated":{"line":814,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":815,"column":0},"generated":{"line":815,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":816,"column":0},"generated":{"line":816,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":817,"column":0},"generated":{"line":817,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":818,"column":0},"generated":{"line":818,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":819,"column":0},"generated":{"line":819,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":820,"column":0},"generated":{"line":820,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":821,"column":0},"generated":{"line":821,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":822,"column":0},"generated":{"line":822,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":823,"column":0},"generated":{"line":823,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":824,"column":0},"generated":{"line":824,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":825,"column":0},"generated":{"line":825,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":826,"column":0},"generated":{"line":826,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":827,"column":0},"generated":{"line":827,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":828,"column":0},"generated":{"line":828,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":829,"column":0},"generated":{"line":829,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":830,"column":0},"generated":{"line":830,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":831,"column":0},"generated":{"line":831,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":832,"column":0},"generated":{"line":832,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":833,"column":0},"generated":{"line":833,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":834,"column":0},"generated":{"line":834,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":835,"column":0},"generated":{"line":835,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":836,"column":0},"generated":{"line":836,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":837,"column":0},"generated":{"line":837,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":838,"column":0},"generated":{"line":838,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":839,"column":0},"generated":{"line":839,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":840,"column":0},"generated":{"line":840,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":841,"column":0},"generated":{"line":841,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":842,"column":0},"generated":{"line":842,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":843,"column":0},"generated":{"line":843,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":844,"column":0},"generated":{"line":844,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":845,"column":0},"generated":{"line":845,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":846,"column":0},"generated":{"line":846,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":847,"column":0},"generated":{"line":847,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":848,"column":0},"generated":{"line":848,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":849,"column":0},"generated":{"line":849,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":850,"column":0},"generated":{"line":850,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":851,"column":0},"generated":{"line":851,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":852,"column":0},"generated":{"line":852,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":853,"column":0},"generated":{"line":853,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":854,"column":0},"generated":{"line":854,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":855,"column":0},"generated":{"line":855,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":856,"column":0},"generated":{"line":856,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":857,"column":0},"generated":{"line":857,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":858,"column":0},"generated":{"line":858,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":859,"column":0},"generated":{"line":859,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":860,"column":0},"generated":{"line":860,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":861,"column":0},"generated":{"line":861,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":862,"column":0},"generated":{"line":862,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":863,"column":0},"generated":{"line":863,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":864,"column":0},"generated":{"line":864,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":865,"column":0},"generated":{"line":865,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":866,"column":0},"generated":{"line":866,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":867,"column":0},"generated":{"line":867,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":868,"column":0},"generated":{"line":868,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":869,"column":0},"generated":{"line":869,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":870,"column":0},"generated":{"line":870,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":871,"column":0},"generated":{"line":871,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":872,"column":0},"generated":{"line":872,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":873,"column":0},"generated":{"line":873,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":874,"column":0},"generated":{"line":874,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":875,"column":0},"generated":{"line":875,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":876,"column":0},"generated":{"line":876,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":877,"column":0},"generated":{"line":877,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":878,"column":0},"generated":{"line":878,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":879,"column":0},"generated":{"line":879,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":880,"column":0},"generated":{"line":880,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":881,"column":0},"generated":{"line":881,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":882,"column":0},"generated":{"line":882,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":883,"column":0},"generated":{"line":883,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":884,"column":0},"generated":{"line":884,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":885,"column":0},"generated":{"line":885,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":886,"column":0},"generated":{"line":886,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":887,"column":0},"generated":{"line":887,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":888,"column":0},"generated":{"line":888,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":889,"column":0},"generated":{"line":889,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":890,"column":0},"generated":{"line":890,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":891,"column":0},"generated":{"line":891,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":892,"column":0},"generated":{"line":892,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":893,"column":0},"generated":{"line":893,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":894,"column":0},"generated":{"line":894,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":895,"column":0},"generated":{"line":895,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":896,"column":0},"generated":{"line":896,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":897,"column":0},"generated":{"line":897,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":898,"column":0},"generated":{"line":898,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":899,"column":0},"generated":{"line":899,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":900,"column":0},"generated":{"line":900,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":901,"column":0},"generated":{"line":901,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":902,"column":0},"generated":{"line":902,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":903,"column":0},"generated":{"line":903,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":904,"column":0},"generated":{"line":904,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":905,"column":0},"generated":{"line":905,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":906,"column":0},"generated":{"line":906,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":907,"column":0},"generated":{"line":907,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":908,"column":0},"generated":{"line":908,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":909,"column":0},"generated":{"line":909,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":910,"column":0},"generated":{"line":910,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":911,"column":0},"generated":{"line":911,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":912,"column":0},"generated":{"line":912,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":913,"column":0},"generated":{"line":913,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":914,"column":0},"generated":{"line":914,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":915,"column":0},"generated":{"line":915,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":916,"column":0},"generated":{"line":916,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":917,"column":0},"generated":{"line":917,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":918,"column":0},"generated":{"line":918,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":919,"column":0},"generated":{"line":919,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":920,"column":0},"generated":{"line":920,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":921,"column":0},"generated":{"line":921,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":922,"column":0},"generated":{"line":922,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":923,"column":0},"generated":{"line":923,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":924,"column":0},"generated":{"line":924,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":925,"column":0},"generated":{"line":925,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":926,"column":0},"generated":{"line":926,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":927,"column":0},"generated":{"line":927,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":928,"column":0},"generated":{"line":928,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":929,"column":0},"generated":{"line":929,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":930,"column":0},"generated":{"line":930,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":931,"column":0},"generated":{"line":931,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":932,"column":0},"generated":{"line":932,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":933,"column":0},"generated":{"line":933,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":934,"column":0},"generated":{"line":934,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":935,"column":0},"generated":{"line":935,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":936,"column":0},"generated":{"line":936,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":937,"column":0},"generated":{"line":937,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":938,"column":0},"generated":{"line":938,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":939,"column":0},"generated":{"line":939,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":940,"column":0},"generated":{"line":940,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":941,"column":0},"generated":{"line":941,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":942,"column":0},"generated":{"line":942,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":943,"column":0},"generated":{"line":943,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":944,"column":0},"generated":{"line":944,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":945,"column":0},"generated":{"line":945,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":946,"column":0},"generated":{"line":946,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":947,"column":0},"generated":{"line":947,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":948,"column":0},"generated":{"line":948,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":949,"column":0},"generated":{"line":949,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":950,"column":0},"generated":{"line":950,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":951,"column":0},"generated":{"line":951,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":952,"column":0},"generated":{"line":952,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":953,"column":0},"generated":{"line":953,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":954,"column":0},"generated":{"line":954,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":955,"column":0},"generated":{"line":955,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":956,"column":0},"generated":{"line":956,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":957,"column":0},"generated":{"line":957,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":958,"column":0},"generated":{"line":958,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":959,"column":0},"generated":{"line":959,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":960,"column":0},"generated":{"line":960,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":961,"column":0},"generated":{"line":961,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":962,"column":0},"generated":{"line":962,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":963,"column":0},"generated":{"line":963,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":964,"column":0},"generated":{"line":964,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":965,"column":0},"generated":{"line":965,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":966,"column":0},"generated":{"line":966,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":967,"column":0},"generated":{"line":967,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":968,"column":0},"generated":{"line":968,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":969,"column":0},"generated":{"line":969,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":970,"column":0},"generated":{"line":970,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":971,"column":0},"generated":{"line":971,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":972,"column":0},"generated":{"line":972,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":973,"column":0},"generated":{"line":973,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":974,"column":0},"generated":{"line":974,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":975,"column":0},"generated":{"line":975,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":976,"column":0},"generated":{"line":976,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":977,"column":0},"generated":{"line":977,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":978,"column":0},"generated":{"line":978,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":979,"column":0},"generated":{"line":979,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":980,"column":0},"generated":{"line":980,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":981,"column":0},"generated":{"line":981,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":982,"column":0},"generated":{"line":982,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":983,"column":0},"generated":{"line":983,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":984,"column":0},"generated":{"line":984,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":985,"column":0},"generated":{"line":985,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":986,"column":0},"generated":{"line":986,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":987,"column":0},"generated":{"line":987,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":988,"column":0},"generated":{"line":988,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":989,"column":0},"generated":{"line":989,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":990,"column":0},"generated":{"line":990,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":991,"column":0},"generated":{"line":991,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":992,"column":0},"generated":{"line":992,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":993,"column":0},"generated":{"line":993,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":994,"column":0},"generated":{"line":994,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":995,"column":0},"generated":{"line":995,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":996,"column":0},"generated":{"line":996,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":997,"column":0},"generated":{"line":997,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":998,"column":0},"generated":{"line":998,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":999,"column":0},"generated":{"line":999,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":1000,"column":0},"generated":{"line":1000,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":1001,"column":0},"generated":{"line":1001,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":1002,"column":0},"generated":{"line":1002,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":1003,"column":0},"generated":{"line":1003,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":1004,"column":0},"generated":{"line":1004,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":1005,"column":0},"generated":{"line":1005,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":1006,"column":0},"generated":{"line":1006,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":1007,"column":0},"generated":{"line":1007,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":1008,"column":0},"generated":{"line":1008,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":1009,"column":0},"generated":{"line":1009,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":1010,"column":0},"generated":{"line":1010,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":1011,"column":0},"generated":{"line":1011,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","original":{"line":1012,"column":0},"generated":{"line":1012,"column":0}}],"sources":{"node_modules/@tensorflow/tfjs-layers/dist/engine/training.js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfc = require(\"@tensorflow/tfjs-core\");\nvar tfjs_core_1 = require(\"@tensorflow/tfjs-core\");\nvar _ = require(\"underscore\");\nvar K = require(\"../backend/tfjs_backend\");\nvar callbacks_1 = require(\"../callbacks\");\nvar errors_1 = require(\"../errors\");\nvar losses = require(\"../losses\");\nvar Metrics = require(\"../metrics\");\nvar optimizers = require(\"../optimizers\");\nvar generic_utils_1 = require(\"../utils/generic_utils\");\nvar executor_1 = require(\"./executor\");\nvar topology_1 = require(\"./topology\");\nfunction isDataTensor(x) {\n    return x instanceof tfjs_core_1.Tensor;\n}\nexports.isDataTensor = isDataTensor;\nfunction isDataArray(x) {\n    return Array.isArray(x);\n}\nexports.isDataArray = isDataArray;\nfunction isDataDict(x) {\n    return !isDataTensor(x) && !isDataArray(x);\n}\nexports.isDataDict = isDataDict;\nfunction standardizeInputData(data, names, shapes, checkBatchAxis, exceptionPrefix) {\n    if (checkBatchAxis === void 0) { checkBatchAxis = true; }\n    if (exceptionPrefix === void 0) { exceptionPrefix = ''; }\n    if (names == null || names.length === 0) {\n        if (data != null) {\n            var gotUnexpectedData = false;\n            if (isDataArray(data) && data.length > 0) {\n                gotUnexpectedData = true;\n            }\n            else if (isDataDict(data)) {\n                for (var key in data) {\n                    if (data.hasOwnProperty(key)) {\n                        gotUnexpectedData = true;\n                        break;\n                    }\n                }\n            }\n            else {\n                gotUnexpectedData = true;\n            }\n            if (gotUnexpectedData) {\n                throw new errors_1.ValueError(\"Error when checking model \" + exceptionPrefix + \" expected no data, \" +\n                    (\"but got \" + data));\n            }\n        }\n        return [];\n    }\n    if (data == null) {\n        return names.map(function (name) { return null; });\n    }\n    var arrays;\n    if (isDataDict(data)) {\n        data = data;\n        arrays = [];\n        for (var _i = 0, names_1 = names; _i < names_1.length; _i++) {\n            var name_1 = names_1[_i];\n            if (data[name_1] == null) {\n                throw new errors_1.ValueError(\"No data provided for \\\"\" + name_1 + \"\\\". Need data for each key in: \" +\n                    (\"\" + names));\n            }\n            arrays.push(data[name_1]);\n        }\n    }\n    else if (isDataArray(data)) {\n        data = data;\n        if (data.length !== names.length) {\n            throw new errors_1.ValueError(\"Error when checking model \" + exceptionPrefix + \": the Array of \" +\n                \"Tensors that you are passing to your model is not the size the \" +\n                (\"model expected. Expected to see \" + names.length + \" Tensor(s), but \") +\n                (\"instead got the following list of Tensor(s): \" + data));\n        }\n        arrays = data;\n    }\n    else {\n        data = data;\n        if (names.length > 1) {\n            throw new errors_1.ValueError(\"The model \" + exceptionPrefix + \" expects \" + names.length + \" Tensor(s), \" +\n                (\"but only received one Tensor. Found: Tensor with shape \" + data.shape));\n        }\n        arrays = [data];\n    }\n    for (var i = 0; i < names.length; ++i) {\n        var array = arrays[i];\n        if (array.shape.length === 1) {\n            arrays[i] = K.expandDims(array, 1);\n        }\n    }\n    if (shapes != null) {\n        for (var i = 0; i < names.length; ++i) {\n            if (shapes[i] == null) {\n                continue;\n            }\n            var array = arrays[i];\n            if (array.shape.length !== shapes[i].length) {\n                throw new errors_1.ValueError(\"Error when checking \" + exceptionPrefix + \": expected \" + names[i] + \" \" +\n                    (\"to have \" + shapes[i].length + \" dimension(s). but got array with \") +\n                    (\"shape \" + array.shape));\n            }\n            for (var j = 0; j < shapes[i].length; ++j) {\n                if (j === 0 && !checkBatchAxis) {\n                    continue;\n                }\n                var dim = array.shape[j];\n                var refDim = shapes[i][j];\n                if (refDim != null && refDim >= 0 && dim !== refDim) {\n                    throw new errors_1.ValueError(\"Error when checking \" + exceptionPrefix + \": expected \" + names[i] + \" \" +\n                        (\"to have shape [\" + shapes[i] + \"], but got array with shape \") +\n                        (\"[\" + array.shape + \"].\"));\n                }\n            }\n        }\n    }\n    return arrays;\n}\nexports.standardizeInputData = standardizeInputData;\nfunction checkArrayLengths(inputs, targets, weights) {\n    var setX = _.unique(inputs.map(function (input) { return input.shape[0]; }));\n    setX.sort();\n    var setY = _.unique(targets.map(function (target) { return target.shape[0]; }));\n    setY.sort();\n    if (setX.length > 1) {\n        throw new errors_1.ValueError(\"All input Tensors (x) should have the same number of samples. \" +\n            \"Got array shapes: \" +\n            (\"\" + JSON.stringify(inputs.map(function (input) { return input.shape; }))));\n    }\n    if (setY.length > 1) {\n        throw new errors_1.ValueError(\"All target Tensors (y) should have the same number of samples. \" +\n            \"Got array shapes: \" +\n            (\"\" + JSON.stringify(targets.map(function (target) { return target.shape; }))));\n    }\n    if (setX.length > 0 && setY.length > 0 && !_.isEqual(setX, setY)) {\n        throw new errors_1.ValueError(\"Input Tensors should have the same number of samples as target \" +\n            (\"Tensors. Found \" + setX[0] + \" input sample(s) and \" + setY[0] + \" target \") +\n            \"sample(s).\");\n    }\n}\nexports.checkArrayLengths = checkArrayLengths;\nfunction checkLossAndTargetCompatibility(targets, lossFns, outputShapes) {\n    var keyLosses = [\n        losses.meanSquaredError, losses.binaryCrossentropy,\n        losses.categoricalCrossentropy\n    ];\n    for (var i = 0; i < targets.length; ++i) {\n        var y = targets[i];\n        var loss = lossFns[i];\n        var shape = outputShapes[i];\n        if (loss == null) {\n            continue;\n        }\n        if (loss === losses.categoricalCrossentropy) {\n            if (y.shape[y.shape.length - 1] === 1) {\n                throw new errors_1.ValueError(\"You are passing a target array of shape \" + y.shape + \" while using \" +\n                    \"a loss 'categorical_crossentropy'. 'categorical_crossentropy'\" +\n                    \"expects targets to be binary matrices (1s and 0s) of shape \" +\n                    \"[samples, classes].\");\n            }\n        }\n        if (_.contains(keyLosses, loss)) {\n            var slicedYShape = y.shape.slice(1);\n            var slicedShape = shape.slice(1);\n            for (var j = 0; j < slicedYShape.length; ++j) {\n                var targetDim = slicedYShape[j];\n                var outDim = slicedShape[j];\n                if (outDim != null && targetDim !== outDim) {\n                    throw new errors_1.ValueError(\"A target Tensor with shape \" + y.shape + \" was passed for an \" +\n                        (\"output of shape \" + shape + \", while using a loss function that \") +\n                        \"expects targets to have the same shape as the output.\");\n                }\n            }\n        }\n    }\n}\nfunction makeBatches(size, batchSize) {\n    var output = [];\n    var batchStart = 0;\n    var batchEnd = null;\n    while (batchStart < size) {\n        batchEnd = batchStart + batchSize;\n        if (batchEnd >= size) {\n            batchEnd = size;\n        }\n        output.push([batchStart, batchEnd]);\n        batchStart = batchEnd;\n    }\n    return output;\n}\nexports.makeBatches = makeBatches;\nfunction sliceArrays(arrays, start, stop) {\n    if (arrays == null) {\n        return [null];\n    }\n    else if (Array.isArray(arrays)) {\n        return arrays.map(function (array) { return K.sliceAlongFirstAxis(array, start, stop - start); });\n    }\n    else {\n        return K.sliceAlongFirstAxis(arrays, start, stop - start);\n    }\n}\nfunction sliceArraysByIndices(arrays, indices) {\n    if (arrays == null) {\n        return null;\n    }\n    else if (Array.isArray(arrays)) {\n        return arrays.map(function (array) { return sliceArraysByIndices(array, indices); });\n    }\n    else {\n        return K.gather(arrays, indices);\n    }\n}\nexports.sliceArraysByIndices = sliceArraysByIndices;\nfunction checkInputData(data, names, shapes, checkBatchAxis, exceptionPrefix) {\n    if (checkBatchAxis === void 0) { checkBatchAxis = true; }\n    if (exceptionPrefix === void 0) { exceptionPrefix = ''; }\n    var arrays;\n    if (Array.isArray(data)) {\n        if (data.length !== names.length) {\n            throw new errors_1.ValueError(\"Error when checking model \" + exceptionPrefix + \": the Array of \" +\n                \"Tensors that you are passing to your model is not the size the \" +\n                (\"the model expected. Expected to see \" + names.length + \" Tensor(s),\") +\n                (\" but instead got \" + data.length + \" Tensors(s).\"));\n        }\n        arrays = data;\n    }\n    else {\n        if (names.length > 1) {\n            throw new errors_1.ValueError(\"The model expects \" + names.length + \" \" + exceptionPrefix + \" Tensors, \" +\n                \"but only received one Tensor. Found: array with shape \" +\n                (JSON.stringify(data.shape) + \".\"));\n        }\n        arrays = [data];\n    }\n    if (shapes != null) {\n        for (var i = 0; i < names.length; ++i) {\n            if (shapes[i] == null) {\n                continue;\n            }\n            var array = arrays[i];\n            if (array.shape.length !== shapes[i].length) {\n                throw new errors_1.ValueError(\"Error when checking \" + exceptionPrefix + \": expected \" + names[i] + \" \" +\n                    (\"to have \" + shapes[i].length + \" dimension(s), but got array with \") +\n                    (\"shape \" + JSON.stringify(array.shape)));\n            }\n            for (var j = 0; j < shapes[i].length; ++j) {\n                if (j === 0 && !checkBatchAxis) {\n                    continue;\n                }\n                var dim = array.shape[j];\n                var refDim = shapes[i][j];\n                if (refDim != null) {\n                    if (refDim !== dim) {\n                        throw new errors_1.ValueError(\"Error when checking \" + exceptionPrefix + \": expected \" +\n                            (names[i] + \" to have shape \" + JSON.stringify(shapes[i]) + \" but \") +\n                            (\"got array with shape \" + JSON.stringify(array.shape) + \".\"));\n                    }\n                }\n            }\n        }\n    }\n}\nfunction collectMetrics(metrics, outputNames) {\n    if (metrics == null || Array.isArray(metrics) && metrics.length === 0) {\n        return outputNames.map(function (name) { return []; });\n    }\n    if (Array.isArray(metrics)) {\n        return outputNames.map(function (name) { return metrics; });\n    }\n    else if (metrics != null) {\n        var nestedMetrics = [];\n        for (var _i = 0, outputNames_1 = outputNames; _i < outputNames_1.length; _i++) {\n            var name_2 = outputNames_1[_i];\n            var outputMetrics = metrics.hasOwnProperty(name_2) ? metrics[name_2] : [];\n            if (!Array.isArray(outputMetrics)) {\n                outputMetrics = [outputMetrics];\n            }\n            nestedMetrics.push(outputMetrics);\n        }\n        return nestedMetrics;\n    }\n    else {\n        throw new TypeError('Type of metrics argument not understood. Expected an Array or ' +\n            'Object, found: ' + metrics);\n    }\n}\nvar ModelLoggingVerbosity;\n(function (ModelLoggingVerbosity) {\n    ModelLoggingVerbosity[ModelLoggingVerbosity[\"SILENT\"] = 0] = \"SILENT\";\n    ModelLoggingVerbosity[ModelLoggingVerbosity[\"VERBOSE\"] = 1] = \"VERBOSE\";\n})(ModelLoggingVerbosity = exports.ModelLoggingVerbosity || (exports.ModelLoggingVerbosity = {}));\nvar Model = (function (_super) {\n    __extends(Model, _super);\n    function Model(config) {\n        return _super.call(this, config) || this;\n    }\n    Model.prototype.compile = function (config) {\n        var _this = this;\n        if (config.loss == null) {\n            config.loss = [];\n        }\n        this.loss = config.loss;\n        var optimizerConstructor = optimizers.get(config.optimizer);\n        if (typeof config.optimizer === 'string') {\n            this.optimizer = new optimizerConstructor({});\n        }\n        else {\n            this.optimizer = new optimizerConstructor(config.optimizer);\n        }\n        var lossFunctions = [];\n        if (!Array.isArray(config.loss) && typeof config.loss !== 'string') {\n            config.loss = config.loss;\n            for (var name_3 in config.loss) {\n                if (!_.contains(this.outputNames, name_3)) {\n                    throw new errors_1.ValueError(\"Unknown entry in loss dictionary: \\\"\" + name_3 + \"\\\". Only expect the \" +\n                        (\"following keys: \" + this.outputNames));\n                }\n            }\n            for (var name_4 in this.outputNames) {\n                if (config.loss[name_4] == null) {\n                    console.warn(\"Output \\\"\" + name_4 + \"\\\" is missing from loss dictionary. We assume \" +\n                        \"this was done on purpose, and we will not be expecting data \" +\n                        (\"to be passed to \" + name_4 + \" during training\"));\n                }\n                lossFunctions.push(losses.get(config.loss[name_4]));\n            }\n        }\n        else if (Array.isArray(config.loss)) {\n            if (config.loss.length !== this.outputs.length) {\n                throw new errors_1.ValueError(\"When passing an Array as loss, it should have one entry per \" +\n                    (\"model output. The model has \" + this.outputs.length + \" output(s), \") +\n                    (\"but you passed loss=\" + config.loss + \".\"));\n            }\n            lossFunctions = config.loss.map(function (l) { return losses.get(l); });\n        }\n        else {\n            var lossFunction_1 = losses.get(config.loss);\n            this.outputs.map(function (layer) {\n                lossFunctions.push(lossFunction_1);\n            });\n        }\n        this.lossFunctions = lossFunctions;\n        this.feedOutputNames = [];\n        this.feedOutputShapes = [];\n        this.feedLossFns = [];\n        for (var i = 0; i < this.outputs.length; ++i) {\n            var shape = this.internalOutputShapes[i];\n            var name_5 = this.outputNames[i];\n            this.feedOutputNames.push(name_5);\n            this.feedOutputShapes.push(shape);\n            this.feedLossFns.push(this.lossFunctions[i]);\n        }\n        var skipTargetIndices = [];\n        this.metrics = config.metrics;\n        this.metricsNames = ['loss'];\n        this.metricsTensors = [];\n        K.nameScope('loss', function () {\n            for (var i = 0; i < _this.outputs.length; ++i) {\n                if (skipTargetIndices.indexOf(i) !== -1) {\n                    continue;\n                }\n                var weightedLoss = _this.lossFunctions[i];\n                if (_this.outputs.length > 1) {\n                    _this.metricsTensors.push([weightedLoss, i]);\n                    _this.metricsNames.push(_this.outputNames[i] + '_loss');\n                }\n            }\n        });\n        var nestedMetrics = collectMetrics(config.metrics, this.outputNames);\n        var appendMetric = function (outputIndex, metricName, metricTensor) {\n            if (_this.outputNames.length > 1) {\n                metricName = _this.outputNames[outputIndex] + '_' + metricName;\n            }\n            _this.metricsNames.push(metricName);\n            _this.metricsTensors.push([metricTensor, outputIndex]);\n        };\n        K.nameScope('metric', function () {\n            var _loop_1 = function (i) {\n                if (skipTargetIndices.indexOf(i) !== -1) {\n                    return \"continue\";\n                }\n                var outputMetrics = nestedMetrics[i];\n                var handleMetrics = function (metrics) {\n                    var metricNamePrefix = '';\n                    var metricName;\n                    var accFn;\n                    var weightedMetricFn;\n                    var _loop_2 = function (metric) {\n                        if (['accuracy', 'acc', 'crossentropy', 'ce'].indexOf(metric) !==\n                            -1) {\n                            var outputShape = _this.internalOutputShapes[i];\n                            if (outputShape[outputShape.length - 1] === 1 ||\n                                _this.lossFunctions[i] === losses.binaryCrossentropy) {\n                                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                                    accFn = Metrics.binaryAccuracy;\n                                }\n                                else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                                    accFn = Metrics.binaryCrossentropy;\n                                }\n                            }\n                            else if (_this.lossFunctions[i] ===\n                                losses.sparseCategoricalCrossentropy) {\n                                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                                    accFn = Metrics.sparseCategoricalAccuracy;\n                                }\n                                else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                                    accFn = Metrics.sparseCategoricalCrossentropy;\n                                }\n                            }\n                            else {\n                                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                                    accFn = Metrics.categoricalAccuracy;\n                                }\n                                else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                                    accFn = Metrics.categoricalCrossentropy;\n                                }\n                            }\n                            var suffix = void 0;\n                            if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                                suffix = 'acc';\n                            }\n                            else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                                suffix = 'ce';\n                            }\n                            weightedMetricFn = accFn;\n                            metricName = metricNamePrefix + suffix;\n                        }\n                        else {\n                            var metricFn = Metrics.get(metric);\n                            weightedMetricFn = metricFn;\n                            metricName = metricNamePrefix + metric;\n                        }\n                        var metricResult;\n                        K.nameScope(metricName, function () {\n                            metricResult = weightedMetricFn;\n                        });\n                        appendMetric(i, metricName, metricResult);\n                    };\n                    for (var _i = 0, metrics_1 = metrics; _i < metrics_1.length; _i++) {\n                        var metric = metrics_1[_i];\n                        _loop_2(metric);\n                    }\n                };\n                handleMetrics(outputMetrics);\n            };\n            for (var i = 0; i < _this.outputs.length; ++i) {\n                _loop_1(i);\n            }\n        });\n        this.collectedTrainableWeights = this.trainableWeights;\n    };\n    Model.prototype.checkTrainableWeightsConsistency = function () {\n        if (this.collectedTrainableWeights == null) {\n            return;\n        }\n        if (this.trainableWeights.length !==\n            this.collectedTrainableWeights.length) {\n            console.warn('Discrepancy between trainableweights and collected trainable ' +\n                'weights. Did you set `model.trainable` without calling ' +\n                '`model.compile()` afterwards?');\n        }\n    };\n    Model.prototype.evaluate = function (x, y, config) {\n        if (config === void 0) { config = {}; }\n        var batchSize = config.batchSize == null ? 32 : config.batchSize;\n        var standardizedOuts = this.standardizeUserData(x, y, true, batchSize);\n        var ins = standardizedOuts[0].concat(standardizedOuts[1]);\n        this.makeTestFunction();\n        var f = this.testFunction;\n        var testOuts = this.testLoop(f, ins, batchSize, config.verbose, config.steps);\n        return generic_utils_1.singletonOrArray(testOuts);\n    };\n    Model.prototype.checkNumSamples = function (ins, batchSize, steps, stepsName) {\n        if (stepsName === void 0) { stepsName = 'steps'; }\n        var numSamples;\n        if (steps != null) {\n            numSamples = null;\n            if (batchSize != null) {\n                throw new errors_1.ValueError(\"If \" + stepsName + \" is set, batchSize must be null or undefined.\" +\n                    (\"Got batchSize = \" + batchSize));\n            }\n        }\n        else if (ins != null) {\n            if (Array.isArray(ins)) {\n                numSamples = ins[0].shape[0];\n            }\n            else {\n                numSamples = ins.shape[0];\n            }\n        }\n        else {\n            throw new errors_1.ValueError(\"Either the input data should have a defined shape, or \" +\n                (stepsName + \" shoud be specified.\"));\n        }\n        return numSamples;\n    };\n    Model.prototype.predictLoop = function (ins, batchSize, verbose) {\n        var _this = this;\n        if (batchSize === void 0) { batchSize = 32; }\n        if (verbose === void 0) { verbose = false; }\n        var numSamples = this.checkNumSamples(ins);\n        if (verbose) {\n            throw new errors_1.NotImplementedError('Verbose predictLoop() is not implemented yet.');\n        }\n        var batches = makeBatches(numSamples, batchSize);\n        var outs = [];\n        var _loop_3 = function (batchIndex) {\n            var batchOuts = tfc.tidy(function () {\n                var batchStart = batches[batchIndex][0];\n                var batchEnd = batches[batchIndex][1];\n                var insBatch = sliceArrays(ins, batchStart, batchEnd);\n                var feeds = [];\n                if (Array.isArray(insBatch)) {\n                    for (var i = 0; i < insBatch.length; ++i) {\n                        feeds.push({ key: _this.inputs[i], value: insBatch[i] });\n                    }\n                }\n                else {\n                    feeds.push({ key: _this.inputs[0], value: insBatch });\n                }\n                var feedDict = new executor_1.FeedDict(feeds);\n                return executor_1.execute(_this.outputs, feedDict);\n            });\n            if (batchIndex === 0) {\n                for (var _i = 0, batchOuts_1 = batchOuts; _i < batchOuts_1.length; _i++) {\n                    var batchOut = batchOuts_1[_i];\n                    outs.push(batchOut);\n                }\n            }\n            else {\n                for (var i = 0; i < batchOuts.length; ++i) {\n                    outs[i] = K.concatAlongFirstAxis(outs[i], batchOuts[i]);\n                }\n            }\n        };\n        for (var batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n            _loop_3(batchIndex);\n        }\n        return generic_utils_1.singletonOrArray(outs);\n    };\n    Model.prototype.predict = function (x, config) {\n        if (config === void 0) { config = {}; }\n        checkInputData(x, this.inputNames, this.feedInputShapes, false);\n        var batchSize = config.batchSize == null ? 32 : config.batchSize;\n        return this.predictLoop(x, batchSize);\n    };\n    Model.prototype.predictOnBatch = function (x) {\n        checkInputData(x, this.inputNames, this.feedInputShapes, true);\n        return this.predictLoop(x, x.shape[0]);\n    };\n    Model.prototype.standardizeUserData = function (x, y, checkBatchAxis, batchSize) {\n        if (checkBatchAxis === void 0) { checkBatchAxis = true; }\n        if (this.optimizer == null) {\n            throw new errors_1.RuntimeError('You must compile a model before training/testing. Use ' +\n                'Model.compile(modelCompileConfig).');\n        }\n        var outputShapes = [];\n        for (var i = 0; i < this.feedOutputShapes.length; ++i) {\n            var outputShape = this.feedOutputShapes[i];\n            var lossFn = this.feedLossFns[i];\n            if (lossFn === losses.sparseCategoricalCrossentropy) {\n                outputShapes.push(outputShape.slice(0, outputShape.length - 1).concat([1]));\n            }\n            else {\n                outputShapes.push(outputShape);\n            }\n        }\n        x = standardizeInputData(x, this.feedInputNames, this.feedInputShapes, false, 'input');\n        y = standardizeInputData(y, this.feedOutputNames, outputShapes, false, 'target');\n        checkArrayLengths(x, y, null);\n        checkLossAndTargetCompatibility(y, this.feedLossFns, this.feedOutputShapes);\n        if (this.stateful && batchSize != null && batchSize > 0) {\n            if (x[0].shape[0] % batchSize !== 0) {\n                throw new errors_1.ValueError(\"In a stateful network, you should only pass inputs with a \" +\n                    \"number of samples that is divisible by the batch size \" +\n                    (batchSize + \". Found: \" + x[0].shape[0] + \" sample(s).\"));\n            }\n        }\n        return [x, y, null];\n    };\n    Model.prototype.fitLoop = function (f, ins, outLabels, batchSize, epochs, verbose, callbacks, valF, valIns, shuffle, callbackMetrics, initialEpoch, stepsPerEpoch, validationSteps) {\n        if (initialEpoch === void 0) { initialEpoch = 0; }\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var doValidation, numTrainSamples, indexArray, callbackList, _loop_4, epoch;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (batchSize == null) {\n                            batchSize = 32;\n                        }\n                        if (epochs == null) {\n                            epochs = 100;\n                        }\n                        if (shuffle == null) {\n                            shuffle = true;\n                        }\n                        if (initialEpoch == null) {\n                            initialEpoch = 0;\n                        }\n                        doValidation = false;\n                        if (valF != null && valIns != null) {\n                            doValidation = true;\n                        }\n                        if (validationSteps != null) {\n                            doValidation = true;\n                            if (stepsPerEpoch == null) {\n                                throw new errors_1.ValueError('Can only use `validationSteps` when doing step-wise training, ' +\n                                    'i.e., `stepsPerEpoch` must be set.');\n                            }\n                        }\n                        numTrainSamples = this.checkNumSamples(ins, batchSize, stepsPerEpoch, 'steps_per_epoch');\n                        if (numTrainSamples != null) {\n                            indexArray = _.range(numTrainSamples);\n                        }\n                        this.history = new callbacks_1.History();\n                        if (callbacks == null) {\n                            callbacks = [new callbacks_1.BaseLogger()];\n                        }\n                        else {\n                            callbacks = [new callbacks_1.BaseLogger()].concat(callbacks);\n                        }\n                        callbacks = callbacks.concat([this.history]);\n                        if (verbose > 0) {\n                            throw new errors_1.NotImplementedError('Verbose mode is not implemented yet.');\n                        }\n                        callbackList = new callbacks_1.CallbackList(callbacks);\n                        callbackList.setModel(this);\n                        callbackList.setParams({\n                            epochs: epochs,\n                            steps: stepsPerEpoch,\n                            verbose: verbose,\n                            doValidation: doValidation,\n                            metrics: callbackMetrics,\n                        });\n                        return [4, callbackList.onTrainBegin()];\n                    case 1:\n                        _a.sent();\n                        _loop_4 = function (epoch) {\n                            var epochLogs, epochIndexArray, epochIndexArray1D_1, batches_1, _loop_5, batchIndex;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0: return [4, callbackList.onEpochBegin(epoch)];\n                                    case 1:\n                                        _a.sent();\n                                        epochLogs = {};\n                                        epochIndexArray = indexArray;\n                                        if (!(stepsPerEpoch != null)) return [3, 2];\n                                        throw new errors_1.NotImplementedError('stepsPerEpoch mode is not implemented yet.');\n                                    case 2:\n                                        if (shuffle === 'batch') {\n                                            throw new errors_1.NotImplementedError('batch shuffling is not implemneted yet');\n                                        }\n                                        else if (shuffle) {\n                                            epochIndexArray = _.shuffle(indexArray);\n                                        }\n                                        epochIndexArray1D_1 = tfjs_core_1.tensor1d(epochIndexArray);\n                                        batches_1 = makeBatches(numTrainSamples, batchSize);\n                                        _loop_5 = function (batchIndex) {\n                                            var batchLogs;\n                                            return __generator(this, function (_a) {\n                                                switch (_a.label) {\n                                                    case 0:\n                                                        batchLogs = {};\n                                                        return [4, callbackList.onBatchBegin(batchIndex, batchLogs)];\n                                                    case 1:\n                                                        _a.sent();\n                                                        tfc.tidy(function () {\n                                                            var batchStart = batches_1[batchIndex][0];\n                                                            var batchEnd = batches_1[batchIndex][1];\n                                                            var batchIds = K.sliceAlongFirstAxis(epochIndexArray1D_1, batchStart, batchEnd - batchStart);\n                                                            batchLogs['batch'] = batchIndex;\n                                                            batchLogs['size'] = batchEnd - batchStart;\n                                                            var insBatch = sliceArraysByIndices(ins, batchIds);\n                                                            var outs = f(insBatch);\n                                                            for (var i = 0; i < outLabels.length; ++i) {\n                                                                var label = outLabels[i];\n                                                                var out = outs[i];\n                                                                batchLogs[label] = out;\n                                                                K.keep(out);\n                                                            }\n                                                            if (batchIndex === batches_1.length - 1) {\n                                                                if (doValidation) {\n                                                                    var valOuts = _this.testLoop(valF, valIns, batchSize);\n                                                                    for (var i = 0; i < outLabels.length; ++i) {\n                                                                        var label = outLabels[i];\n                                                                        var out = valOuts[i];\n                                                                        K.keep(out);\n                                                                        epochLogs['val_' + label] = out;\n                                                                    }\n                                                                }\n                                                            }\n                                                        });\n                                                        return [4, callbackList.onBatchEnd(batchIndex, batchLogs)];\n                                                    case 2:\n                                                        _a.sent();\n                                                        callbacks_1.disposeTensorsInLogs(batchLogs);\n                                                        return [2];\n                                                }\n                                            });\n                                        };\n                                        batchIndex = 0;\n                                        _a.label = 3;\n                                    case 3:\n                                        if (!(batchIndex < batches_1.length)) return [3, 6];\n                                        return [5, _loop_5(batchIndex)];\n                                    case 4:\n                                        _a.sent();\n                                        _a.label = 5;\n                                    case 5:\n                                        ++batchIndex;\n                                        return [3, 3];\n                                    case 6:\n                                        epochIndexArray1D_1.dispose();\n                                        _a.label = 7;\n                                    case 7: return [4, callbackList.onEpochEnd(epoch, epochLogs)];\n                                    case 8:\n                                        _a.sent();\n                                        return [2];\n                                }\n                            });\n                        };\n                        epoch = initialEpoch;\n                        _a.label = 2;\n                    case 2:\n                        if (!(epoch < epochs)) return [3, 5];\n                        return [5, _loop_4(epoch)];\n                    case 3:\n                        _a.sent();\n                        _a.label = 4;\n                    case 4:\n                        ++epoch;\n                        return [3, 2];\n                    case 5: return [4, callbackList.onTrainEnd()];\n                    case 6:\n                        _a.sent();\n                        return [4, this.history.syncData()];\n                    case 7:\n                        _a.sent();\n                        return [2, this.history];\n                }\n            });\n        });\n    };\n    Model.prototype.testLoop = function (f, ins, batchSize, verbose, steps) {\n        if (verbose === void 0) { verbose = 0; }\n        var numSamples = this.checkNumSamples(ins, batchSize, steps, 'steps');\n        var outs = [];\n        if (verbose === 1) {\n            throw new errors_1.NotImplementedError('Verbose mode is not implemented yet.');\n        }\n        if (steps != null) {\n            throw new errors_1.NotImplementedError('steps mode in testLoop() is not implemented yet');\n        }\n        else {\n            var batches = makeBatches(numSamples, batchSize);\n            var indexArray = tfjs_core_1.tensor1d(_.range(numSamples));\n            for (var batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n                var batchStart = batches[batchIndex][0];\n                var batchEnd = batches[batchIndex][1];\n                var batchIds = K.sliceAlongFirstAxis(indexArray, batchStart, batchEnd - batchStart);\n                var insBatch = sliceArraysByIndices(ins, batchIds);\n                var batchOuts = f(insBatch);\n                if (batchIndex === 0) {\n                    for (var i = 0; i < batchOuts.length; ++i) {\n                        outs.push(K.getScalar(0));\n                    }\n                }\n                for (var i = 0; i < batchOuts.length; ++i) {\n                    var batchOut = batchOuts[i];\n                    outs[i] =\n                        K.add(outs[i], K.scalarTimesArray(K.getScalar(batchEnd - batchStart), batchOut));\n                }\n            }\n            for (var i = 0; i < outs.length; ++i) {\n                outs[i] = K.divide(outs[i], K.getScalar(numSamples));\n            }\n        }\n        return outs;\n    };\n    Model.prototype.getDedupedMetricsNames = function () {\n        var outLabels = this.metricsNames;\n        var dedupedOutLabels = [];\n        for (var i = 0; i < outLabels.length; ++i) {\n            var label = outLabels[i];\n            var newLabel = label;\n            if (generic_utils_1.count(outLabels, label) > 1) {\n                var dupIndex = generic_utils_1.count(outLabels.slice(0, i), label);\n                newLabel += \"_\" + dupIndex;\n            }\n            dedupedOutLabels.push(newLabel);\n        }\n        return dedupedOutLabels;\n    };\n    Model.prototype.makeTestFunction = function () {\n        var _this = this;\n        this.testFunction = function (data) {\n            return tfc.tidy(function () {\n                var valOutputs = [];\n                var totalLoss;\n                var inputs = data.slice(0, _this.inputs.length);\n                var targets = data.slice(_this.inputs.length, _this.inputs.length + _this.outputs.length);\n                var feeds = [];\n                for (var i = 0; i < _this.inputs.length; ++i) {\n                    feeds.push({ key: _this.inputs[i], value: inputs[i] });\n                }\n                var feedDict = new executor_1.FeedDict(feeds);\n                var outputs = executor_1.execute(_this.outputs, feedDict);\n                for (var i = 0; i < _this.lossFunctions.length; ++i) {\n                    var lossFunction = _this.lossFunctions[i];\n                    var loss = K.mean(lossFunction(targets[i], outputs[i]));\n                    if (i === 0) {\n                        totalLoss = loss;\n                    }\n                    else {\n                        totalLoss = K.add(totalLoss, loss);\n                    }\n                    valOutputs.push(totalLoss);\n                }\n                for (var i = 0; i < _this.metricsTensors.length; ++i) {\n                    var metric = _this.metricsTensors[i][0];\n                    var outputIndex = _this.metricsTensors[i][1];\n                    var meanMetric = K.mean(metric(targets[outputIndex], outputs[outputIndex]));\n                    valOutputs.push(meanMetric);\n                }\n                return valOutputs;\n            });\n        };\n    };\n    Model.prototype.fit = function (x, y, config) {\n        if (config === void 0) { config = {}; }\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var batchSize, standardizedOuts, inputs, targets, doValidation, valX, valY, valIns, valStandardized, splitAt, originalBatchSize, ins, trainFunction, outLabels, valFunction, callbackMetrics, callbacks;\n            return __generator(this, function (_a) {\n                batchSize = config.batchSize == null ? 32 : config.batchSize;\n                standardizedOuts = this.standardizeUserData(x, y, false, batchSize);\n                inputs = standardizedOuts[0];\n                targets = standardizedOuts[1];\n                doValidation = false;\n                if (config.validationData != null && config.validationData.length > 0) {\n                    doValidation = true;\n                    if (config.validationData.length === 2) {\n                        valX = config.validationData[0];\n                        valY = config.validationData[1];\n                    }\n                    else if (config.validationData.length === 3) {\n                        throw new errors_1.NotImplementedError('validationData including sample weights is not supported yet.');\n                    }\n                    else {\n                        throw new errors_1.ValueError(\"When passing validation data, it must contain 2 (valX, valY) \" +\n                            \"or 3 (valX, valY, valSampleWeight) items, however it contains \" +\n                            (config.validationData.length + \" items\"));\n                    }\n                    valStandardized = this.standardizeUserData(valX, valY, true, batchSize);\n                    valX = valStandardized[0];\n                    valY = valStandardized[1];\n                    valIns = valX.concat(valY);\n                }\n                else if (config.validationSplit != null && config.validationSplit > 0 &&\n                    config.validationSplit < 1) {\n                    doValidation = true;\n                    splitAt = Math.floor(inputs[0].shape[0] * (1 - config.validationSplit));\n                    originalBatchSize = inputs[0].shape[0];\n                    valX = sliceArrays(inputs, splitAt, originalBatchSize);\n                    inputs = sliceArrays(inputs, 0, splitAt);\n                    valY = sliceArrays(targets, splitAt, originalBatchSize);\n                    targets = sliceArrays(targets, 0, splitAt);\n                    valIns = valX.concat(valY);\n                }\n                else if (config.validationSteps != null) {\n                    doValidation = true;\n                }\n                ins = inputs.concat(targets);\n                this.checkTrainableWeightsConsistency();\n                trainFunction = function (data) {\n                    var losses = [];\n                    var lossValues = [];\n                    var inputs = data.slice(0, _this.inputs.length);\n                    var targets = data.slice(_this.inputs.length, _this.inputs.length + _this.outputs.length);\n                    var metricsValues = [];\n                    var totalLossFunction = function () {\n                        var feeds = [];\n                        for (var i = 0; i < _this.inputs.length; ++i) {\n                            feeds.push({ key: _this.inputs[i], value: inputs[i] });\n                        }\n                        var feedDict = new executor_1.FeedDict(feeds);\n                        var outputs = executor_1.execute(_this.outputs, feedDict, { 'training': true });\n                        var totalLoss;\n                        for (var i = 0; i < _this.lossFunctions.length; ++i) {\n                            var lossFunction = _this.lossFunctions[i];\n                            var loss = lossFunction(targets[i], outputs[i]);\n                            losses.push(loss);\n                            var meanLoss = K.mean(loss);\n                            lossValues.push(meanLoss);\n                            if (i === 0) {\n                                totalLoss = loss;\n                            }\n                            else {\n                                totalLoss = K.add(totalLoss, loss);\n                            }\n                        }\n                        for (var i = 0; i < _this.metricsTensors.length; ++i) {\n                            var metric = _this.metricsTensors[i][0];\n                            var outputIndex = _this.metricsTensors[i][1];\n                            var meanMetric = K.mean(metric(targets[outputIndex], outputs[outputIndex]));\n                            K.keep(meanMetric);\n                            metricsValues.push(meanMetric);\n                        }\n                        totalLoss = K.mean(totalLoss);\n                        _this.calculateLosses().forEach(function (regularizerLoss) {\n                            totalLoss = K.add(totalLoss, regularizerLoss);\n                        });\n                        return totalLoss;\n                    };\n                    var totalLossValue = _this.optimizer.updateVariables(totalLossFunction, _this.collectedTrainableWeights);\n                    return [totalLossValue].concat(metricsValues);\n                };\n                outLabels = this.getDedupedMetricsNames();\n                if (doValidation) {\n                    this.makeTestFunction();\n                    valFunction = this.testFunction;\n                    callbackMetrics =\n                        outLabels.slice().concat(outLabels.map(function (n) { return 'val_' + n; }));\n                }\n                else {\n                    valFunction = null;\n                    valIns = [];\n                    callbackMetrics = outLabels.slice();\n                }\n                callbacks = callbacks_1.standardizeCallbacks(config.callbacks);\n                return [2, this.fitLoop(trainFunction, ins, outLabels, batchSize, config.epochs, config.verbose, callbacks, valFunction, valIns, config.shuffle, callbackMetrics, null, null, null)];\n            });\n        });\n    };\n    __decorate([\n        tfjs_core_1.doc({ heading: 'Models', subheading: 'Classes', configParamIndices: [0] })\n    ], Model.prototype, \"compile\", null);\n    __decorate([\n        tfjs_core_1.doc({ heading: 'Models', subheading: 'Classes', configParamIndices: [2] })\n    ], Model.prototype, \"evaluate\", null);\n    __decorate([\n        tfjs_core_1.doc({ heading: 'Models', subheading: 'Classes', configParamIndices: [1] })\n    ], Model.prototype, \"predict\", null);\n    __decorate([\n        tfjs_core_1.doc({ heading: 'Models', subheading: 'Classes' })\n    ], Model.prototype, \"predictOnBatch\", null);\n    __decorate([\n        tfjs_core_1.doc({ heading: 'Models', subheading: 'Classes', configParamIndices: [2] })\n    ], Model.prototype, \"fit\", null);\n    Model = __decorate([\n        tfjs_core_1.doc({ heading: 'Models', subheading: 'Classes' })\n    ], Model);\n    return Model;\n}(topology_1.Container));\nexports.Model = Model;\ngeneric_utils_1.ClassNameMap.register('Model', Model);\n"},"lineCount":1012}},"hash":"db3ade010c4301e22a2cbcec8aee6683","cacheData":{"env":{}}}