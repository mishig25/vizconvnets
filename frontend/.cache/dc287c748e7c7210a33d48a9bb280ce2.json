{"dependencies":[{"name":"/home/mishig/Desktop/viz/final/package.json","includedInParent":true,"mtime":1522648746056},{"name":"/home/mishig/Desktop/viz/final/node_modules/@tensorflow/tfjs-core/package.json","includedInParent":true,"mtime":0},{"name":"../doc","loc":{"line":9,"column":20}},{"name":"../environment","loc":{"line":10,"column":28}},{"name":"../tensor","loc":{"line":11,"column":23}},{"name":"../tensor_util","loc":{"line":12,"column":26}},{"name":"../util","loc":{"line":13,"column":19}},{"name":"./axis_util","loc":{"line":14,"column":26}},{"name":"./concat","loc":{"line":15,"column":23}},{"name":"./operation","loc":{"line":16,"column":26}},{"name":"./ops","loc":{"line":17,"column":18}},{"name":"./rand","loc":{"line":18,"column":21}}],"generated":{"js":"\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = require(\"../doc\");\nvar environment_1 = require(\"../environment\");\nvar tensor_1 = require(\"../tensor\");\nvar tensor_util = require(\"../tensor_util\");\nvar util = require(\"../util\");\nvar axis_util_1 = require(\"./axis_util\");\nvar concat_1 = require(\"./concat\");\nvar operation_1 = require(\"./operation\");\nvar ops = require(\"./ops\");\nvar rand_1 = require(\"./rand\");\nvar ArrayOps = (function () {\n    function ArrayOps() {\n    }\n    ArrayOps.tensor = function (values, shape, dtype) {\n        if (dtype === void 0) { dtype = 'float32'; }\n        var inferredShape = util.inferShape(values);\n        if (shape != null && inferredShape.length !== 1) {\n            util.assertShapesMatch(shape, inferredShape, \"Error creating a new Tensor. \" +\n                (\"Inferred shape (\" + inferredShape + \") does not match the \") +\n                (\"provided shape (\" + shape + \"). \"));\n        }\n        if (!util.isTypedArray(values) && !Array.isArray(values)) {\n            values = [values];\n        }\n        shape = shape || inferredShape;\n        return tensor_1.Tensor.make(shape, { values: toTypedArray(values, dtype) }, dtype);\n    };\n    ArrayOps.scalar = function (value, dtype) {\n        if (dtype === void 0) { dtype = 'float32'; }\n        if (util.isTypedArray(value) || Array.isArray(value)) {\n            throw new Error('Error creating a new Scalar: value must be a primitive ' +\n                '(number|boolean)');\n        }\n        return ArrayOps.tensor(value, [], dtype);\n    };\n    ArrayOps.tensor1d = function (values, dtype) {\n        if (dtype === void 0) { dtype = 'float32'; }\n        var inferredShape = util.inferShape(values);\n        if (inferredShape.length !== 1) {\n            throw new Error('Error creating a new Tensor1D: values must be a flat/TypedArray');\n        }\n        return ArrayOps.tensor(values, inferredShape, dtype);\n    };\n    ArrayOps.tensor2d = function (values, shape, dtype) {\n        if (dtype === void 0) { dtype = 'float32'; }\n        var inferredShape = util.inferShape(values);\n        if (inferredShape.length !== 2 && inferredShape.length !== 1) {\n            throw new Error('Error creating a new Tensor2D: values must be number[][] ' +\n                'or flat/TypedArray');\n        }\n        shape = shape || inferredShape;\n        return ArrayOps.tensor(values, shape, dtype);\n    };\n    ArrayOps.tensor3d = function (values, shape, dtype) {\n        if (dtype === void 0) { dtype = 'float32'; }\n        var inferredShape = util.inferShape(values);\n        if (inferredShape.length !== 3 && inferredShape.length !== 1) {\n            throw new Error('Error creating a new Tensor3D: values must be number[][][]' +\n                'or flat/TypedArray');\n        }\n        shape = shape || inferredShape;\n        return ArrayOps.tensor(values, shape, dtype);\n    };\n    ArrayOps.tensor4d = function (values, shape, dtype) {\n        if (dtype === void 0) { dtype = 'float32'; }\n        var inferredShape = util.inferShape(values);\n        if (inferredShape.length !== 4 && inferredShape.length !== 1) {\n            throw new Error('Error creating a new Tensor4D: values must be number[][][][]' +\n                'or flat/TypedArray');\n        }\n        shape = shape || inferredShape;\n        return ArrayOps.tensor(values, shape, dtype);\n    };\n    ArrayOps.ones = function (shape, dtype) {\n        if (dtype === void 0) { dtype = 'float32'; }\n        var values = makeOnesTypedArray(util.sizeFromShape(shape), dtype);\n        return tensor_1.Tensor.make(shape, { values: values }, dtype);\n    };\n    ArrayOps.zeros = function (shape, dtype) {\n        if (dtype === void 0) { dtype = 'float32'; }\n        var values = makeZerosTypedArray(util.sizeFromShape(shape), dtype);\n        return tensor_1.Tensor.make(shape, { values: values }, dtype);\n    };\n    ArrayOps.fill = function (shape, value, dtype) {\n        if (dtype === void 0) { dtype = 'float32'; }\n        var values = util.getTypedArrayFromDType(dtype, util.sizeFromShape(shape));\n        values.fill(value);\n        return tensor_1.Tensor.make(shape, { values: values }, dtype);\n    };\n    ArrayOps.onesLike = function (x) {\n        return ArrayOps.ones(x.shape, x.dtype);\n    };\n    ArrayOps.zerosLike = function (x) {\n        return ArrayOps.zeros(x.shape, x.dtype);\n    };\n    ArrayOps.clone = function (x) {\n        return tensor_1.Tensor.make(x.shape, { dataId: x.dataId }, x.dtype);\n    };\n    ArrayOps.randomNormal = function (shape, mean, stdDev, dtype, seed) {\n        if (mean === void 0) { mean = 0; }\n        if (stdDev === void 0) { stdDev = 1; }\n        if (dtype != null && dtype === 'bool') {\n            throw new Error(\"Unsupported data type \" + dtype);\n        }\n        var randGauss = new rand_1.MPRandGauss(mean, stdDev, dtype, false, seed);\n        var res = ArrayOps.buffer(shape, dtype);\n        for (var i = 0; i < res.values.length; i++) {\n            res.values[i] = randGauss.nextValue();\n        }\n        return res.toTensor();\n    };\n    ArrayOps.truncatedNormal = function (shape, mean, stdDev, dtype, seed) {\n        if (mean === void 0) { mean = 0; }\n        if (stdDev === void 0) { stdDev = 1; }\n        if (dtype != null && dtype === 'bool') {\n            throw new Error(\"Unsupported data type \" + dtype);\n        }\n        var randGauss = new rand_1.MPRandGauss(mean, stdDev, dtype, true, seed);\n        var res = ArrayOps.buffer(shape, dtype);\n        for (var i = 0; i < res.values.length; i++) {\n            res.values[i] = randGauss.nextValue();\n        }\n        return res.toTensor();\n    };\n    ArrayOps.randomUniform = function (shape, minval, maxval, dtype) {\n        if (minval === void 0) { minval = 0; }\n        if (maxval === void 0) { maxval = 1; }\n        if (dtype === void 0) { dtype = 'float32'; }\n        var res = ArrayOps.buffer(shape, dtype);\n        for (var i = 0; i < res.values.length; i++) {\n            res.values[i] = util.randUniform(minval, maxval);\n        }\n        return res.toTensor();\n    };\n    ArrayOps.rand = function (shape, randFunction, dtype) {\n        var size = util.sizeFromShape(shape);\n        var values = null;\n        if (dtype == null || dtype === 'float32') {\n            values = new Float32Array(size);\n        }\n        else if (dtype === 'int32') {\n            values = new Int32Array(size);\n        }\n        else if (dtype === 'bool') {\n            values = new Uint8Array(size);\n        }\n        else {\n            throw new Error(\"Unknown data type \" + dtype);\n        }\n        for (var i = 0; i < size; i++) {\n            values[i] = randFunction();\n        }\n        return tensor_1.Tensor.make(shape, { values: values }, dtype);\n    };\n    ArrayOps.multinomial = function (logits, numSamples, seed, normalized) {\n        if (normalized === void 0) { normalized = false; }\n        var numOutcomes = logits.size;\n        var origRank = logits.rank;\n        if (numOutcomes < 2) {\n            throw new Error(\"Error in multinomial: you need at least 2 outcomes, but got \" +\n                (numOutcomes + \".\"));\n        }\n        if (origRank > 2) {\n            throw new Error(\"Rank of probabilities must be 1 or 2, but is \" + origRank);\n        }\n        if (!normalized) {\n            logits = ops.softmax(logits);\n        }\n        seed = seed || Math.random();\n        var prob2D = origRank === 1 ? logits.as2D(1, -1) : logits;\n        var res = environment_1.ENV.engine.runKernel(function (backend) { return backend.multinomial(prob2D, numSamples, seed); }, { prob2D: prob2D });\n        return origRank === 1 ? res.as1D() : res;\n    };\n    ArrayOps.oneHot = function (indices, depth, onValue, offValue) {\n        if (onValue === void 0) { onValue = 1; }\n        if (offValue === void 0) { offValue = 0; }\n        if (depth < 2) {\n            throw new Error(\"Error in oneHot: depth must be >=2, but it is \" + depth);\n        }\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.oneHot(indices, depth, onValue, offValue); }, { indices: indices });\n    };\n    ArrayOps.fromPixels = function (pixels, numChannels) {\n        if (numChannels === void 0) { numChannels = 3; }\n        if (numChannels > 4) {\n            throw new Error('Cannot construct Tensor with more than 4 channels from pixels.');\n        }\n        return environment_1.ENV.engine.fromPixels(pixels, numChannels);\n    };\n    ArrayOps.reshape = function (x, shape) {\n        shape = util.inferFromImplicitShape(shape, x.size);\n        util.assert(x.size === util.sizeFromShape(shape), 'new shape and old shape must have the same number of elements.');\n        var grad = function (dy) {\n            return { x: function () { return dy.reshape(x.shape); } };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.reshape(x, shape); }, { x: x }, grad);\n    };\n    ArrayOps.squeeze = function (x, axis) {\n        return ArrayOps.reshape(x, util.squeezeShape(x.shape, axis).newShape);\n    };\n    ArrayOps.cast = function (x, dtype) {\n        var grad = function (dy) {\n            return { x: function () { return dy.clone(); } };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.cast(x, dtype); }, { x: x }, grad);\n    };\n    ArrayOps.tile = function (x, reps) {\n        util.assert(x.rank === reps.length, \"Error in transpose: rank of input \" + x.rank + \" \" +\n            (\"must match length of reps \" + reps + \".\"));\n        var grad = function (dy) {\n            var derX = function () {\n                var xGrad = ArrayOps.zerosLike(x);\n                if (x.rank === 1) {\n                    for (var i = 0; i < reps[0]; ++i) {\n                        xGrad = xGrad.add(dy.slice([i * x.shape[0]], [x.shape[0]]));\n                    }\n                }\n                else if (x.rank === 2) {\n                    for (var i = 0; i < reps[0]; ++i) {\n                        for (var j = 0; j < reps[1]; ++j) {\n                            xGrad = xGrad.add(dy.slice([i * x.shape[0], j * x.shape[1]], [x.shape[0], x.shape[1]]));\n                        }\n                    }\n                }\n                else if (x.rank === 3) {\n                    for (var i = 0; i < reps[0]; ++i) {\n                        for (var j = 0; j < reps[1]; ++j) {\n                            for (var k = 0; k < reps[2]; ++k) {\n                                xGrad = xGrad.add(dy.slice([i * x.shape[0], j * x.shape[1], k * x.shape[2]], [x.shape[0], x.shape[1], x.shape[2]]));\n                            }\n                        }\n                    }\n                }\n                else if (x.rank === 4) {\n                    for (var i = 0; i < reps[0]; ++i) {\n                        for (var j = 0; j < reps[1]; ++j) {\n                            for (var k = 0; k < reps[2]; ++k) {\n                                for (var l = 0; l < reps[3]; ++l) {\n                                    xGrad = xGrad.add(dy.slice([\n                                        i * x.shape[0], j * x.shape[1], k * x.shape[2],\n                                        l * x.shape[3]\n                                    ], [x.shape[0], x.shape[1], x.shape[2], x.shape[3]]));\n                                }\n                            }\n                        }\n                    }\n                }\n                else {\n                    throw new Error(\"Gradient for tile operation is not implemented for rank-\" +\n                        (x.rank + \" tensors yet.\"));\n                }\n                return xGrad;\n            };\n            return { x: derX };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.tile(x, reps); }, { x: x }, grad);\n    };\n    ArrayOps.gather = function (x, indices, axis) {\n        if (axis === void 0) { axis = 0; }\n        var axes = axis_util_1.parseAxisParam(axis, x.shape);\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.gather(x, indices, axes[0]); }, { x: x, indices: indices });\n    };\n    ArrayOps.pad1d = function (x, paddings, constantValue) {\n        if (constantValue === void 0) { constantValue = 0; }\n        util.assert(paddings.length === 2, 'Invalid number of paddings. Must be length of 2.');\n        return ArrayOps.pad(x, [paddings], constantValue);\n    };\n    ArrayOps.pad2d = function (x, paddings, constantValue) {\n        if (constantValue === void 0) { constantValue = 0; }\n        util.assert(paddings.length === 2 && paddings[0].length === 2 &&\n            paddings[1].length === 2, 'Invalid number of paddings. Must be length of 2 each.');\n        return ArrayOps.pad(x, paddings, constantValue);\n    };\n    ArrayOps.pad3d = function (x, paddings, constantValue) {\n        if (constantValue === void 0) { constantValue = 0; }\n        util.assert(paddings.length === 3 && paddings[0].length === 2 &&\n            paddings[1].length === 2 && paddings[2].length === 2, 'Invalid number of paddings. Must be length of 2 each.');\n        return ArrayOps.pad(x, paddings, constantValue);\n    };\n    ArrayOps.pad4d = function (x, paddings, constantValue) {\n        if (constantValue === void 0) { constantValue = 0; }\n        util.assert(paddings.length === 4 && paddings[0].length === 2 &&\n            paddings[1].length === 2 && paddings[2].length === 2 &&\n            paddings[3].length === 2, 'Invalid number of paddings. Must be length of 2 each.');\n        return ArrayOps.pad(x, paddings, constantValue);\n    };\n    ArrayOps.pad = function (x, paddings, constantValue) {\n        if (constantValue === void 0) { constantValue = 0; }\n        if (x.rank === 0) {\n            throw new Error('pad(scalar) is not defined. Pass non-scalar to pad');\n        }\n        var begin = paddings.map(function (p) { return p[0]; });\n        var grad = function (dy) {\n            return { x: function () { return dy.slice(begin, x.shape); } };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.pad(x, paddings, constantValue); }, { x: x }, grad);\n    };\n    ArrayOps.stack = function (tensors, axis) {\n        if (axis === void 0) { axis = 0; }\n        util.assert(tensors.length >= 2, 'Pass at least two tensors to dl.stack');\n        var rank = tensors[0].rank;\n        var shape = tensors[0].shape;\n        var dtype = tensors[0].dtype;\n        util.assert(axis <= rank, 'Axis must be <= rank of the tensor');\n        tensors.forEach(function (t) {\n            util.assertShapesMatch(shape, t.shape, 'All tensors passed to stack must have matching shapes');\n        });\n        tensors.forEach(function (t) {\n            util.assert(dtype === t.dtype, 'All tensors passed to stack must have matching dtypes');\n        });\n        var expandedTensors = tensors.map(function (t) { return t.expandDims(axis); });\n        return concat_1.ConcatOps.concat(expandedTensors, axis);\n    };\n    ArrayOps.expandDims = function (x, axis) {\n        if (axis === void 0) { axis = 0; }\n        util.assert(axis <= x.rank, 'Axis must be <= rank of the tensor');\n        var newShape = x.shape.slice();\n        newShape.splice(axis, 0, 1);\n        return ArrayOps.reshape(x, newShape);\n    };\n    ArrayOps.linspace = function (start, stop, num) {\n        if (num === 0) {\n            throw new Error('Cannot request zero samples');\n        }\n        var step = (stop - start) / (num - 1);\n        var values = makeZerosTypedArray(num, 'float32');\n        values[0] = start;\n        for (var i = 1; i < values.length; i++) {\n            values[i] = values[i - 1] + step;\n        }\n        return ArrayOps.tensor1d(values, 'float32');\n    };\n    ArrayOps.range = function (start, stop, step, dtype) {\n        if (step === void 0) { step = 1; }\n        if (dtype === void 0) { dtype = 'float32'; }\n        if (step === 0) {\n            throw new Error('Cannot have a step of zero');\n        }\n        var sameStartStop = start === stop;\n        var increasingRangeNegativeStep = start < stop && step < 0;\n        var decreasingRangePositiveStep = stop < start && step > 1;\n        if (sameStartStop || increasingRangeNegativeStep ||\n            decreasingRangePositiveStep) {\n            return ArrayOps.zeros([0], dtype);\n        }\n        var numElements = Math.abs(Math.ceil((stop - start) / step));\n        var values = makeZerosTypedArray(numElements, dtype);\n        if (stop < start && step === 1) {\n            step = -1;\n        }\n        values[0] = start;\n        for (var i = 1; i < values.length; i++) {\n            values[i] = values[i - 1] + step;\n        }\n        return ArrayOps.tensor1d(values, dtype);\n    };\n    ArrayOps.buffer = function (shape, dtype, values) {\n        if (dtype === void 0) { dtype = 'float32'; }\n        return new tensor_1.TensorBuffer(shape, dtype, values);\n    };\n    ArrayOps.print = function (x, verbose) {\n        if (verbose === void 0) { verbose = false; }\n        console.log(tensor_util.tensorToString(x, verbose));\n    };\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })\n    ], ArrayOps, \"tensor\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })\n    ], ArrayOps, \"scalar\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })\n    ], ArrayOps, \"tensor1d\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })\n    ], ArrayOps, \"tensor2d\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })\n    ], ArrayOps, \"tensor3d\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })\n    ], ArrayOps, \"tensor4d\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }),\n        operation_1.operation\n    ], ArrayOps, \"ones\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }),\n        operation_1.operation\n    ], ArrayOps, \"zeros\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }),\n        operation_1.operation\n    ], ArrayOps, \"fill\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }),\n        operation_1.operation\n    ], ArrayOps, \"onesLike\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }),\n        operation_1.operation\n    ], ArrayOps, \"zerosLike\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }),\n        operation_1.operation\n    ], ArrayOps, \"clone\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }),\n        operation_1.operation\n    ], ArrayOps, \"randomNormal\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }),\n        operation_1.operation\n    ], ArrayOps, \"truncatedNormal\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }),\n        operation_1.operation\n    ], ArrayOps, \"randomUniform\", null);\n    __decorate([\n        operation_1.operation\n    ], ArrayOps, \"rand\", null);\n    __decorate([\n        operation_1.operation\n    ], ArrayOps, \"multinomial\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }),\n        operation_1.operation\n    ], ArrayOps, \"oneHot\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }),\n        operation_1.operation\n    ], ArrayOps, \"fromPixels\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Transformations' }),\n        operation_1.operation\n    ], ArrayOps, \"reshape\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Transformations' })\n    ], ArrayOps, \"squeeze\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Transformations' }),\n        operation_1.operation\n    ], ArrayOps, \"cast\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Slicing and Joining' }),\n        operation_1.operation\n    ], ArrayOps, \"tile\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Slicing and Joining' }),\n        operation_1.operation\n    ], ArrayOps, \"gather\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Transformations' }),\n        operation_1.operation\n    ], ArrayOps, \"pad\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Slicing and Joining' }),\n        operation_1.operation\n    ], ArrayOps, \"stack\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Transformations' }),\n        operation_1.operation\n    ], ArrayOps, \"expandDims\", null);\n    __decorate([\n        operation_1.operation,\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })\n    ], ArrayOps, \"linspace\", null);\n    __decorate([\n        operation_1.operation,\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })\n    ], ArrayOps, \"range\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })\n    ], ArrayOps, \"buffer\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })\n    ], ArrayOps, \"print\", null);\n    return ArrayOps;\n}());\nexports.ArrayOps = ArrayOps;\nfunction makeZerosTypedArray(size, dtype) {\n    if (dtype == null || dtype === 'float32') {\n        return new Float32Array(size);\n    }\n    else if (dtype === 'int32') {\n        return new Int32Array(size);\n    }\n    else if (dtype === 'bool') {\n        return new Uint8Array(size);\n    }\n    else {\n        throw new Error(\"Unknown data type $ {dtype}\");\n    }\n}\nfunction makeOnesTypedArray(size, dtype) {\n    var array = makeZerosTypedArray(size, dtype);\n    for (var i = 0; i < array.length; i++) {\n        array[i] = 1;\n    }\n    return array;\n}\nfunction toTypedArray(a, dtype) {\n    if (noConversionNeeded(a, dtype)) {\n        return a;\n    }\n    if (Array.isArray(a)) {\n        a = util.flatten(a);\n    }\n    return util.copyTypedArray(a, dtype);\n}\nfunction noConversionNeeded(a, dtype) {\n    return (a instanceof Float32Array && dtype === 'float32') ||\n        (a instanceof Int32Array && dtype === 'int32') ||\n        (a instanceof Uint8Array && dtype === 'bool');\n}\n","map":{"mappings":[{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}}],"sources":{"node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js":"\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = require(\"../doc\");\nvar environment_1 = require(\"../environment\");\nvar tensor_1 = require(\"../tensor\");\nvar tensor_util = require(\"../tensor_util\");\nvar util = require(\"../util\");\nvar axis_util_1 = require(\"./axis_util\");\nvar concat_1 = require(\"./concat\");\nvar operation_1 = require(\"./operation\");\nvar ops = require(\"./ops\");\nvar rand_1 = require(\"./rand\");\nvar ArrayOps = (function () {\n    function ArrayOps() {\n    }\n    ArrayOps.tensor = function (values, shape, dtype) {\n        if (dtype === void 0) { dtype = 'float32'; }\n        var inferredShape = util.inferShape(values);\n        if (shape != null && inferredShape.length !== 1) {\n            util.assertShapesMatch(shape, inferredShape, \"Error creating a new Tensor. \" +\n                (\"Inferred shape (\" + inferredShape + \") does not match the \") +\n                (\"provided shape (\" + shape + \"). \"));\n        }\n        if (!util.isTypedArray(values) && !Array.isArray(values)) {\n            values = [values];\n        }\n        shape = shape || inferredShape;\n        return tensor_1.Tensor.make(shape, { values: toTypedArray(values, dtype) }, dtype);\n    };\n    ArrayOps.scalar = function (value, dtype) {\n        if (dtype === void 0) { dtype = 'float32'; }\n        if (util.isTypedArray(value) || Array.isArray(value)) {\n            throw new Error('Error creating a new Scalar: value must be a primitive ' +\n                '(number|boolean)');\n        }\n        return ArrayOps.tensor(value, [], dtype);\n    };\n    ArrayOps.tensor1d = function (values, dtype) {\n        if (dtype === void 0) { dtype = 'float32'; }\n        var inferredShape = util.inferShape(values);\n        if (inferredShape.length !== 1) {\n            throw new Error('Error creating a new Tensor1D: values must be a flat/TypedArray');\n        }\n        return ArrayOps.tensor(values, inferredShape, dtype);\n    };\n    ArrayOps.tensor2d = function (values, shape, dtype) {\n        if (dtype === void 0) { dtype = 'float32'; }\n        var inferredShape = util.inferShape(values);\n        if (inferredShape.length !== 2 && inferredShape.length !== 1) {\n            throw new Error('Error creating a new Tensor2D: values must be number[][] ' +\n                'or flat/TypedArray');\n        }\n        shape = shape || inferredShape;\n        return ArrayOps.tensor(values, shape, dtype);\n    };\n    ArrayOps.tensor3d = function (values, shape, dtype) {\n        if (dtype === void 0) { dtype = 'float32'; }\n        var inferredShape = util.inferShape(values);\n        if (inferredShape.length !== 3 && inferredShape.length !== 1) {\n            throw new Error('Error creating a new Tensor3D: values must be number[][][]' +\n                'or flat/TypedArray');\n        }\n        shape = shape || inferredShape;\n        return ArrayOps.tensor(values, shape, dtype);\n    };\n    ArrayOps.tensor4d = function (values, shape, dtype) {\n        if (dtype === void 0) { dtype = 'float32'; }\n        var inferredShape = util.inferShape(values);\n        if (inferredShape.length !== 4 && inferredShape.length !== 1) {\n            throw new Error('Error creating a new Tensor4D: values must be number[][][][]' +\n                'or flat/TypedArray');\n        }\n        shape = shape || inferredShape;\n        return ArrayOps.tensor(values, shape, dtype);\n    };\n    ArrayOps.ones = function (shape, dtype) {\n        if (dtype === void 0) { dtype = 'float32'; }\n        var values = makeOnesTypedArray(util.sizeFromShape(shape), dtype);\n        return tensor_1.Tensor.make(shape, { values: values }, dtype);\n    };\n    ArrayOps.zeros = function (shape, dtype) {\n        if (dtype === void 0) { dtype = 'float32'; }\n        var values = makeZerosTypedArray(util.sizeFromShape(shape), dtype);\n        return tensor_1.Tensor.make(shape, { values: values }, dtype);\n    };\n    ArrayOps.fill = function (shape, value, dtype) {\n        if (dtype === void 0) { dtype = 'float32'; }\n        var values = util.getTypedArrayFromDType(dtype, util.sizeFromShape(shape));\n        values.fill(value);\n        return tensor_1.Tensor.make(shape, { values: values }, dtype);\n    };\n    ArrayOps.onesLike = function (x) {\n        return ArrayOps.ones(x.shape, x.dtype);\n    };\n    ArrayOps.zerosLike = function (x) {\n        return ArrayOps.zeros(x.shape, x.dtype);\n    };\n    ArrayOps.clone = function (x) {\n        return tensor_1.Tensor.make(x.shape, { dataId: x.dataId }, x.dtype);\n    };\n    ArrayOps.randomNormal = function (shape, mean, stdDev, dtype, seed) {\n        if (mean === void 0) { mean = 0; }\n        if (stdDev === void 0) { stdDev = 1; }\n        if (dtype != null && dtype === 'bool') {\n            throw new Error(\"Unsupported data type \" + dtype);\n        }\n        var randGauss = new rand_1.MPRandGauss(mean, stdDev, dtype, false, seed);\n        var res = ArrayOps.buffer(shape, dtype);\n        for (var i = 0; i < res.values.length; i++) {\n            res.values[i] = randGauss.nextValue();\n        }\n        return res.toTensor();\n    };\n    ArrayOps.truncatedNormal = function (shape, mean, stdDev, dtype, seed) {\n        if (mean === void 0) { mean = 0; }\n        if (stdDev === void 0) { stdDev = 1; }\n        if (dtype != null && dtype === 'bool') {\n            throw new Error(\"Unsupported data type \" + dtype);\n        }\n        var randGauss = new rand_1.MPRandGauss(mean, stdDev, dtype, true, seed);\n        var res = ArrayOps.buffer(shape, dtype);\n        for (var i = 0; i < res.values.length; i++) {\n            res.values[i] = randGauss.nextValue();\n        }\n        return res.toTensor();\n    };\n    ArrayOps.randomUniform = function (shape, minval, maxval, dtype) {\n        if (minval === void 0) { minval = 0; }\n        if (maxval === void 0) { maxval = 1; }\n        if (dtype === void 0) { dtype = 'float32'; }\n        var res = ArrayOps.buffer(shape, dtype);\n        for (var i = 0; i < res.values.length; i++) {\n            res.values[i] = util.randUniform(minval, maxval);\n        }\n        return res.toTensor();\n    };\n    ArrayOps.rand = function (shape, randFunction, dtype) {\n        var size = util.sizeFromShape(shape);\n        var values = null;\n        if (dtype == null || dtype === 'float32') {\n            values = new Float32Array(size);\n        }\n        else if (dtype === 'int32') {\n            values = new Int32Array(size);\n        }\n        else if (dtype === 'bool') {\n            values = new Uint8Array(size);\n        }\n        else {\n            throw new Error(\"Unknown data type \" + dtype);\n        }\n        for (var i = 0; i < size; i++) {\n            values[i] = randFunction();\n        }\n        return tensor_1.Tensor.make(shape, { values: values }, dtype);\n    };\n    ArrayOps.multinomial = function (logits, numSamples, seed, normalized) {\n        if (normalized === void 0) { normalized = false; }\n        var numOutcomes = logits.size;\n        var origRank = logits.rank;\n        if (numOutcomes < 2) {\n            throw new Error(\"Error in multinomial: you need at least 2 outcomes, but got \" +\n                (numOutcomes + \".\"));\n        }\n        if (origRank > 2) {\n            throw new Error(\"Rank of probabilities must be 1 or 2, but is \" + origRank);\n        }\n        if (!normalized) {\n            logits = ops.softmax(logits);\n        }\n        seed = seed || Math.random();\n        var prob2D = origRank === 1 ? logits.as2D(1, -1) : logits;\n        var res = environment_1.ENV.engine.runKernel(function (backend) { return backend.multinomial(prob2D, numSamples, seed); }, { prob2D: prob2D });\n        return origRank === 1 ? res.as1D() : res;\n    };\n    ArrayOps.oneHot = function (indices, depth, onValue, offValue) {\n        if (onValue === void 0) { onValue = 1; }\n        if (offValue === void 0) { offValue = 0; }\n        if (depth < 2) {\n            throw new Error(\"Error in oneHot: depth must be >=2, but it is \" + depth);\n        }\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.oneHot(indices, depth, onValue, offValue); }, { indices: indices });\n    };\n    ArrayOps.fromPixels = function (pixels, numChannels) {\n        if (numChannels === void 0) { numChannels = 3; }\n        if (numChannels > 4) {\n            throw new Error('Cannot construct Tensor with more than 4 channels from pixels.');\n        }\n        return environment_1.ENV.engine.fromPixels(pixels, numChannels);\n    };\n    ArrayOps.reshape = function (x, shape) {\n        shape = util.inferFromImplicitShape(shape, x.size);\n        util.assert(x.size === util.sizeFromShape(shape), 'new shape and old shape must have the same number of elements.');\n        var grad = function (dy) {\n            return { x: function () { return dy.reshape(x.shape); } };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.reshape(x, shape); }, { x: x }, grad);\n    };\n    ArrayOps.squeeze = function (x, axis) {\n        return ArrayOps.reshape(x, util.squeezeShape(x.shape, axis).newShape);\n    };\n    ArrayOps.cast = function (x, dtype) {\n        var grad = function (dy) {\n            return { x: function () { return dy.clone(); } };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.cast(x, dtype); }, { x: x }, grad);\n    };\n    ArrayOps.tile = function (x, reps) {\n        util.assert(x.rank === reps.length, \"Error in transpose: rank of input \" + x.rank + \" \" +\n            (\"must match length of reps \" + reps + \".\"));\n        var grad = function (dy) {\n            var derX = function () {\n                var xGrad = ArrayOps.zerosLike(x);\n                if (x.rank === 1) {\n                    for (var i = 0; i < reps[0]; ++i) {\n                        xGrad = xGrad.add(dy.slice([i * x.shape[0]], [x.shape[0]]));\n                    }\n                }\n                else if (x.rank === 2) {\n                    for (var i = 0; i < reps[0]; ++i) {\n                        for (var j = 0; j < reps[1]; ++j) {\n                            xGrad = xGrad.add(dy.slice([i * x.shape[0], j * x.shape[1]], [x.shape[0], x.shape[1]]));\n                        }\n                    }\n                }\n                else if (x.rank === 3) {\n                    for (var i = 0; i < reps[0]; ++i) {\n                        for (var j = 0; j < reps[1]; ++j) {\n                            for (var k = 0; k < reps[2]; ++k) {\n                                xGrad = xGrad.add(dy.slice([i * x.shape[0], j * x.shape[1], k * x.shape[2]], [x.shape[0], x.shape[1], x.shape[2]]));\n                            }\n                        }\n                    }\n                }\n                else if (x.rank === 4) {\n                    for (var i = 0; i < reps[0]; ++i) {\n                        for (var j = 0; j < reps[1]; ++j) {\n                            for (var k = 0; k < reps[2]; ++k) {\n                                for (var l = 0; l < reps[3]; ++l) {\n                                    xGrad = xGrad.add(dy.slice([\n                                        i * x.shape[0], j * x.shape[1], k * x.shape[2],\n                                        l * x.shape[3]\n                                    ], [x.shape[0], x.shape[1], x.shape[2], x.shape[3]]));\n                                }\n                            }\n                        }\n                    }\n                }\n                else {\n                    throw new Error(\"Gradient for tile operation is not implemented for rank-\" +\n                        (x.rank + \" tensors yet.\"));\n                }\n                return xGrad;\n            };\n            return { x: derX };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.tile(x, reps); }, { x: x }, grad);\n    };\n    ArrayOps.gather = function (x, indices, axis) {\n        if (axis === void 0) { axis = 0; }\n        var axes = axis_util_1.parseAxisParam(axis, x.shape);\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.gather(x, indices, axes[0]); }, { x: x, indices: indices });\n    };\n    ArrayOps.pad1d = function (x, paddings, constantValue) {\n        if (constantValue === void 0) { constantValue = 0; }\n        util.assert(paddings.length === 2, 'Invalid number of paddings. Must be length of 2.');\n        return ArrayOps.pad(x, [paddings], constantValue);\n    };\n    ArrayOps.pad2d = function (x, paddings, constantValue) {\n        if (constantValue === void 0) { constantValue = 0; }\n        util.assert(paddings.length === 2 && paddings[0].length === 2 &&\n            paddings[1].length === 2, 'Invalid number of paddings. Must be length of 2 each.');\n        return ArrayOps.pad(x, paddings, constantValue);\n    };\n    ArrayOps.pad3d = function (x, paddings, constantValue) {\n        if (constantValue === void 0) { constantValue = 0; }\n        util.assert(paddings.length === 3 && paddings[0].length === 2 &&\n            paddings[1].length === 2 && paddings[2].length === 2, 'Invalid number of paddings. Must be length of 2 each.');\n        return ArrayOps.pad(x, paddings, constantValue);\n    };\n    ArrayOps.pad4d = function (x, paddings, constantValue) {\n        if (constantValue === void 0) { constantValue = 0; }\n        util.assert(paddings.length === 4 && paddings[0].length === 2 &&\n            paddings[1].length === 2 && paddings[2].length === 2 &&\n            paddings[3].length === 2, 'Invalid number of paddings. Must be length of 2 each.');\n        return ArrayOps.pad(x, paddings, constantValue);\n    };\n    ArrayOps.pad = function (x, paddings, constantValue) {\n        if (constantValue === void 0) { constantValue = 0; }\n        if (x.rank === 0) {\n            throw new Error('pad(scalar) is not defined. Pass non-scalar to pad');\n        }\n        var begin = paddings.map(function (p) { return p[0]; });\n        var grad = function (dy) {\n            return { x: function () { return dy.slice(begin, x.shape); } };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.pad(x, paddings, constantValue); }, { x: x }, grad);\n    };\n    ArrayOps.stack = function (tensors, axis) {\n        if (axis === void 0) { axis = 0; }\n        util.assert(tensors.length >= 2, 'Pass at least two tensors to dl.stack');\n        var rank = tensors[0].rank;\n        var shape = tensors[0].shape;\n        var dtype = tensors[0].dtype;\n        util.assert(axis <= rank, 'Axis must be <= rank of the tensor');\n        tensors.forEach(function (t) {\n            util.assertShapesMatch(shape, t.shape, 'All tensors passed to stack must have matching shapes');\n        });\n        tensors.forEach(function (t) {\n            util.assert(dtype === t.dtype, 'All tensors passed to stack must have matching dtypes');\n        });\n        var expandedTensors = tensors.map(function (t) { return t.expandDims(axis); });\n        return concat_1.ConcatOps.concat(expandedTensors, axis);\n    };\n    ArrayOps.expandDims = function (x, axis) {\n        if (axis === void 0) { axis = 0; }\n        util.assert(axis <= x.rank, 'Axis must be <= rank of the tensor');\n        var newShape = x.shape.slice();\n        newShape.splice(axis, 0, 1);\n        return ArrayOps.reshape(x, newShape);\n    };\n    ArrayOps.linspace = function (start, stop, num) {\n        if (num === 0) {\n            throw new Error('Cannot request zero samples');\n        }\n        var step = (stop - start) / (num - 1);\n        var values = makeZerosTypedArray(num, 'float32');\n        values[0] = start;\n        for (var i = 1; i < values.length; i++) {\n            values[i] = values[i - 1] + step;\n        }\n        return ArrayOps.tensor1d(values, 'float32');\n    };\n    ArrayOps.range = function (start, stop, step, dtype) {\n        if (step === void 0) { step = 1; }\n        if (dtype === void 0) { dtype = 'float32'; }\n        if (step === 0) {\n            throw new Error('Cannot have a step of zero');\n        }\n        var sameStartStop = start === stop;\n        var increasingRangeNegativeStep = start < stop && step < 0;\n        var decreasingRangePositiveStep = stop < start && step > 1;\n        if (sameStartStop || increasingRangeNegativeStep ||\n            decreasingRangePositiveStep) {\n            return ArrayOps.zeros([0], dtype);\n        }\n        var numElements = Math.abs(Math.ceil((stop - start) / step));\n        var values = makeZerosTypedArray(numElements, dtype);\n        if (stop < start && step === 1) {\n            step = -1;\n        }\n        values[0] = start;\n        for (var i = 1; i < values.length; i++) {\n            values[i] = values[i - 1] + step;\n        }\n        return ArrayOps.tensor1d(values, dtype);\n    };\n    ArrayOps.buffer = function (shape, dtype, values) {\n        if (dtype === void 0) { dtype = 'float32'; }\n        return new tensor_1.TensorBuffer(shape, dtype, values);\n    };\n    ArrayOps.print = function (x, verbose) {\n        if (verbose === void 0) { verbose = false; }\n        console.log(tensor_util.tensorToString(x, verbose));\n    };\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })\n    ], ArrayOps, \"tensor\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })\n    ], ArrayOps, \"scalar\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })\n    ], ArrayOps, \"tensor1d\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })\n    ], ArrayOps, \"tensor2d\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })\n    ], ArrayOps, \"tensor3d\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })\n    ], ArrayOps, \"tensor4d\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }),\n        operation_1.operation\n    ], ArrayOps, \"ones\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }),\n        operation_1.operation\n    ], ArrayOps, \"zeros\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }),\n        operation_1.operation\n    ], ArrayOps, \"fill\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }),\n        operation_1.operation\n    ], ArrayOps, \"onesLike\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }),\n        operation_1.operation\n    ], ArrayOps, \"zerosLike\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }),\n        operation_1.operation\n    ], ArrayOps, \"clone\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }),\n        operation_1.operation\n    ], ArrayOps, \"randomNormal\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }),\n        operation_1.operation\n    ], ArrayOps, \"truncatedNormal\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }),\n        operation_1.operation\n    ], ArrayOps, \"randomUniform\", null);\n    __decorate([\n        operation_1.operation\n    ], ArrayOps, \"rand\", null);\n    __decorate([\n        operation_1.operation\n    ], ArrayOps, \"multinomial\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }),\n        operation_1.operation\n    ], ArrayOps, \"oneHot\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }),\n        operation_1.operation\n    ], ArrayOps, \"fromPixels\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Transformations' }),\n        operation_1.operation\n    ], ArrayOps, \"reshape\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Transformations' })\n    ], ArrayOps, \"squeeze\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Transformations' }),\n        operation_1.operation\n    ], ArrayOps, \"cast\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Slicing and Joining' }),\n        operation_1.operation\n    ], ArrayOps, \"tile\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Slicing and Joining' }),\n        operation_1.operation\n    ], ArrayOps, \"gather\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Transformations' }),\n        operation_1.operation\n    ], ArrayOps, \"pad\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Slicing and Joining' }),\n        operation_1.operation\n    ], ArrayOps, \"stack\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Transformations' }),\n        operation_1.operation\n    ], ArrayOps, \"expandDims\", null);\n    __decorate([\n        operation_1.operation,\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })\n    ], ArrayOps, \"linspace\", null);\n    __decorate([\n        operation_1.operation,\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })\n    ], ArrayOps, \"range\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })\n    ], ArrayOps, \"buffer\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })\n    ], ArrayOps, \"print\", null);\n    return ArrayOps;\n}());\nexports.ArrayOps = ArrayOps;\nfunction makeZerosTypedArray(size, dtype) {\n    if (dtype == null || dtype === 'float32') {\n        return new Float32Array(size);\n    }\n    else if (dtype === 'int32') {\n        return new Int32Array(size);\n    }\n    else if (dtype === 'bool') {\n        return new Uint8Array(size);\n    }\n    else {\n        throw new Error(\"Unknown data type $ {dtype}\");\n    }\n}\nfunction makeOnesTypedArray(size, dtype) {\n    var array = makeZerosTypedArray(size, dtype);\n    for (var i = 0; i < array.length; i++) {\n        array[i] = 1;\n    }\n    return array;\n}\nfunction toTypedArray(a, dtype) {\n    if (noConversionNeeded(a, dtype)) {\n        return a;\n    }\n    if (Array.isArray(a)) {\n        a = util.flatten(a);\n    }\n    return util.copyTypedArray(a, dtype);\n}\nfunction noConversionNeeded(a, dtype) {\n    return (a instanceof Float32Array && dtype === 'float32') ||\n        (a instanceof Int32Array && dtype === 'int32') ||\n        (a instanceof Uint8Array && dtype === 'bool');\n}\n"},"lineCount":523}},"hash":"aac82bfe7dd8e5598c37b4fb4739f8e0","cacheData":{"env":{}}}