{"dependencies":[{"name":"/home/mishig/Desktop/vizgithub/frontend/package.json","includedInParent":true,"mtime":1523230167415},{"name":"/home/mishig/Desktop/vizgithub/frontend/node_modules/@tensorflow/tfjs-layers/package.json","includedInParent":true,"mtime":1522260134000},{"name":"../errors","loc":{"line":3,"column":23}},{"name":"./topology","loc":{"line":4,"column":25}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar errors_1 = require(\"../errors\");\nvar topology_1 = require(\"./topology\");\nfunction assertFeedCompatibility(key, val) {\n    if (key.dtype != null && key.dtype !== val.dtype) {\n        throw new errors_1.ValueError(\"The dtype of the feed (\" + val.dtype + \") is incompatible with that of \" +\n            (\"the key '\" + key.name + \"' (\" + key.dtype + \").\"));\n    }\n    if (key.shape != null) {\n        if (key.shape.length !== val.shape.length) {\n            throw new errors_1.ValueError(\"The rank of feed (\" + val.shape.length + \") does not match the rank of \" +\n                (\"the key (\" + key.shape.length + \").\"));\n        }\n        for (var i = 0; i < key.shape.length; ++i) {\n            if (key.shape[i] != null && key.shape[i] !== val.shape[i]) {\n                throw new errors_1.ValueError(\"The \" + i + \"-th dimension of the feed (\" + val.shape[i] + \") is \" +\n                    (\"incompatible with that of the key (\" + key.shape[i] + \").\"));\n            }\n        }\n    }\n}\nvar FeedDict = (function () {\n    function FeedDict(feeds) {\n        this.id2Value = {};\n        if (feeds instanceof FeedDict) {\n            for (var id in feeds.id2Value) {\n                this.id2Value[id] = feeds.id2Value[id];\n            }\n        }\n        else {\n            if (feeds == null) {\n                return;\n            }\n            for (var _i = 0, feeds_1 = feeds; _i < feeds_1.length; _i++) {\n                var feed = feeds_1[_i];\n                this.add(feed.key, feed.value);\n            }\n        }\n    }\n    FeedDict.prototype.add = function (key, value) {\n        assertFeedCompatibility(key, value);\n        if (this.id2Value[key.id] == null) {\n            this.id2Value[key.id] = value;\n        }\n        else {\n            throw new errors_1.ValueError(\"Duplicate key: name=\" + key.name + \", id=\" + key.id);\n        }\n        return this;\n    };\n    FeedDict.prototype.addFeed = function (feed) {\n        this.add(feed.key, feed.value);\n    };\n    FeedDict.prototype.hasKey = function (key) {\n        return this.id2Value[key.id] != null;\n    };\n    FeedDict.prototype.getValue = function (key) {\n        if (this.id2Value[key.id] == null) {\n            throw new errors_1.ValueError(\"Nonexistent key: \" + JSON.stringify(key));\n        }\n        else {\n            return this.id2Value[key.id];\n        }\n    };\n    return FeedDict;\n}());\nexports.FeedDict = FeedDict;\nfunction execute(fetches, feedDict, kwargs) {\n    var arrayFetches = Array.isArray(fetches);\n    var fetchArray = arrayFetches ? fetches : [fetches];\n    var outputs = [];\n    var internalFeedDict = new FeedDict(feedDict);\n    for (var _i = 0, fetchArray_1 = fetchArray; _i < fetchArray_1.length; _i++) {\n        var fetch_1 = fetchArray_1[_i];\n        outputs.push(executeInternal(fetch_1, internalFeedDict, kwargs));\n    }\n    return arrayFetches ? outputs : outputs[0];\n}\nexports.execute = execute;\nfunction executeInternal(fetch, internalFeedDict, kwargs) {\n    if (internalFeedDict.hasKey(fetch)) {\n        return internalFeedDict.getValue(fetch);\n    }\n    if (fetch.sourceLayer instanceof topology_1.InputLayer) {\n        throw new errors_1.ValueError(\"Missing a feed value for SymbolicTensor from InputLayer \" +\n            (\"'\" + topology_1.InputLayer.name + \"'\"));\n    }\n    var inputs = fetch.inputs;\n    var inputValues = [];\n    for (var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++) {\n        var input = inputs_1[_i];\n        var inputVal = executeInternal(input, internalFeedDict, kwargs);\n        inputValues.push(inputVal);\n    }\n    var output = fetch.sourceLayer.apply(inputValues, kwargs);\n    if (!Array.isArray(output)) {\n        output = [output];\n    }\n    var layerOutputs = getNodeOutputs(fetch);\n    var outputSymbolicTensors = Array.isArray(layerOutputs) ? layerOutputs : [layerOutputs];\n    for (var i = 0; i < outputSymbolicTensors.length; ++i) {\n        internalFeedDict.add(outputSymbolicTensors[i], output[i]);\n    }\n    return output.length === 1 ? output[0] : output[fetch.outputTensorIndex];\n}\nfunction getNodeOutputs(fetch) {\n    var layerOutputs;\n    if (fetch.sourceLayer.inboundNodes.length === 1) {\n        layerOutputs = fetch.sourceLayer.output;\n    }\n    else {\n        var nodeIndex = null;\n        for (var i = 0; i < fetch.sourceLayer.inboundNodes.length; ++i) {\n            for (var _i = 0, _a = fetch.sourceLayer.inboundNodes[i]\n                .outputTensors; _i < _a.length; _i++) {\n                var outputTensor = _a[_i];\n                if (outputTensor.id === fetch.id) {\n                    nodeIndex = i;\n                    break;\n                }\n            }\n        }\n        layerOutputs = fetch.sourceLayer.getOutputAt(nodeIndex);\n    }\n    return layerOutputs;\n}\n","map":{"mappings":[{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}}],"sources":{"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar errors_1 = require(\"../errors\");\nvar topology_1 = require(\"./topology\");\nfunction assertFeedCompatibility(key, val) {\n    if (key.dtype != null && key.dtype !== val.dtype) {\n        throw new errors_1.ValueError(\"The dtype of the feed (\" + val.dtype + \") is incompatible with that of \" +\n            (\"the key '\" + key.name + \"' (\" + key.dtype + \").\"));\n    }\n    if (key.shape != null) {\n        if (key.shape.length !== val.shape.length) {\n            throw new errors_1.ValueError(\"The rank of feed (\" + val.shape.length + \") does not match the rank of \" +\n                (\"the key (\" + key.shape.length + \").\"));\n        }\n        for (var i = 0; i < key.shape.length; ++i) {\n            if (key.shape[i] != null && key.shape[i] !== val.shape[i]) {\n                throw new errors_1.ValueError(\"The \" + i + \"-th dimension of the feed (\" + val.shape[i] + \") is \" +\n                    (\"incompatible with that of the key (\" + key.shape[i] + \").\"));\n            }\n        }\n    }\n}\nvar FeedDict = (function () {\n    function FeedDict(feeds) {\n        this.id2Value = {};\n        if (feeds instanceof FeedDict) {\n            for (var id in feeds.id2Value) {\n                this.id2Value[id] = feeds.id2Value[id];\n            }\n        }\n        else {\n            if (feeds == null) {\n                return;\n            }\n            for (var _i = 0, feeds_1 = feeds; _i < feeds_1.length; _i++) {\n                var feed = feeds_1[_i];\n                this.add(feed.key, feed.value);\n            }\n        }\n    }\n    FeedDict.prototype.add = function (key, value) {\n        assertFeedCompatibility(key, value);\n        if (this.id2Value[key.id] == null) {\n            this.id2Value[key.id] = value;\n        }\n        else {\n            throw new errors_1.ValueError(\"Duplicate key: name=\" + key.name + \", id=\" + key.id);\n        }\n        return this;\n    };\n    FeedDict.prototype.addFeed = function (feed) {\n        this.add(feed.key, feed.value);\n    };\n    FeedDict.prototype.hasKey = function (key) {\n        return this.id2Value[key.id] != null;\n    };\n    FeedDict.prototype.getValue = function (key) {\n        if (this.id2Value[key.id] == null) {\n            throw new errors_1.ValueError(\"Nonexistent key: \" + JSON.stringify(key));\n        }\n        else {\n            return this.id2Value[key.id];\n        }\n    };\n    return FeedDict;\n}());\nexports.FeedDict = FeedDict;\nfunction execute(fetches, feedDict, kwargs) {\n    var arrayFetches = Array.isArray(fetches);\n    var fetchArray = arrayFetches ? fetches : [fetches];\n    var outputs = [];\n    var internalFeedDict = new FeedDict(feedDict);\n    for (var _i = 0, fetchArray_1 = fetchArray; _i < fetchArray_1.length; _i++) {\n        var fetch_1 = fetchArray_1[_i];\n        outputs.push(executeInternal(fetch_1, internalFeedDict, kwargs));\n    }\n    return arrayFetches ? outputs : outputs[0];\n}\nexports.execute = execute;\nfunction executeInternal(fetch, internalFeedDict, kwargs) {\n    if (internalFeedDict.hasKey(fetch)) {\n        return internalFeedDict.getValue(fetch);\n    }\n    if (fetch.sourceLayer instanceof topology_1.InputLayer) {\n        throw new errors_1.ValueError(\"Missing a feed value for SymbolicTensor from InputLayer \" +\n            (\"'\" + topology_1.InputLayer.name + \"'\"));\n    }\n    var inputs = fetch.inputs;\n    var inputValues = [];\n    for (var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++) {\n        var input = inputs_1[_i];\n        var inputVal = executeInternal(input, internalFeedDict, kwargs);\n        inputValues.push(inputVal);\n    }\n    var output = fetch.sourceLayer.apply(inputValues, kwargs);\n    if (!Array.isArray(output)) {\n        output = [output];\n    }\n    var layerOutputs = getNodeOutputs(fetch);\n    var outputSymbolicTensors = Array.isArray(layerOutputs) ? layerOutputs : [layerOutputs];\n    for (var i = 0; i < outputSymbolicTensors.length; ++i) {\n        internalFeedDict.add(outputSymbolicTensors[i], output[i]);\n    }\n    return output.length === 1 ? output[0] : output[fetch.outputTensorIndex];\n}\nfunction getNodeOutputs(fetch) {\n    var layerOutputs;\n    if (fetch.sourceLayer.inboundNodes.length === 1) {\n        layerOutputs = fetch.sourceLayer.output;\n    }\n    else {\n        var nodeIndex = null;\n        for (var i = 0; i < fetch.sourceLayer.inboundNodes.length; ++i) {\n            for (var _i = 0, _a = fetch.sourceLayer.inboundNodes[i]\n                .outputTensors; _i < _a.length; _i++) {\n                var outputTensor = _a[_i];\n                if (outputTensor.id === fetch.id) {\n                    nodeIndex = i;\n                    break;\n                }\n            }\n        }\n        layerOutputs = fetch.sourceLayer.getOutputAt(nodeIndex);\n    }\n    return layerOutputs;\n}\n"},"lineCount":127}},"hash":"58a01e5381a8a18209985bc8eb92e70f","cacheData":{"env":{}}}