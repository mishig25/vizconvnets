{"dependencies":[{"name":"/home/mishig/Desktop/viz/final/package.json","includedInParent":true,"mtime":1522648746056},{"name":"/home/mishig/Desktop/viz/final/node_modules/@tensorflow/tfjs-core/package.json","includedInParent":true,"mtime":0},{"name":"../doc","loc":{"line":9,"column":20}},{"name":"../environment","loc":{"line":10,"column":28}},{"name":"../types","loc":{"line":11,"column":20}},{"name":"../util","loc":{"line":12,"column":19}},{"name":"./broadcast_util","loc":{"line":13,"column":29}},{"name":"./operation","loc":{"line":14,"column":26}}],"generated":{"js":"\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = require(\"../doc\");\nvar environment_1 = require(\"../environment\");\nvar types = require(\"../types\");\nvar util = require(\"../util\");\nvar broadcast_util = require(\"./broadcast_util\");\nvar operation_1 = require(\"./operation\");\nvar LogicalOps = (function () {\n    function LogicalOps() {\n    }\n    LogicalOps.logicalNot = function (x) {\n        util.assert(x.dtype === 'bool', 'Error Array must be of type bool.');\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.logicalNot(x); }, { x: x });\n    };\n    LogicalOps.logicalAnd = function (a, b) {\n        util.assert(a.dtype === 'bool' && b.dtype === 'bool', 'Error Array must be of type bool.');\n        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.logicalAnd(a, b); }, { a: a, b: b });\n    };\n    LogicalOps.logicalOr = function (a, b) {\n        util.assert(a.dtype === 'bool' && b.dtype === 'bool', 'Error Array must be of type bool.');\n        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.logicalOr(a, b); }, { a: a, b: b });\n    };\n    LogicalOps.logicalXor = function (a, b) {\n        util.assert(a.dtype === 'bool' && b.dtype === 'bool', 'Error Array must be of type bool.');\n        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.logicalXor(a, b); }, { a: a, b: b });\n    };\n    LogicalOps.where = function (condition, a, b) {\n        util.assert(condition.dtype === 'bool' || a.dtype === 'bool' || b.dtype === 'bool', 'Error Array must be of type bool.');\n        util.assertShapesMatch(a.shape, b.shape, 'Error in where: ');\n        if (condition.rank === 1) {\n            util.assert(condition.shape[0] === a.shape[0], 'The first dimension of `a` must match the size of `condition`.');\n        }\n        else {\n            util.assertShapesMatch(condition.shape, b.shape, 'Error in where: ');\n        }\n        var dtype = types.upcastType(a.dtype, b.dtype);\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.where(condition, a, b, dtype); }, { condition: condition, a: a, b: b });\n    };\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Logical' }),\n        operation_1.operation\n    ], LogicalOps, \"logicalNot\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Logical' }),\n        operation_1.operation\n    ], LogicalOps, \"logicalAnd\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Logical' }),\n        operation_1.operation\n    ], LogicalOps, \"logicalOr\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Logical' }),\n        operation_1.operation\n    ], LogicalOps, \"logicalXor\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Logical' }),\n        operation_1.operation\n    ], LogicalOps, \"where\", null);\n    return LogicalOps;\n}());\nexports.LogicalOps = LogicalOps;\n","map":{"mappings":[{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}}],"sources":{"node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js":"\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = require(\"../doc\");\nvar environment_1 = require(\"../environment\");\nvar types = require(\"../types\");\nvar util = require(\"../util\");\nvar broadcast_util = require(\"./broadcast_util\");\nvar operation_1 = require(\"./operation\");\nvar LogicalOps = (function () {\n    function LogicalOps() {\n    }\n    LogicalOps.logicalNot = function (x) {\n        util.assert(x.dtype === 'bool', 'Error Array must be of type bool.');\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.logicalNot(x); }, { x: x });\n    };\n    LogicalOps.logicalAnd = function (a, b) {\n        util.assert(a.dtype === 'bool' && b.dtype === 'bool', 'Error Array must be of type bool.');\n        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.logicalAnd(a, b); }, { a: a, b: b });\n    };\n    LogicalOps.logicalOr = function (a, b) {\n        util.assert(a.dtype === 'bool' && b.dtype === 'bool', 'Error Array must be of type bool.');\n        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.logicalOr(a, b); }, { a: a, b: b });\n    };\n    LogicalOps.logicalXor = function (a, b) {\n        util.assert(a.dtype === 'bool' && b.dtype === 'bool', 'Error Array must be of type bool.');\n        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.logicalXor(a, b); }, { a: a, b: b });\n    };\n    LogicalOps.where = function (condition, a, b) {\n        util.assert(condition.dtype === 'bool' || a.dtype === 'bool' || b.dtype === 'bool', 'Error Array must be of type bool.');\n        util.assertShapesMatch(a.shape, b.shape, 'Error in where: ');\n        if (condition.rank === 1) {\n            util.assert(condition.shape[0] === a.shape[0], 'The first dimension of `a` must match the size of `condition`.');\n        }\n        else {\n            util.assertShapesMatch(condition.shape, b.shape, 'Error in where: ');\n        }\n        var dtype = types.upcastType(a.dtype, b.dtype);\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.where(condition, a, b, dtype); }, { condition: condition, a: a, b: b });\n    };\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Logical' }),\n        operation_1.operation\n    ], LogicalOps, \"logicalNot\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Logical' }),\n        operation_1.operation\n    ], LogicalOps, \"logicalAnd\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Logical' }),\n        operation_1.operation\n    ], LogicalOps, \"logicalOr\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Logical' }),\n        operation_1.operation\n    ], LogicalOps, \"logicalXor\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Logical' }),\n        operation_1.operation\n    ], LogicalOps, \"where\", null);\n    return LogicalOps;\n}());\nexports.LogicalOps = LogicalOps;\n"},"lineCount":72}},"hash":"92e85da8f47cb5b46e9982016d4b20b8","cacheData":{"env":{}}}