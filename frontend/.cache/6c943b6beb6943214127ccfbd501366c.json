{"dependencies":[{"name":"/home/mishig/Desktop/viz/final/package.json","includedInParent":true,"mtime":1522648746056},{"name":"/home/mishig/Desktop/viz/final/node_modules/@tensorflow/tfjs-core/package.json","includedInParent":true,"mtime":0}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar LRNProgram = (function () {\n    function LRNProgram(xShape, radius, bias, alpha, beta, normRegion) {\n        this.variableNames = ['x'];\n        this.outputShape = [];\n        var rad = radius;\n        var maxW = xShape[1] - 1;\n        var maxH = xShape[2] - 1;\n        var maxD = xShape[3] - 1;\n        this.outputShape = xShape;\n        var powOperator;\n        var basis = \"float(\" + bias + \") + float(\" + alpha + \") * sum\";\n        if (beta === 0.5) {\n            powOperator = \"inversesqrt(\" + basis + \")\";\n        }\n        else if (beta === 1.0) {\n            powOperator = \"1.0/(\" + basis + \")\";\n        }\n        else {\n            powOperator = \"exp(log(\" + basis + \") * float(-\" + beta + \"));\";\n        }\n        if (normRegion === 'withinChannel') {\n            this.userCode = \"\\n        void main() {\\n          ivec4 coords = getOutputCoords();\\n          int b = coords[0];\\n          int r = coords[1];\\n          int c = coords[2];\\n          int d = coords[3];\\n          float x = getX(b, r, c, d);\\n          float sum = 0.0;\\n          for (int u = -\" + rad + \"; u <= \" + rad + \"; u++) {\\n            for (int v = -\" + rad + \"; v <= \" + rad + \"; v++) {\\n              int idx = r + u;\\n              int idy = c + v;\\n              if (idx >= 0 && idx <= \" + maxW + \" && idy >= 0 && idy <= \" + maxH + \") {\\n                float z = getX(b, idx, idy, d);\\n                sum += z * z;\\n              }\\n            }\\n          }\\n          float val = x * \" + powOperator + \";\\n          setOutput(val);\\n        }\\n      \";\n        }\n        else {\n            this.userCode = \"\\n        void main() {\\n          ivec4 coords = getOutputCoords();\\n          int b = coords[0];\\n          int r = coords[1];\\n          int c = coords[2];\\n          int d = coords[3];\\n          float x = getX(b, r, c, d);\\n          float sum = 0.0;\\n          for (int j = -\" + rad + \"; j <= \" + rad + \"; j++) {\\n            int idx = d + j;\\n            if (idx >= 0 && idx <=  \" + maxD + \") {\\n              float z = getX(b, r, c, idx);\\n              sum += z * z;\\n            }\\n          }\\n          float val = x * \" + powOperator + \";\\n          setOutput(val);\\n        }\\n      \";\n        }\n    }\n    return LRNProgram;\n}());\nexports.LRNProgram = LRNProgram;\n","map":{"mappings":[{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}}],"sources":{"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar LRNProgram = (function () {\n    function LRNProgram(xShape, radius, bias, alpha, beta, normRegion) {\n        this.variableNames = ['x'];\n        this.outputShape = [];\n        var rad = radius;\n        var maxW = xShape[1] - 1;\n        var maxH = xShape[2] - 1;\n        var maxD = xShape[3] - 1;\n        this.outputShape = xShape;\n        var powOperator;\n        var basis = \"float(\" + bias + \") + float(\" + alpha + \") * sum\";\n        if (beta === 0.5) {\n            powOperator = \"inversesqrt(\" + basis + \")\";\n        }\n        else if (beta === 1.0) {\n            powOperator = \"1.0/(\" + basis + \")\";\n        }\n        else {\n            powOperator = \"exp(log(\" + basis + \") * float(-\" + beta + \"));\";\n        }\n        if (normRegion === 'withinChannel') {\n            this.userCode = \"\\n        void main() {\\n          ivec4 coords = getOutputCoords();\\n          int b = coords[0];\\n          int r = coords[1];\\n          int c = coords[2];\\n          int d = coords[3];\\n          float x = getX(b, r, c, d);\\n          float sum = 0.0;\\n          for (int u = -\" + rad + \"; u <= \" + rad + \"; u++) {\\n            for (int v = -\" + rad + \"; v <= \" + rad + \"; v++) {\\n              int idx = r + u;\\n              int idy = c + v;\\n              if (idx >= 0 && idx <= \" + maxW + \" && idy >= 0 && idy <= \" + maxH + \") {\\n                float z = getX(b, idx, idy, d);\\n                sum += z * z;\\n              }\\n            }\\n          }\\n          float val = x * \" + powOperator + \";\\n          setOutput(val);\\n        }\\n      \";\n        }\n        else {\n            this.userCode = \"\\n        void main() {\\n          ivec4 coords = getOutputCoords();\\n          int b = coords[0];\\n          int r = coords[1];\\n          int c = coords[2];\\n          int d = coords[3];\\n          float x = getX(b, r, c, d);\\n          float sum = 0.0;\\n          for (int j = -\" + rad + \"; j <= \" + rad + \"; j++) {\\n            int idx = d + j;\\n            if (idx >= 0 && idx <=  \" + maxD + \") {\\n              float z = getX(b, r, c, idx);\\n              sum += z * z;\\n            }\\n          }\\n          float val = x * \" + powOperator + \";\\n          setOutput(val);\\n        }\\n      \";\n        }\n    }\n    return LRNProgram;\n}());\nexports.LRNProgram = LRNProgram;\n"},"lineCount":33}},"hash":"4ec73a8afcef48a33c4ae6d2a2f69044","cacheData":{"env":{}}}