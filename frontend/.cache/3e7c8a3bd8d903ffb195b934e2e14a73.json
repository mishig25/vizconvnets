{"dependencies":[{"name":"/home/mishig/Desktop/vizgithub/frontend/package.json","includedInParent":true,"mtime":1523230167415},{"name":"/home/mishig/Desktop/vizgithub/frontend/node_modules/@tensorflow/tfjs-layers/package.json","includedInParent":true,"mtime":1522260134000},{"name":"@tensorflow/tfjs-core","loc":{"line":19,"column":26}},{"name":"underscore","loc":{"line":20,"column":16}},{"name":"../activations","loc":{"line":21,"column":28}},{"name":"../backend/tfjs_backend","loc":{"line":22,"column":16}},{"name":"../constraints","loc":{"line":23,"column":28}},{"name":"../engine/topology","loc":{"line":25,"column":25}},{"name":"../errors","loc":{"line":26,"column":23}},{"name":"../initializers","loc":{"line":27,"column":29}},{"name":"../regularizers","loc":{"line":28,"column":29}},{"name":"../types","loc":{"line":29,"column":22}},{"name":"../utils/generic_utils","loc":{"line":30,"column":28}},{"name":"../utils/math_utils","loc":{"line":31,"column":25}},{"name":"./serialization","loc":{"line":32,"column":30}}],"generated":{"js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_core_1 = require(\"@tensorflow/tfjs-core\");\nvar _ = require(\"underscore\");\nvar activations_1 = require(\"../activations\");\nvar K = require(\"../backend/tfjs_backend\");\nvar constraints_1 = require(\"../constraints\");\nvar topology_1 = require(\"../engine/topology\");\nvar topology_2 = require(\"../engine/topology\");\nvar errors_1 = require(\"../errors\");\nvar initializers_1 = require(\"../initializers\");\nvar regularizers_1 = require(\"../regularizers\");\nvar types_1 = require(\"../types\");\nvar generic_utils = require(\"../utils/generic_utils\");\nvar math_utils = require(\"../utils/math_utils\");\nvar serialization_1 = require(\"./serialization\");\nvar RNN = (function (_super) {\n    __extends(RNN, _super);\n    function RNN(config) {\n        var _this = _super.call(this, config) || this;\n        var cell;\n        if (config.cell == null) {\n            throw new errors_1.ValueError('cell property is missing for the constructor of RNN.');\n        }\n        else if (Array.isArray(config.cell)) {\n            cell = new StackedRNNCells({ cells: config.cell });\n        }\n        else {\n            cell = config.cell;\n        }\n        if (cell.stateSize == null) {\n            throw new errors_1.ValueError('The RNN cell should have an attribute `stateSize` (tuple of ' +\n                'integers, one integer per RNN state).');\n        }\n        _this.cell = cell;\n        _this.returnSequences =\n            config.returnSequences == null ? false : config.returnSequences;\n        _this.returnState = config.returnState == null ? false : config.returnState;\n        _this.goBackwards = config.goBackwards == null ? false : config.goBackwards;\n        _this._stateful = config.stateful == null ? false : config.stateful;\n        _this.unroll = config.unroll == null ? false : config.unroll;\n        _this.supportsMasking = true;\n        _this.inputSpec = [new topology_1.InputSpec({ ndim: 3 })];\n        _this.stateSpec = null;\n        _this.states = null;\n        _this.numConstants = null;\n        return _this;\n    }\n    RNN.prototype.getStates = function () {\n        if (this.states == null) {\n            var numStates = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n            return _.range(numStates).map(function (x) { return null; });\n        }\n        else {\n            return this.states;\n        }\n    };\n    RNN.prototype.setStates = function (states) {\n        this.states = states;\n    };\n    RNN.prototype.computeOutputShape = function (inputShape) {\n        if (generic_utils.isArrayOfShapes(inputShape)) {\n            inputShape = inputShape[0];\n        }\n        inputShape = inputShape;\n        var stateSize = this.cell.stateSize;\n        if (!Array.isArray(stateSize)) {\n            stateSize = [stateSize];\n        }\n        var outputDim = stateSize[0];\n        var outputShape;\n        if (this.returnSequences) {\n            outputShape = [inputShape[0], inputShape[1], outputDim];\n        }\n        else {\n            outputShape = [inputShape[0], outputDim];\n        }\n        if (this.returnState) {\n            var stateShape = [];\n            for (var _i = 0, stateSize_1 = stateSize; _i < stateSize_1.length; _i++) {\n                var dim = stateSize_1[_i];\n                stateShape.push([inputShape[0], dim]);\n            }\n            return [outputShape].concat(stateShape);\n        }\n        else {\n            return outputShape;\n        }\n    };\n    RNN.prototype.computeMask = function (inputs, mask) {\n        throw new errors_1.NotImplementedError('computeMask has not been implemented for RNN yet');\n    };\n    RNN.prototype.build = function (inputShape) {\n        var constantShape = null;\n        if (this.numConstants != null) {\n            throw new errors_1.NotImplementedError('Constants support is not implemented in RNN yet.');\n        }\n        if (generic_utils.isArrayOfShapes(inputShape)) {\n            inputShape = inputShape[0];\n        }\n        inputShape = inputShape;\n        var batchSize = this.stateful ? inputShape[0] : null;\n        var inputDim = inputShape[inputShape.length - 1];\n        this.inputSpec[0] = new topology_1.InputSpec({ shape: [batchSize, null, inputDim] });\n        var stepInputShape = [inputShape[0]].concat(inputShape.slice(2));\n        if (constantShape != null) {\n            throw new errors_1.NotImplementedError('Constants support is not implemented in RNN yet.');\n        }\n        else {\n            this.cell.build(stepInputShape);\n        }\n        var stateSize;\n        if (Array.isArray(this.cell.stateSize)) {\n            stateSize = this.cell.stateSize;\n        }\n        else {\n            stateSize = [this.cell.stateSize];\n        }\n        if (this.stateSpec != null) {\n            if (!_.isEqual(this.stateSpec.map(function (spec) { return spec.shape[spec.shape.length - 1]; }), stateSize)) {\n                throw new errors_1.ValueError(\"An initialState was passed that is not compatible with \" +\n                    (\"cell.stateSize. Received stateSpec=\" + this.stateSpec + \"; \") +\n                    (\"However cell.stateSize is \" + this.cell.stateSize));\n            }\n        }\n        else {\n            this.stateSpec =\n                stateSize.map(function (dim) { return new topology_1.InputSpec({ shape: [null, dim] }); });\n        }\n        if (this.stateful) {\n            throw new errors_1.NotImplementedError('stateful RNN layer is not implemented yet');\n        }\n    };\n    RNN.prototype.resetStates = function (states) {\n        if (!this.stateful) {\n            throw new errors_1.AttributeError('Cannot call resetState() on an RNN Layer that is not stateful.');\n        }\n        var batchSize = this.inputSpec[0].shape[0];\n        if (batchSize == null) {\n            throw new errors_1.ValueError('If an RNN is stateful, it needs to know its batch size. Specify ' +\n                'the batch size of your input tensors: \\n' +\n                '- If using a Sequential model, specify the batch size by passing ' +\n                'a `batchInputShape` option to your first layer.\\n' +\n                '- If using the functional API, specify the batch size by ' +\n                'passing a `batchShape` option to your Input layer.');\n        }\n        if (this.states == null) {\n            if (Array.isArray(this.cell.stateSize)) {\n                this.states = this.cell.stateSize.map(function (dim) { return K.zeros([batchSize, dim]); });\n            }\n            else {\n                this.states = [K.zeros([batchSize, this.cell.stateSize])];\n            }\n        }\n        else if (states == null) {\n            if (Array.isArray(this.cell.stateSize)) {\n                this.states = this.cell.stateSize.map(function (dim) { return K.zeros([batchSize, dim]); });\n            }\n            else {\n                this.states[0] = K.zeros([batchSize, this.cell.stateSize]);\n            }\n        }\n        else {\n            if (!Array.isArray(states)) {\n                states = [states];\n            }\n            if (states.length !== this.states.length) {\n                throw new errors_1.ValueError(\"Layer \" + this.name + \" expects \" + this.states.length + \" state(s), \" +\n                    (\"but it received \" + states.length + \" state value(s). Input \") +\n                    (\"received: \" + states));\n            }\n            for (var index = 0; index < this.states.length; ++index) {\n                var value = states[index];\n                var dim = Array.isArray(this.cell.stateSize) ?\n                    this.cell.stateSize[index] :\n                    this.cell.stateSize;\n                var expectedShape = [batchSize, dim];\n                if (!_.isEqual(value.shape, expectedShape)) {\n                    throw new errors_1.ValueError(\"State \" + index + \" is incompatible with layer \" + this.name + \": \" +\n                        (\"expected shape=\" + expectedShape + \", received shape=\" + value.shape));\n                }\n                this.states[index] = value;\n            }\n        }\n    };\n    RNN.prototype.standardizeArgs = function (inputs, initialState, constants) {\n        if (Array.isArray(inputs)) {\n            if (initialState != null || constants != null) {\n                throw new errors_1.ValueError('When inputs is an array, neither initialState or constants ' +\n                    'should be provided');\n            }\n            if (this.numConstants != null) {\n                constants =\n                    inputs.slice(inputs.length - this.numConstants, inputs.length);\n                inputs = inputs.slice(0, inputs.length - this.numConstants);\n            }\n            if (inputs.length > 1) {\n                initialState = inputs.slice(1, inputs.length);\n            }\n            inputs = inputs[0];\n        }\n        function toListOrNull(x) {\n            if (x == null || Array.isArray(x)) {\n                return x;\n            }\n            else {\n                return [x];\n            }\n        }\n        initialState = toListOrNull(initialState);\n        constants = toListOrNull(constants);\n        return { inputs: inputs, initialState: initialState, constants: constants };\n    };\n    RNN.prototype.apply = function (inputs, kwargs) {\n        var initialState = kwargs == null ? null : kwargs['initialState'];\n        var constants = kwargs == null ? null : kwargs['constants'];\n        if (kwargs == null) {\n            kwargs = {};\n        }\n        var standardized = this.standardizeArgs(inputs, initialState, constants);\n        inputs = standardized.inputs;\n        initialState = standardized.initialState;\n        constants = standardized.constants;\n        var additionalInputs = [];\n        var additionalSpecs = [];\n        if (initialState != null) {\n            kwargs['initialState'] = initialState;\n            additionalInputs = additionalInputs.concat(initialState);\n            this.stateSpec = [];\n            for (var _i = 0, initialState_1 = initialState; _i < initialState_1.length; _i++) {\n                var state = initialState_1[_i];\n                this.stateSpec.push(new topology_1.InputSpec({ shape: state.shape }));\n            }\n            additionalSpecs = additionalSpecs.concat(this.stateSpec);\n        }\n        if (constants != null) {\n            kwargs['constants'] = constants;\n            additionalInputs = additionalInputs.concat(constants);\n            this.numConstants = constants.length;\n        }\n        var isTensor = additionalInputs[0] instanceof types_1.SymbolicTensor;\n        if (isTensor) {\n            var fullInput = [inputs].concat(additionalInputs);\n            var fullInputSpec = this.inputSpec.concat(additionalSpecs);\n            var originalInputSpec = this.inputSpec;\n            this.inputSpec = fullInputSpec;\n            var output = _super.prototype.apply.call(this, fullInput, kwargs);\n            this.inputSpec = originalInputSpec;\n            return output;\n        }\n        else {\n            return _super.prototype.apply.call(this, inputs, kwargs);\n        }\n    };\n    RNN.prototype.call = function (inputs, kwargs) {\n        var _this = this;\n        var mask = kwargs == null ? null : kwargs['mask'];\n        var training = kwargs == null ? null : kwargs['training'];\n        var initialState = kwargs == null ? null : kwargs['initialState'];\n        inputs = generic_utils.getExactlyOneTensor(inputs);\n        if (initialState == null) {\n            if (this.stateful) {\n                throw new errors_1.NotImplementedError('stateful RNN layer is not implemented yet.');\n            }\n            else {\n                initialState = this.getInitialState(inputs);\n            }\n        }\n        if (mask != null) {\n            throw new errors_1.NotImplementedError('Masking is not implemented for RNN yet');\n        }\n        var numStates = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n        if (initialState.length !== numStates) {\n            throw new errors_1.ValueError(\"RNN Layer has \" + numStates + \" state(s) but was passed \" +\n                (initialState.length + \" initial state(s).\"));\n        }\n        var inputShape = inputs.shape;\n        var timesteps = inputShape[1];\n        if (this.unroll) {\n            console.warn('Ignoring unroll = true for RNN layer, due to imperative backend.');\n        }\n        var cellCallKwargs = { training: training };\n        var step = function (inputs, states) {\n            var outputs = _this.cell.call([inputs].concat(states), cellCallKwargs);\n            return [outputs[0], outputs.slice(1)];\n        };\n        var rnnOutputs = K.rnn(step, inputs, initialState, this.goBackwards, null, null, this.unroll, timesteps);\n        var lastOutput = rnnOutputs[0];\n        var outputs = rnnOutputs[1];\n        var states = rnnOutputs[2];\n        if (this.stateful) {\n            throw new errors_1.NotImplementedError('stateful RNN layer is not implemented yet');\n        }\n        var output = this.returnSequences ? outputs : lastOutput;\n        if (this.returnState) {\n            return [output].concat(states);\n        }\n        else {\n            return output;\n        }\n    };\n    RNN.prototype.getInitialState = function (inputs) {\n        var initialState = K.zeros(inputs.shape);\n        initialState = K.sum(initialState, [1, 2]);\n        initialState = K.expandDims(initialState);\n        if (Array.isArray(this.cell.stateSize)) {\n            return this.cell.stateSize.map(function (dim) { return dim > 1 ? K.tile(initialState, [1, dim]) : initialState; });\n        }\n        else {\n            return this.cell.stateSize > 1 ?\n                [K.tile(initialState, [1, this.cell.stateSize])] :\n                [initialState];\n        }\n    };\n    Object.defineProperty(RNN.prototype, \"trainableWeights\", {\n        get: function () {\n            if (!this.trainable) {\n                return [];\n            }\n            return this.cell.trainableWeights;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RNN.prototype, \"nonTrainableWeights\", {\n        get: function () {\n            if (!this.trainable) {\n                return this.cell.weights;\n            }\n            return this.cell.nonTrainableWeights;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    RNN.prototype.getConfig = function () {\n        var config = {\n            returnSequences: this.returnSequences,\n            returnState: this.returnState,\n            goBackwards: this.goBackwards,\n            stateful: this.stateful,\n            unroll: this.unroll,\n        };\n        if (this.numConstants != null) {\n            config.numConstants = this.numConstants;\n        }\n        var cellConfig = this.cell.getConfig();\n        config.cell = {\n            className: this.cell.constructor.name,\n            config: cellConfig,\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    return RNN;\n}(topology_2.Layer));\nexports.RNN = RNN;\ngeneric_utils.ClassNameMap.register('RNN', RNN);\nvar RNNCell = (function (_super) {\n    __extends(RNNCell, _super);\n    function RNNCell() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    RNNCell = __decorate([\n        tfjs_core_1.doc({ heading: 'Layers', subheading: 'Classes' })\n    ], RNNCell);\n    return RNNCell;\n}(topology_2.Layer));\nexports.RNNCell = RNNCell;\nvar SimpleRNNCell = (function (_super) {\n    __extends(SimpleRNNCell, _super);\n    function SimpleRNNCell(config) {\n        var _this = _super.call(this, config) || this;\n        _this.DEFAULT_ACTIVATION = 'tanh';\n        _this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n        _this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n        _this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n        _this.units = config.units;\n        _this.activation = activations_1.getActivation(config.activation == null ? _this.DEFAULT_ACTIVATION :\n            config.activation);\n        _this.useBias = config.useBias == null ? true : config.useBias;\n        _this.kernelInitializer = initializers_1.getInitializer(config.kernelInitializer || _this.DEFAULT_KERNEL_INITIALIZER);\n        _this.recurrentInitializer = initializers_1.getInitializer(config.recurrentInitializer || _this.DEFAULT_RECURRENT_INITIALIZER);\n        _this.biasInitializer =\n            initializers_1.getInitializer(config.biasInitializer || _this.DEFAULT_BIAS_INITIALIZER);\n        _this.kernelRegularizer = regularizers_1.getRegularizer(config.kernelRegularizer);\n        _this.recurrentRegularizer = regularizers_1.getRegularizer(config.recurrentRegularizer);\n        _this.biasRegularizer = regularizers_1.getRegularizer(config.biasRegularizer);\n        _this.kernelConstraint = constraints_1.getConstraint(config.kernelConstraint);\n        _this.recurrentConstraint = constraints_1.getConstraint(config.recurrentConstraint);\n        _this.biasConstraint = constraints_1.getConstraint(config.biasConstraint);\n        _this.dropout = math_utils.min([1, math_utils.max([0, config.dropout == null ? 0 : config.dropout])]);\n        _this.recurrentDropout = math_utils.min([\n            1,\n            math_utils.max([0, config.recurrentDropout == null ? 0 : config.recurrentDropout])\n        ]);\n        _this.stateSize = _this.units;\n        return _this;\n    }\n    SimpleRNNCell.prototype.build = function (inputShape) {\n        inputShape = generic_utils.getExactlyOneShape(inputShape);\n        this.kernel = this.addWeight('kernel', [inputShape[inputShape.length - 1], this.units], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        this.recurrentKernel = this.addWeight('recurrent_kernel', [this.units, this.units], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [this.units], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        else {\n            this.bias = null;\n        }\n        this.built = true;\n    };\n    SimpleRNNCell.prototype.call = function (inputs, kwargs) {\n        inputs = inputs;\n        if (inputs.length !== 2) {\n            throw new errors_1.ValueError(\"SimpleRNNCell expects 2 input Tensors, got \" + inputs.length + \".\");\n        }\n        var prevOutput = inputs[1];\n        inputs = inputs[0];\n        if (this.dropout !== 0 || this.recurrentDropout !== 0) {\n            throw new errors_1.NotImplementedError('Dropout is not implemented for SimpleRNNCell yet');\n        }\n        var h = K.dot(inputs, this.kernel.read());\n        if (this.bias != null) {\n            h = K.biasAdd(h, this.bias.read());\n        }\n        var output = K.add(h, K.dot(prevOutput, this.recurrentKernel.read()));\n        if (this.activation != null) {\n            output = this.activation(output);\n        }\n        return [output, output];\n    };\n    SimpleRNNCell.prototype.getConfig = function () {\n        var config = {\n            units: this.units,\n            activation: activations_1.serializeActivation(this.activation),\n            useBias: this.useBias,\n            kernelInitializer: initializers_1.serializeInitializer(this.kernelInitializer),\n            recurrentInitializer: initializers_1.serializeInitializer(this.recurrentInitializer),\n            biasInitializer: initializers_1.serializeInitializer(this.biasInitializer),\n            kernelRegularizer: regularizers_1.serializeRegularizer(this.kernelRegularizer),\n            recurrentRegularizer: regularizers_1.serializeRegularizer(this.recurrentRegularizer),\n            biasRegularizer: regularizers_1.serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: regularizers_1.serializeRegularizer(this.activityRegularizer),\n            kernelConstraint: constraints_1.serializeConstraint(this.kernelConstraint),\n            recurrentConstraint: constraints_1.serializeConstraint(this.recurrentConstraint),\n            biasConstraint: constraints_1.serializeConstraint(this.biasConstraint),\n            dropout: this.dropout,\n            recurrentDropout: this.recurrentDropout,\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    return SimpleRNNCell;\n}(RNNCell));\nexports.SimpleRNNCell = SimpleRNNCell;\ngeneric_utils.ClassNameMap.register('SimpleRNNCell', SimpleRNNCell);\nvar SimpleRNN = (function (_super) {\n    __extends(SimpleRNN, _super);\n    function SimpleRNN(config) {\n        var _this = this;\n        config.cell = new SimpleRNNCell(config);\n        _this = _super.call(this, config) || this;\n        return _this;\n    }\n    SimpleRNN.prototype.call = function (inputs, kwargs) {\n        var mask = kwargs == null ? null : kwargs['mask'];\n        var training = kwargs == null ? null : kwargs['training'];\n        var initialState = kwargs == null ? null : kwargs['initialState'];\n        return _super.prototype.call.call(this, inputs, { mask: mask, training: training, initialState: initialState });\n    };\n    Object.defineProperty(SimpleRNN.prototype, \"units\", {\n        get: function () {\n            return this.cell.units;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleRNN.prototype, \"activation\", {\n        get: function () {\n            return this.cell.activation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleRNN.prototype, \"useBias\", {\n        get: function () {\n            return this.cell.useBias;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleRNN.prototype, \"kernelInitializer\", {\n        get: function () {\n            return this.cell.kernelInitializer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleRNN.prototype, \"recurrentInitializer\", {\n        get: function () {\n            return this.cell.recurrentInitializer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleRNN.prototype, \"biasInitializer\", {\n        get: function () {\n            return this.cell.biasInitializer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleRNN.prototype, \"kernelRegularizer\", {\n        get: function () {\n            return this.cell.kernelRegularizer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleRNN.prototype, \"recurrentRegularizer\", {\n        get: function () {\n            return this.cell.recurrentRegularizer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleRNN.prototype, \"biasRegularizer\", {\n        get: function () {\n            return this.cell.biasRegularizer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleRNN.prototype, \"kernelConstraint\", {\n        get: function () {\n            return this.cell.kernelConstraint;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleRNN.prototype, \"recurrentConstraint\", {\n        get: function () {\n            return this.cell.recurrentConstraint;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleRNN.prototype, \"biasConstraint\", {\n        get: function () {\n            return this.cell.biasConstraint;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleRNN.prototype, \"dropout\", {\n        get: function () {\n            return this.cell.dropout;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleRNN.prototype, \"recurrentDropout\", {\n        get: function () {\n            return this.cell.recurrentDropout;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SimpleRNN.prototype.getConfig = function () {\n        var config = {\n            units: this.units,\n            activation: activations_1.serializeActivation(this.activation),\n            useBias: this.useBias,\n            kernelInitializer: initializers_1.serializeInitializer(this.kernelInitializer),\n            recurrentInitializer: initializers_1.serializeInitializer(this.recurrentInitializer),\n            biasInitializer: initializers_1.serializeInitializer(this.biasInitializer),\n            kernelRegularizer: regularizers_1.serializeRegularizer(this.kernelRegularizer),\n            recurrentRegularizer: regularizers_1.serializeRegularizer(this.recurrentRegularizer),\n            biasRegularizer: regularizers_1.serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: regularizers_1.serializeRegularizer(this.activityRegularizer),\n            kernelConstraint: constraints_1.serializeConstraint(this.kernelConstraint),\n            recurrentConstraint: constraints_1.serializeConstraint(this.recurrentConstraint),\n            biasConstraint: constraints_1.serializeConstraint(this.biasConstraint),\n            dropout: this.dropout,\n            recurrentDropout: this.recurrentDropout,\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    return SimpleRNN;\n}(RNN));\nexports.SimpleRNN = SimpleRNN;\ngeneric_utils.ClassNameMap.register('SimpleRNN', SimpleRNN);\nvar GRUCell = (function (_super) {\n    __extends(GRUCell, _super);\n    function GRUCell(config) {\n        var _this = _super.call(this, config) || this;\n        _this.DEFAULT_ACTIVATION = 'tanh';\n        _this.DEFAULT_RECURRENT_ACTIVATION = 'hardSigmoid';\n        _this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n        _this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n        _this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n        _this.units = config.units;\n        _this.activation = activations_1.getActivation(config.activation === undefined ? _this.DEFAULT_ACTIVATION :\n            config.activation);\n        _this.recurrentActivation = activations_1.getActivation(config.activation === undefined ? _this.DEFAULT_RECURRENT_ACTIVATION :\n            config.recurrentActivation);\n        _this.useBias = config.useBias == null ? true : config.useBias;\n        _this.kernelInitializer = initializers_1.getInitializer(config.kernelInitializer || _this.DEFAULT_KERNEL_INITIALIZER);\n        _this.recurrentInitializer = initializers_1.getInitializer(config.recurrentInitializer || _this.DEFAULT_RECURRENT_INITIALIZER);\n        _this.biasInitializer =\n            initializers_1.getInitializer(config.biasInitializer || _this.DEFAULT_BIAS_INITIALIZER);\n        _this.kernelRegularizer = regularizers_1.getRegularizer(config.kernelRegularizer);\n        _this.recurrentRegularizer = regularizers_1.getRegularizer(config.recurrentRegularizer);\n        _this.biasRegularizer = regularizers_1.getRegularizer(config.biasRegularizer);\n        _this.kernelConstraint = constraints_1.getConstraint(config.kernelConstraint);\n        _this.recurrentConstraint = constraints_1.getConstraint(config.recurrentConstraint);\n        _this.biasConstraint = constraints_1.getConstraint(config.biasConstraint);\n        _this.dropout = math_utils.min([1, math_utils.max([0, config.dropout == null ? 0 : config.dropout])]);\n        _this.recurrentDropout = math_utils.min([\n            1,\n            math_utils.max([0, config.recurrentDropout == null ? 0 : config.recurrentDropout])\n        ]);\n        _this.implementation = config.implementation;\n        _this.stateSize = _this.units;\n        return _this;\n    }\n    GRUCell.prototype.build = function (inputShape) {\n        inputShape = generic_utils.getExactlyOneShape(inputShape);\n        var inputDim = inputShape[inputShape.length - 1];\n        this.kernel = this.addWeight('kernel', [inputDim, this.units * 3], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        this.recurrentKernel = this.addWeight('recurrent_kernel', [this.units, this.units * 3], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [this.units * 3], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        else {\n            this.bias = null;\n        }\n        this.built = true;\n    };\n    GRUCell.prototype.call = function (inputs, kwargs) {\n        if (this.dropout !== 0 || this.recurrentDropout !== 0) {\n            throw new errors_1.NotImplementedError('Dropout is not implemented for GRUCell yet');\n        }\n        inputs = inputs;\n        if (inputs.length !== 2) {\n            throw new errors_1.ValueError(\"GRUCell expects 2 input Tensors (inputs, h, c), got \" +\n                (inputs.length + \".\"));\n        }\n        var hTMinus1 = inputs[1];\n        inputs = inputs[0];\n        var z;\n        var r;\n        var hh;\n        if (this.implementation === 1) {\n            var kernelZ = K.sliceAlongLastAxis(this.kernel.read(), 0, this.units);\n            var kernelR = K.sliceAlongLastAxis(this.kernel.read(), this.units, this.units);\n            var kernelH = K.sliceAlongLastAxis(this.kernel.read(), this.units * 2, this.units);\n            var recurrentKernelZ = K.sliceAlongLastAxis(this.recurrentKernel.read(), 0, this.units);\n            var recurrentKernelR = K.sliceAlongLastAxis(this.recurrentKernel.read(), this.units, this.units);\n            var recurrentKernelH = K.sliceAlongLastAxis(this.recurrentKernel.read(), this.units * 2, this.units);\n            var inputsZ = inputs;\n            var inputsR = inputs;\n            var inputsH = inputs;\n            var xZ = K.dot(inputsZ, kernelZ);\n            var xR = K.dot(inputsR, kernelR);\n            var xH = K.dot(inputsH, kernelH);\n            if (this.useBias) {\n                var biasZ = K.sliceAlongFirstAxis(this.bias.read(), 0, this.units);\n                var biasR = K.sliceAlongFirstAxis(this.bias.read(), this.units, this.units);\n                var biasH = K.sliceAlongFirstAxis(this.bias.read(), this.units * 2, this.units);\n                xZ = K.biasAdd(xZ, biasZ);\n                xR = K.biasAdd(xR, biasR);\n                xH = K.biasAdd(xH, biasH);\n            }\n            var hTMinus1Z = hTMinus1;\n            var hTMinus1R = hTMinus1;\n            var hTMinus1H = hTMinus1;\n            z = this.recurrentActivation(K.add(xZ, K.dot(hTMinus1Z, recurrentKernelZ)));\n            r = this.recurrentActivation(K.add(xR, K.dot(hTMinus1R, recurrentKernelR)));\n            hh = this.activation(K.add(xH, K.dot(K.multiply(r, hTMinus1H), recurrentKernelH)));\n        }\n        else {\n            var matrixX = K.dot(inputs, this.kernel.read());\n            if (this.useBias) {\n                matrixX = K.biasAdd(matrixX, this.bias.read());\n            }\n            var matrixInner = K.dot(hTMinus1, K.sliceAlongLastAxis(this.recurrentKernel.read(), 0, 2 * this.units));\n            var xZ = K.sliceAlongLastAxis(matrixX, 0, this.units);\n            var xR = K.sliceAlongLastAxis(matrixX, this.units, this.units);\n            var recurrentZ = K.sliceAlongLastAxis(matrixInner, 0, this.units);\n            var recurrentR = K.sliceAlongLastAxis(matrixInner, this.units, this.units);\n            z = this.recurrentActivation(K.add(xZ, recurrentZ));\n            r = this.recurrentActivation(K.add(xR, recurrentR));\n            var xH = K.sliceAlongLastAxis(matrixX, 2 * this.units, this.units);\n            var recurrentH = K.dot(K.multiply(r, hTMinus1), K.sliceAlongLastAxis(this.recurrentKernel.read(), 2 * this.units, this.units));\n            hh = this.activation(K.add(xH, recurrentH));\n        }\n        var h = K.add(K.multiply(z, hTMinus1), K.multiply(K.scalarPlusArray(K.getScalar(1), K.neg(z)), hh));\n        return [h, h];\n    };\n    GRUCell.prototype.getConfig = function () {\n        var config = {\n            units: this.units,\n            activation: activations_1.serializeActivation(this.activation),\n            useBias: this.useBias,\n            kernelInitializer: initializers_1.serializeInitializer(this.kernelInitializer),\n            recurrentInitializer: initializers_1.serializeInitializer(this.recurrentInitializer),\n            biasInitializer: initializers_1.serializeInitializer(this.biasInitializer),\n            kernelRegularizer: regularizers_1.serializeRegularizer(this.kernelRegularizer),\n            recurrentRegularizer: regularizers_1.serializeRegularizer(this.recurrentRegularizer),\n            biasRegularizer: regularizers_1.serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: regularizers_1.serializeRegularizer(this.activityRegularizer),\n            kernelConstraint: constraints_1.serializeConstraint(this.kernelConstraint),\n            recurrentConstraint: constraints_1.serializeConstraint(this.recurrentConstraint),\n            biasConstraint: constraints_1.serializeConstraint(this.biasConstraint),\n            dropout: this.dropout,\n            recurrentDropout: this.recurrentDropout,\n            implementation: this.implementation,\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    return GRUCell;\n}(RNNCell));\nexports.GRUCell = GRUCell;\ngeneric_utils.ClassNameMap.register('GRUCell', GRUCell);\nvar GRU = (function (_super) {\n    __extends(GRU, _super);\n    function GRU(config) {\n        var _this = this;\n        if (config.implementation === 0) {\n            console.warn('`implementation=0` has been deprecated, and now defaults to ' +\n                '`implementation=1`. Please update your layer call.');\n        }\n        config.cell = new GRUCell(config);\n        _this = _super.call(this, config) || this;\n        return _this;\n    }\n    GRU.prototype.call = function (inputs, kwargs) {\n        var mask = kwargs == null ? null : kwargs['mask'];\n        var training = kwargs == null ? null : kwargs['training'];\n        var initialState = kwargs == null ? null : kwargs['initialState'];\n        return _super.prototype.call.call(this, inputs, { mask: mask, training: training, initialState: initialState });\n    };\n    Object.defineProperty(GRU.prototype, \"units\", {\n        get: function () {\n            return this.cell.units;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"activation\", {\n        get: function () {\n            return this.cell.activation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"useBias\", {\n        get: function () {\n            return this.cell.useBias;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"kernelInitializer\", {\n        get: function () {\n            return this.cell.kernelInitializer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"recurrentInitializer\", {\n        get: function () {\n            return this.cell.recurrentInitializer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"biasInitializer\", {\n        get: function () {\n            return this.cell.biasInitializer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"kernelRegularizer\", {\n        get: function () {\n            return this.cell.kernelRegularizer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"recurrentRegularizer\", {\n        get: function () {\n            return this.cell.recurrentRegularizer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"biasRegularizer\", {\n        get: function () {\n            return this.cell.biasRegularizer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"kernelConstraint\", {\n        get: function () {\n            return this.cell.kernelConstraint;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"recurrentConstraint\", {\n        get: function () {\n            return this.cell.recurrentConstraint;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"biasConstraint\", {\n        get: function () {\n            return this.cell.biasConstraint;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"dropout\", {\n        get: function () {\n            return this.cell.dropout;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"recurrentDropout\", {\n        get: function () {\n            return this.cell.recurrentDropout;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"implementation\", {\n        get: function () {\n            return this.cell.implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    GRU.prototype.getConfig = function () {\n        var config = {\n            units: this.units,\n            activation: activations_1.serializeActivation(this.activation),\n            useBias: this.useBias,\n            kernelInitializer: initializers_1.serializeInitializer(this.kernelInitializer),\n            recurrentInitializer: initializers_1.serializeInitializer(this.recurrentInitializer),\n            biasInitializer: initializers_1.serializeInitializer(this.biasInitializer),\n            kernelRegularizer: regularizers_1.serializeRegularizer(this.kernelRegularizer),\n            recurrentRegularizer: regularizers_1.serializeRegularizer(this.recurrentRegularizer),\n            biasRegularizer: regularizers_1.serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: regularizers_1.serializeRegularizer(this.activityRegularizer),\n            kernelConstraint: constraints_1.serializeConstraint(this.kernelConstraint),\n            recurrentConstraint: constraints_1.serializeConstraint(this.recurrentConstraint),\n            biasConstraint: constraints_1.serializeConstraint(this.biasConstraint),\n            dropout: this.dropout,\n            recurrentDropout: this.recurrentDropout,\n            implementation: this.implementation,\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    GRU.fromConfig = function (cls, config) {\n        if (config['implmentation'] === 0) {\n            config['implementation'] = 1;\n        }\n        return new cls(config);\n    };\n    return GRU;\n}(RNN));\nexports.GRU = GRU;\ngeneric_utils.ClassNameMap.register('GRU', GRU);\nvar LSTMCell = (function (_super) {\n    __extends(LSTMCell, _super);\n    function LSTMCell(config) {\n        var _this = _super.call(this, config) || this;\n        _this.DEFAULT_ACTIVATION = 'tanh';\n        _this.DEFAULT_RECURRENT_ACTIVATION = 'hardSigmoid';\n        _this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n        _this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n        _this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n        _this.units = config.units;\n        _this.activation = activations_1.getActivation(config.activation === undefined ? _this.DEFAULT_ACTIVATION :\n            config.activation);\n        _this.recurrentActivation = activations_1.getActivation(config.activation === undefined ? _this.DEFAULT_RECURRENT_ACTIVATION :\n            config.recurrentActivation);\n        _this.useBias = config.useBias == null ? true : config.useBias;\n        _this.kernelInitializer = initializers_1.getInitializer(config.kernelInitializer || _this.DEFAULT_KERNEL_INITIALIZER);\n        _this.recurrentInitializer = initializers_1.getInitializer(config.recurrentInitializer || _this.DEFAULT_RECURRENT_INITIALIZER);\n        _this.biasInitializer =\n            initializers_1.getInitializer(config.biasInitializer || _this.DEFAULT_BIAS_INITIALIZER);\n        _this.unitForgetBias = config.unitForgetBias;\n        _this.kernelRegularizer = regularizers_1.getRegularizer(config.kernelRegularizer);\n        _this.recurrentRegularizer = regularizers_1.getRegularizer(config.recurrentRegularizer);\n        _this.biasRegularizer = regularizers_1.getRegularizer(config.biasRegularizer);\n        _this.kernelConstraint = constraints_1.getConstraint(config.kernelConstraint);\n        _this.recurrentConstraint = constraints_1.getConstraint(config.recurrentConstraint);\n        _this.biasConstraint = constraints_1.getConstraint(config.biasConstraint);\n        _this.dropout = math_utils.min([1, math_utils.max([0, config.dropout == null ? 0 : config.dropout])]);\n        _this.recurrentDropout = math_utils.min([\n            1,\n            math_utils.max([0, config.recurrentDropout == null ? 0 : config.recurrentDropout])\n        ]);\n        _this.implementation = config.implementation;\n        _this.stateSize = [_this.units, _this.units];\n        return _this;\n    }\n    LSTMCell.prototype.build = function (inputShape) {\n        inputShape = generic_utils.getExactlyOneShape(inputShape);\n        var inputDim = inputShape[inputShape.length - 1];\n        this.kernel = this.addWeight('kernel', [inputDim, this.units * 4], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        this.recurrentKernel = this.addWeight('recurrent_kernel', [this.units, this.units * 4], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);\n        var biasInitializer;\n        if (this.useBias) {\n            if (this.unitForgetBias) {\n                var capturedBiasInit_1 = this.biasInitializer;\n                var capturedUnits_1 = this.units;\n                biasInitializer = new ((function (_super) {\n                    __extends(CustomInit, _super);\n                    function CustomInit() {\n                        return _super !== null && _super.apply(this, arguments) || this;\n                    }\n                    CustomInit.prototype.apply = function (shape, dtype) {\n                        var bI = capturedBiasInit_1.apply([capturedUnits_1]);\n                        var bF = (new initializers_1.Ones()).apply([capturedUnits_1]);\n                        var bCAndH = capturedBiasInit_1.apply([capturedUnits_1 * 2]);\n                        return K.concatAlongFirstAxis(K.concatAlongFirstAxis(bI, bF), bCAndH);\n                    };\n                    return CustomInit;\n                }(initializers_1.Initializer)))();\n            }\n            else {\n                biasInitializer = this.biasInitializer;\n            }\n            this.bias = this.addWeight('bias', [this.units * 4], null, biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        else {\n            this.bias = null;\n        }\n        this.built = true;\n    };\n    LSTMCell.prototype.call = function (inputs, kwargs) {\n        if (this.dropout !== 0 || this.recurrentDropout !== 0) {\n            throw new errors_1.NotImplementedError('Dropout is not implemented for LSTMCell yet');\n        }\n        inputs = inputs;\n        if (inputs.length !== 3) {\n            throw new errors_1.ValueError(\"LSTMCell expects 3 input Tensors (inputs, h, c), got \" +\n                (inputs.length + \".\"));\n        }\n        var hTMinus1 = inputs[1];\n        var cTMinus1 = inputs[2];\n        inputs = inputs[0];\n        var i;\n        var f;\n        var c;\n        var o;\n        if (this.implementation === 1) {\n            var kernelI = K.sliceAlongLastAxis(this.kernel.read(), 0, this.units);\n            var kernelF = K.sliceAlongLastAxis(this.kernel.read(), this.units, this.units);\n            var kernelC = K.sliceAlongLastAxis(this.kernel.read(), this.units * 2, this.units);\n            var kernelO = K.sliceAlongLastAxis(this.kernel.read(), this.units * 3, this.units);\n            var recurrentKernelI = K.sliceAlongLastAxis(this.recurrentKernel.read(), 0, this.units);\n            var recurrentKernelF = K.sliceAlongLastAxis(this.recurrentKernel.read(), this.units, this.units);\n            var recurrentKernelC = K.sliceAlongLastAxis(this.recurrentKernel.read(), this.units * 2, this.units);\n            var recurrentKernelO = K.sliceAlongLastAxis(this.recurrentKernel.read(), this.units * 3, this.units);\n            var inputsI = inputs;\n            var inputsF = inputs;\n            var inputsC = inputs;\n            var inputsO = inputs;\n            var xI = K.dot(inputsI, kernelI);\n            var xF = K.dot(inputsF, kernelF);\n            var xC = K.dot(inputsC, kernelC);\n            var xO = K.dot(inputsO, kernelO);\n            if (this.useBias) {\n                var biasI = K.sliceAlongFirstAxis(this.bias.read(), 0, this.units);\n                var biasF = K.sliceAlongFirstAxis(this.bias.read(), this.units, this.units);\n                var biasC = K.sliceAlongFirstAxis(this.bias.read(), this.units * 2, this.units);\n                var biasO = K.sliceAlongFirstAxis(this.bias.read(), this.units * 3, this.units);\n                xI = K.biasAdd(xI, biasI);\n                xF = K.biasAdd(xF, biasF);\n                xC = K.biasAdd(xC, biasC);\n                xO = K.biasAdd(xO, biasO);\n            }\n            var hTMinus1I = hTMinus1;\n            var hTMinus1F = hTMinus1;\n            var hTMinus1C = hTMinus1;\n            var hTMinus1O = hTMinus1;\n            i = this.recurrentActivation(K.add(xI, K.dot(hTMinus1I, recurrentKernelI)));\n            f = this.recurrentActivation(K.add(xF, K.dot(hTMinus1F, recurrentKernelF)));\n            c = K.add(K.multiply(f, cTMinus1), K.multiply(i, this.activation(K.add(xC, K.dot(hTMinus1C, recurrentKernelC)))));\n            o = this.recurrentActivation(K.add(xO, K.dot(hTMinus1O, recurrentKernelO)));\n        }\n        else {\n            var z = K.dot(inputs, this.kernel.read());\n            z = K.add(z, K.dot(hTMinus1, this.recurrentKernel.read()));\n            if (this.useBias) {\n                z = K.biasAdd(z, this.bias.read());\n            }\n            var z0 = K.sliceAlongLastAxis(z, 0, this.units);\n            var z1 = K.sliceAlongLastAxis(z, this.units, this.units);\n            var z2 = K.sliceAlongLastAxis(z, this.units * 2, this.units);\n            var z3 = K.sliceAlongLastAxis(z, this.units * 3, this.units);\n            i = this.recurrentActivation(z0);\n            f = this.recurrentActivation(z1);\n            c = K.add(K.multiply(f, cTMinus1), K.multiply(i, this.activation(z2)));\n            o = this.recurrentActivation(z3);\n        }\n        var h = K.multiply(o, this.activation(c));\n        return [h, h, c];\n    };\n    LSTMCell.prototype.getConfig = function () {\n        var config = {\n            units: this.units,\n            activation: activations_1.serializeActivation(this.activation),\n            useBias: this.useBias,\n            kernelInitializer: initializers_1.serializeInitializer(this.kernelInitializer),\n            recurrentInitializer: initializers_1.serializeInitializer(this.recurrentInitializer),\n            biasInitializer: initializers_1.serializeInitializer(this.biasInitializer),\n            unitForgetBias: this.unitForgetBias,\n            kernelRegularizer: regularizers_1.serializeRegularizer(this.kernelRegularizer),\n            recurrentRegularizer: regularizers_1.serializeRegularizer(this.recurrentRegularizer),\n            biasRegularizer: regularizers_1.serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: regularizers_1.serializeRegularizer(this.activityRegularizer),\n            kernelConstraint: constraints_1.serializeConstraint(this.kernelConstraint),\n            recurrentConstraint: constraints_1.serializeConstraint(this.recurrentConstraint),\n            biasConstraint: constraints_1.serializeConstraint(this.biasConstraint),\n            dropout: this.dropout,\n            recurrentDropout: this.recurrentDropout,\n            implementation: this.implementation,\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    return LSTMCell;\n}(RNNCell));\nexports.LSTMCell = LSTMCell;\ngeneric_utils.ClassNameMap.register('LSTMCell', LSTMCell);\nvar LSTM = (function (_super) {\n    __extends(LSTM, _super);\n    function LSTM(config) {\n        var _this = this;\n        if (config.implementation === 0) {\n            console.warn('`implementation=0` has been deprecated, and now defaults to ' +\n                '`implementation=1`. Please update your layer call.');\n        }\n        config.cell = new LSTMCell(config);\n        _this = _super.call(this, config) || this;\n        return _this;\n    }\n    LSTM.prototype.call = function (inputs, kwargs) {\n        var mask = kwargs == null ? null : kwargs['mask'];\n        var training = kwargs == null ? null : kwargs['training'];\n        var initialState = kwargs == null ? null : kwargs['initialState'];\n        return _super.prototype.call.call(this, inputs, { mask: mask, training: training, initialState: initialState });\n    };\n    Object.defineProperty(LSTM.prototype, \"units\", {\n        get: function () {\n            return this.cell.units;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"activation\", {\n        get: function () {\n            return this.cell.activation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"useBias\", {\n        get: function () {\n            return this.cell.useBias;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"kernelInitializer\", {\n        get: function () {\n            return this.cell.kernelInitializer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"recurrentInitializer\", {\n        get: function () {\n            return this.cell.recurrentInitializer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"biasInitializer\", {\n        get: function () {\n            return this.cell.biasInitializer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"unitForgetBias\", {\n        get: function () {\n            return this.cell.unitForgetBias;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"kernelRegularizer\", {\n        get: function () {\n            return this.cell.kernelRegularizer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"recurrentRegularizer\", {\n        get: function () {\n            return this.cell.recurrentRegularizer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"biasRegularizer\", {\n        get: function () {\n            return this.cell.biasRegularizer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"kernelConstraint\", {\n        get: function () {\n            return this.cell.kernelConstraint;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"recurrentConstraint\", {\n        get: function () {\n            return this.cell.recurrentConstraint;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"biasConstraint\", {\n        get: function () {\n            return this.cell.biasConstraint;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"dropout\", {\n        get: function () {\n            return this.cell.dropout;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"recurrentDropout\", {\n        get: function () {\n            return this.cell.recurrentDropout;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"implementation\", {\n        get: function () {\n            return this.cell.implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    LSTM.prototype.getConfig = function () {\n        var config = {\n            units: this.units,\n            activation: activations_1.serializeActivation(this.activation),\n            useBias: this.useBias,\n            kernelInitializer: initializers_1.serializeInitializer(this.kernelInitializer),\n            recurrentInitializer: initializers_1.serializeInitializer(this.recurrentInitializer),\n            biasInitializer: initializers_1.serializeInitializer(this.biasInitializer),\n            unitForgetBias: this.unitForgetBias,\n            kernelRegularizer: regularizers_1.serializeRegularizer(this.kernelRegularizer),\n            recurrentRegularizer: regularizers_1.serializeRegularizer(this.recurrentRegularizer),\n            biasRegularizer: regularizers_1.serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: regularizers_1.serializeRegularizer(this.activityRegularizer),\n            kernelConstraint: constraints_1.serializeConstraint(this.kernelConstraint),\n            recurrentConstraint: constraints_1.serializeConstraint(this.recurrentConstraint),\n            biasConstraint: constraints_1.serializeConstraint(this.biasConstraint),\n            dropout: this.dropout,\n            recurrentDropout: this.recurrentDropout,\n            implementation: this.implementation,\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    LSTM.fromConfig = function (cls, config) {\n        if (config['implmentation'] === 0) {\n            config['implementation'] = 1;\n        }\n        return new cls(config);\n    };\n    return LSTM;\n}(RNN));\nexports.LSTM = LSTM;\ngeneric_utils.ClassNameMap.register('LSTM', LSTM);\nvar StackedRNNCells = (function (_super) {\n    __extends(StackedRNNCells, _super);\n    function StackedRNNCells(config) {\n        var _this = _super.call(this, config) || this;\n        _this.cells = config.cells;\n        return _this;\n    }\n    Object.defineProperty(StackedRNNCells.prototype, \"stateSize\", {\n        get: function () {\n            var stateSize = [];\n            for (var _i = 0, _a = this.cells.slice().reverse(); _i < _a.length; _i++) {\n                var cell = _a[_i];\n                if (Array.isArray(cell.stateSize)) {\n                    stateSize.push.apply(stateSize, cell.stateSize);\n                }\n                else {\n                    stateSize.push(cell.stateSize);\n                }\n            }\n            return stateSize;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    StackedRNNCells.prototype.call = function (inputs, kwargs) {\n        inputs = inputs;\n        var states = inputs.slice(1);\n        var nestedStates = [];\n        for (var _i = 0, _a = this.cells.slice().reverse(); _i < _a.length; _i++) {\n            var cell = _a[_i];\n            if (Array.isArray(cell.stateSize)) {\n                nestedStates.push(states.splice(0, cell.stateSize.length));\n            }\n            else {\n                nestedStates.push(states.splice(0, 1));\n            }\n        }\n        nestedStates.reverse();\n        var newNestedStates = [];\n        var callInputs;\n        for (var i = 0; i < this.cells.length; ++i) {\n            var cell = this.cells[i];\n            states = nestedStates[i];\n            if (i === 0) {\n                callInputs = [inputs[0]].concat(states);\n            }\n            else {\n                callInputs = [callInputs[0]].concat(states);\n            }\n            callInputs = cell.call(callInputs, kwargs);\n            newNestedStates.push(callInputs.slice(1));\n        }\n        states = [];\n        for (var _b = 0, _c = newNestedStates.slice().reverse(); _b < _c.length; _b++) {\n            var cellStates = _c[_b];\n            states.push.apply(states, cellStates);\n        }\n        return [callInputs[0]].concat(states);\n    };\n    StackedRNNCells.prototype.build = function (inputShape) {\n        if (generic_utils.isArrayOfShapes(inputShape)) {\n            inputShape = inputShape[0];\n        }\n        inputShape = inputShape;\n        var outputDim;\n        for (var _i = 0, _a = this.cells; _i < _a.length; _i++) {\n            var cell = _a[_i];\n            cell.build(inputShape);\n            if (Array.isArray(cell.stateSize)) {\n                outputDim = cell.stateSize[0];\n            }\n            else {\n                outputDim = cell.stateSize;\n            }\n            inputShape = [inputShape[0], outputDim];\n        }\n        this.built = true;\n    };\n    StackedRNNCells.prototype.getConfig = function () {\n        var cellConfigs = [];\n        for (var _i = 0, _a = this.cells; _i < _a.length; _i++) {\n            var cell = _a[_i];\n            cellConfigs.push({\n                'className': this.constructor.name,\n                'config': cell.getConfig(),\n            });\n        }\n        var config = { 'cells': cellConfigs };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    StackedRNNCells.fromConfig = function (cls, config, customObjects) {\n        if (customObjects === void 0) { customObjects = {}; }\n        var cells = [];\n        for (var _i = 0, _a = config['cells']; _i < _a.length; _i++) {\n            var cellConfig = _a[_i];\n            cells.push(serialization_1.deserialize(cellConfig, customObjects));\n        }\n        return new cls({ cells: cells });\n    };\n    Object.defineProperty(StackedRNNCells.prototype, \"trainableWeights\", {\n        get: function () {\n            if (!this.trainable) {\n                return [];\n            }\n            var weights = [];\n            for (var _i = 0, _a = this.cells; _i < _a.length; _i++) {\n                var cell = _a[_i];\n                weights.push.apply(weights, cell.trainableWeights);\n            }\n            return weights;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(StackedRNNCells.prototype, \"nonTrainableWeights\", {\n        get: function () {\n            var weights = [];\n            for (var _i = 0, _a = this.cells; _i < _a.length; _i++) {\n                var cell = _a[_i];\n                weights.push.apply(weights, cell.nonTrainableWeights);\n            }\n            if (!this.trainable) {\n                var trainableWeights = [];\n                for (var _b = 0, _c = this.cells; _b < _c.length; _b++) {\n                    var cell = _c[_b];\n                    trainableWeights.push.apply(trainableWeights, cell.trainableWeights);\n                }\n                return trainableWeights.concat(weights);\n            }\n            return weights;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    StackedRNNCells.prototype.getWeights = function () {\n        var weights = [];\n        for (var _i = 0, _a = this.cells; _i < _a.length; _i++) {\n            var cell = _a[_i];\n            weights.push.apply(weights, cell.weights);\n        }\n        return K.batchGetValue(weights);\n    };\n    StackedRNNCells.prototype.setWeights = function (weights) {\n        var tuples = [];\n        for (var _i = 0, _a = this.cells; _i < _a.length; _i++) {\n            var cell = _a[_i];\n            var numParams = cell.weights.length;\n            var inputWeights = weights.splice(numParams);\n            for (var i = 0; i < cell.weights.length; ++i) {\n                tuples.push([cell.weights[i], inputWeights[i]]);\n            }\n        }\n        K.batchSetValue(tuples);\n    };\n    return StackedRNNCells;\n}(RNNCell));\nexports.StackedRNNCells = StackedRNNCells;\ngeneric_utils.ClassNameMap.register('StackedRNNCells', StackedRNNCells);\n","map":{"mappings":[{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":607,"column":0},"generated":{"line":607,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":608,"column":0},"generated":{"line":608,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":609,"column":0},"generated":{"line":609,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":610,"column":0},"generated":{"line":610,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":611,"column":0},"generated":{"line":611,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":612,"column":0},"generated":{"line":612,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":613,"column":0},"generated":{"line":613,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":614,"column":0},"generated":{"line":614,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":615,"column":0},"generated":{"line":615,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":616,"column":0},"generated":{"line":616,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":617,"column":0},"generated":{"line":617,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":618,"column":0},"generated":{"line":618,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":619,"column":0},"generated":{"line":619,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":620,"column":0},"generated":{"line":620,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":621,"column":0},"generated":{"line":621,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":622,"column":0},"generated":{"line":622,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":623,"column":0},"generated":{"line":623,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":624,"column":0},"generated":{"line":624,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":625,"column":0},"generated":{"line":625,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":626,"column":0},"generated":{"line":626,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":627,"column":0},"generated":{"line":627,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":628,"column":0},"generated":{"line":628,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":629,"column":0},"generated":{"line":629,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":630,"column":0},"generated":{"line":630,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":631,"column":0},"generated":{"line":631,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":632,"column":0},"generated":{"line":632,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":633,"column":0},"generated":{"line":633,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":634,"column":0},"generated":{"line":634,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":635,"column":0},"generated":{"line":635,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":636,"column":0},"generated":{"line":636,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":637,"column":0},"generated":{"line":637,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":638,"column":0},"generated":{"line":638,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":639,"column":0},"generated":{"line":639,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":640,"column":0},"generated":{"line":640,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":641,"column":0},"generated":{"line":641,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":642,"column":0},"generated":{"line":642,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":643,"column":0},"generated":{"line":643,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":644,"column":0},"generated":{"line":644,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":645,"column":0},"generated":{"line":645,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":646,"column":0},"generated":{"line":646,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":647,"column":0},"generated":{"line":647,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":648,"column":0},"generated":{"line":648,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":649,"column":0},"generated":{"line":649,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":650,"column":0},"generated":{"line":650,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":651,"column":0},"generated":{"line":651,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":652,"column":0},"generated":{"line":652,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":653,"column":0},"generated":{"line":653,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":654,"column":0},"generated":{"line":654,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":655,"column":0},"generated":{"line":655,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":656,"column":0},"generated":{"line":656,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":657,"column":0},"generated":{"line":657,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":658,"column":0},"generated":{"line":658,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":659,"column":0},"generated":{"line":659,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":660,"column":0},"generated":{"line":660,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":661,"column":0},"generated":{"line":661,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":662,"column":0},"generated":{"line":662,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":663,"column":0},"generated":{"line":663,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":664,"column":0},"generated":{"line":664,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":665,"column":0},"generated":{"line":665,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":666,"column":0},"generated":{"line":666,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":667,"column":0},"generated":{"line":667,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":668,"column":0},"generated":{"line":668,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":669,"column":0},"generated":{"line":669,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":670,"column":0},"generated":{"line":670,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":671,"column":0},"generated":{"line":671,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":672,"column":0},"generated":{"line":672,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":673,"column":0},"generated":{"line":673,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":674,"column":0},"generated":{"line":674,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":675,"column":0},"generated":{"line":675,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":676,"column":0},"generated":{"line":676,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":677,"column":0},"generated":{"line":677,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":678,"column":0},"generated":{"line":678,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":679,"column":0},"generated":{"line":679,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":680,"column":0},"generated":{"line":680,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":681,"column":0},"generated":{"line":681,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":682,"column":0},"generated":{"line":682,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":683,"column":0},"generated":{"line":683,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":684,"column":0},"generated":{"line":684,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":685,"column":0},"generated":{"line":685,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":686,"column":0},"generated":{"line":686,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":687,"column":0},"generated":{"line":687,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":688,"column":0},"generated":{"line":688,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":689,"column":0},"generated":{"line":689,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":690,"column":0},"generated":{"line":690,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":691,"column":0},"generated":{"line":691,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":692,"column":0},"generated":{"line":692,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":693,"column":0},"generated":{"line":693,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":694,"column":0},"generated":{"line":694,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":695,"column":0},"generated":{"line":695,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":696,"column":0},"generated":{"line":696,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":697,"column":0},"generated":{"line":697,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":698,"column":0},"generated":{"line":698,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":699,"column":0},"generated":{"line":699,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":700,"column":0},"generated":{"line":700,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":701,"column":0},"generated":{"line":701,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":702,"column":0},"generated":{"line":702,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":703,"column":0},"generated":{"line":703,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":704,"column":0},"generated":{"line":704,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":705,"column":0},"generated":{"line":705,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":706,"column":0},"generated":{"line":706,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":707,"column":0},"generated":{"line":707,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":708,"column":0},"generated":{"line":708,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":709,"column":0},"generated":{"line":709,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":710,"column":0},"generated":{"line":710,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":711,"column":0},"generated":{"line":711,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":712,"column":0},"generated":{"line":712,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":713,"column":0},"generated":{"line":713,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":714,"column":0},"generated":{"line":714,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":715,"column":0},"generated":{"line":715,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":716,"column":0},"generated":{"line":716,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":717,"column":0},"generated":{"line":717,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":718,"column":0},"generated":{"line":718,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":719,"column":0},"generated":{"line":719,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":720,"column":0},"generated":{"line":720,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":721,"column":0},"generated":{"line":721,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":722,"column":0},"generated":{"line":722,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":723,"column":0},"generated":{"line":723,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":724,"column":0},"generated":{"line":724,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":725,"column":0},"generated":{"line":725,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":726,"column":0},"generated":{"line":726,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":727,"column":0},"generated":{"line":727,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":728,"column":0},"generated":{"line":728,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":729,"column":0},"generated":{"line":729,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":730,"column":0},"generated":{"line":730,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":731,"column":0},"generated":{"line":731,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":732,"column":0},"generated":{"line":732,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":733,"column":0},"generated":{"line":733,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":734,"column":0},"generated":{"line":734,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":735,"column":0},"generated":{"line":735,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":736,"column":0},"generated":{"line":736,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":737,"column":0},"generated":{"line":737,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":738,"column":0},"generated":{"line":738,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":739,"column":0},"generated":{"line":739,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":740,"column":0},"generated":{"line":740,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":741,"column":0},"generated":{"line":741,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":742,"column":0},"generated":{"line":742,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":743,"column":0},"generated":{"line":743,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":744,"column":0},"generated":{"line":744,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":745,"column":0},"generated":{"line":745,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":746,"column":0},"generated":{"line":746,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":747,"column":0},"generated":{"line":747,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":748,"column":0},"generated":{"line":748,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":749,"column":0},"generated":{"line":749,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":750,"column":0},"generated":{"line":750,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":751,"column":0},"generated":{"line":751,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":752,"column":0},"generated":{"line":752,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":753,"column":0},"generated":{"line":753,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":754,"column":0},"generated":{"line":754,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":755,"column":0},"generated":{"line":755,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":756,"column":0},"generated":{"line":756,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":757,"column":0},"generated":{"line":757,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":758,"column":0},"generated":{"line":758,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":759,"column":0},"generated":{"line":759,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":760,"column":0},"generated":{"line":760,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":761,"column":0},"generated":{"line":761,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":762,"column":0},"generated":{"line":762,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":763,"column":0},"generated":{"line":763,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":764,"column":0},"generated":{"line":764,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":765,"column":0},"generated":{"line":765,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":766,"column":0},"generated":{"line":766,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":767,"column":0},"generated":{"line":767,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":768,"column":0},"generated":{"line":768,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":769,"column":0},"generated":{"line":769,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":770,"column":0},"generated":{"line":770,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":771,"column":0},"generated":{"line":771,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":772,"column":0},"generated":{"line":772,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":773,"column":0},"generated":{"line":773,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":774,"column":0},"generated":{"line":774,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":775,"column":0},"generated":{"line":775,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":776,"column":0},"generated":{"line":776,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":777,"column":0},"generated":{"line":777,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":778,"column":0},"generated":{"line":778,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":779,"column":0},"generated":{"line":779,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":780,"column":0},"generated":{"line":780,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":781,"column":0},"generated":{"line":781,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":782,"column":0},"generated":{"line":782,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":783,"column":0},"generated":{"line":783,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":784,"column":0},"generated":{"line":784,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":785,"column":0},"generated":{"line":785,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":786,"column":0},"generated":{"line":786,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":787,"column":0},"generated":{"line":787,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":788,"column":0},"generated":{"line":788,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":789,"column":0},"generated":{"line":789,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":790,"column":0},"generated":{"line":790,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":791,"column":0},"generated":{"line":791,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":792,"column":0},"generated":{"line":792,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":793,"column":0},"generated":{"line":793,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":794,"column":0},"generated":{"line":794,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":795,"column":0},"generated":{"line":795,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":796,"column":0},"generated":{"line":796,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":797,"column":0},"generated":{"line":797,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":798,"column":0},"generated":{"line":798,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":799,"column":0},"generated":{"line":799,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":800,"column":0},"generated":{"line":800,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":801,"column":0},"generated":{"line":801,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":802,"column":0},"generated":{"line":802,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":803,"column":0},"generated":{"line":803,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":804,"column":0},"generated":{"line":804,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":805,"column":0},"generated":{"line":805,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":806,"column":0},"generated":{"line":806,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":807,"column":0},"generated":{"line":807,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":808,"column":0},"generated":{"line":808,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":809,"column":0},"generated":{"line":809,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":810,"column":0},"generated":{"line":810,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":811,"column":0},"generated":{"line":811,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":812,"column":0},"generated":{"line":812,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":813,"column":0},"generated":{"line":813,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":814,"column":0},"generated":{"line":814,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":815,"column":0},"generated":{"line":815,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":816,"column":0},"generated":{"line":816,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":817,"column":0},"generated":{"line":817,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":818,"column":0},"generated":{"line":818,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":819,"column":0},"generated":{"line":819,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":820,"column":0},"generated":{"line":820,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":821,"column":0},"generated":{"line":821,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":822,"column":0},"generated":{"line":822,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":823,"column":0},"generated":{"line":823,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":824,"column":0},"generated":{"line":824,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":825,"column":0},"generated":{"line":825,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":826,"column":0},"generated":{"line":826,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":827,"column":0},"generated":{"line":827,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":828,"column":0},"generated":{"line":828,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":829,"column":0},"generated":{"line":829,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":830,"column":0},"generated":{"line":830,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":831,"column":0},"generated":{"line":831,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":832,"column":0},"generated":{"line":832,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":833,"column":0},"generated":{"line":833,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":834,"column":0},"generated":{"line":834,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":835,"column":0},"generated":{"line":835,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":836,"column":0},"generated":{"line":836,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":837,"column":0},"generated":{"line":837,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":838,"column":0},"generated":{"line":838,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":839,"column":0},"generated":{"line":839,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":840,"column":0},"generated":{"line":840,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":841,"column":0},"generated":{"line":841,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":842,"column":0},"generated":{"line":842,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":843,"column":0},"generated":{"line":843,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":844,"column":0},"generated":{"line":844,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":845,"column":0},"generated":{"line":845,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":846,"column":0},"generated":{"line":846,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":847,"column":0},"generated":{"line":847,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":848,"column":0},"generated":{"line":848,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":849,"column":0},"generated":{"line":849,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":850,"column":0},"generated":{"line":850,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":851,"column":0},"generated":{"line":851,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":852,"column":0},"generated":{"line":852,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":853,"column":0},"generated":{"line":853,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":854,"column":0},"generated":{"line":854,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":855,"column":0},"generated":{"line":855,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":856,"column":0},"generated":{"line":856,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":857,"column":0},"generated":{"line":857,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":858,"column":0},"generated":{"line":858,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":859,"column":0},"generated":{"line":859,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":860,"column":0},"generated":{"line":860,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":861,"column":0},"generated":{"line":861,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":862,"column":0},"generated":{"line":862,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":863,"column":0},"generated":{"line":863,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":864,"column":0},"generated":{"line":864,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":865,"column":0},"generated":{"line":865,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":866,"column":0},"generated":{"line":866,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":867,"column":0},"generated":{"line":867,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":868,"column":0},"generated":{"line":868,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":869,"column":0},"generated":{"line":869,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":870,"column":0},"generated":{"line":870,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":871,"column":0},"generated":{"line":871,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":872,"column":0},"generated":{"line":872,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":873,"column":0},"generated":{"line":873,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":874,"column":0},"generated":{"line":874,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":875,"column":0},"generated":{"line":875,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":876,"column":0},"generated":{"line":876,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":877,"column":0},"generated":{"line":877,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":878,"column":0},"generated":{"line":878,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":879,"column":0},"generated":{"line":879,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":880,"column":0},"generated":{"line":880,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":881,"column":0},"generated":{"line":881,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":882,"column":0},"generated":{"line":882,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":883,"column":0},"generated":{"line":883,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":884,"column":0},"generated":{"line":884,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":885,"column":0},"generated":{"line":885,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":886,"column":0},"generated":{"line":886,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":887,"column":0},"generated":{"line":887,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":888,"column":0},"generated":{"line":888,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":889,"column":0},"generated":{"line":889,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":890,"column":0},"generated":{"line":890,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":891,"column":0},"generated":{"line":891,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":892,"column":0},"generated":{"line":892,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":893,"column":0},"generated":{"line":893,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":894,"column":0},"generated":{"line":894,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":895,"column":0},"generated":{"line":895,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":896,"column":0},"generated":{"line":896,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":897,"column":0},"generated":{"line":897,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":898,"column":0},"generated":{"line":898,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":899,"column":0},"generated":{"line":899,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":900,"column":0},"generated":{"line":900,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":901,"column":0},"generated":{"line":901,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":902,"column":0},"generated":{"line":902,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":903,"column":0},"generated":{"line":903,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":904,"column":0},"generated":{"line":904,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":905,"column":0},"generated":{"line":905,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":906,"column":0},"generated":{"line":906,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":907,"column":0},"generated":{"line":907,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":908,"column":0},"generated":{"line":908,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":909,"column":0},"generated":{"line":909,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":910,"column":0},"generated":{"line":910,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":911,"column":0},"generated":{"line":911,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":912,"column":0},"generated":{"line":912,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":913,"column":0},"generated":{"line":913,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":914,"column":0},"generated":{"line":914,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":915,"column":0},"generated":{"line":915,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":916,"column":0},"generated":{"line":916,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":917,"column":0},"generated":{"line":917,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":918,"column":0},"generated":{"line":918,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":919,"column":0},"generated":{"line":919,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":920,"column":0},"generated":{"line":920,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":921,"column":0},"generated":{"line":921,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":922,"column":0},"generated":{"line":922,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":923,"column":0},"generated":{"line":923,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":924,"column":0},"generated":{"line":924,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":925,"column":0},"generated":{"line":925,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":926,"column":0},"generated":{"line":926,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":927,"column":0},"generated":{"line":927,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":928,"column":0},"generated":{"line":928,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":929,"column":0},"generated":{"line":929,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":930,"column":0},"generated":{"line":930,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":931,"column":0},"generated":{"line":931,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":932,"column":0},"generated":{"line":932,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":933,"column":0},"generated":{"line":933,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":934,"column":0},"generated":{"line":934,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":935,"column":0},"generated":{"line":935,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":936,"column":0},"generated":{"line":936,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":937,"column":0},"generated":{"line":937,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":938,"column":0},"generated":{"line":938,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":939,"column":0},"generated":{"line":939,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":940,"column":0},"generated":{"line":940,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":941,"column":0},"generated":{"line":941,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":942,"column":0},"generated":{"line":942,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":943,"column":0},"generated":{"line":943,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":944,"column":0},"generated":{"line":944,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":945,"column":0},"generated":{"line":945,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":946,"column":0},"generated":{"line":946,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":947,"column":0},"generated":{"line":947,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":948,"column":0},"generated":{"line":948,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":949,"column":0},"generated":{"line":949,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":950,"column":0},"generated":{"line":950,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":951,"column":0},"generated":{"line":951,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":952,"column":0},"generated":{"line":952,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":953,"column":0},"generated":{"line":953,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":954,"column":0},"generated":{"line":954,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":955,"column":0},"generated":{"line":955,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":956,"column":0},"generated":{"line":956,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":957,"column":0},"generated":{"line":957,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":958,"column":0},"generated":{"line":958,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":959,"column":0},"generated":{"line":959,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":960,"column":0},"generated":{"line":960,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":961,"column":0},"generated":{"line":961,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":962,"column":0},"generated":{"line":962,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":963,"column":0},"generated":{"line":963,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":964,"column":0},"generated":{"line":964,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":965,"column":0},"generated":{"line":965,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":966,"column":0},"generated":{"line":966,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":967,"column":0},"generated":{"line":967,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":968,"column":0},"generated":{"line":968,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":969,"column":0},"generated":{"line":969,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":970,"column":0},"generated":{"line":970,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":971,"column":0},"generated":{"line":971,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":972,"column":0},"generated":{"line":972,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":973,"column":0},"generated":{"line":973,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":974,"column":0},"generated":{"line":974,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":975,"column":0},"generated":{"line":975,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":976,"column":0},"generated":{"line":976,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":977,"column":0},"generated":{"line":977,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":978,"column":0},"generated":{"line":978,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":979,"column":0},"generated":{"line":979,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":980,"column":0},"generated":{"line":980,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":981,"column":0},"generated":{"line":981,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":982,"column":0},"generated":{"line":982,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":983,"column":0},"generated":{"line":983,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":984,"column":0},"generated":{"line":984,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":985,"column":0},"generated":{"line":985,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":986,"column":0},"generated":{"line":986,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":987,"column":0},"generated":{"line":987,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":988,"column":0},"generated":{"line":988,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":989,"column":0},"generated":{"line":989,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":990,"column":0},"generated":{"line":990,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":991,"column":0},"generated":{"line":991,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":992,"column":0},"generated":{"line":992,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":993,"column":0},"generated":{"line":993,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":994,"column":0},"generated":{"line":994,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":995,"column":0},"generated":{"line":995,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":996,"column":0},"generated":{"line":996,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":997,"column":0},"generated":{"line":997,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":998,"column":0},"generated":{"line":998,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":999,"column":0},"generated":{"line":999,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1000,"column":0},"generated":{"line":1000,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1001,"column":0},"generated":{"line":1001,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1002,"column":0},"generated":{"line":1002,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1003,"column":0},"generated":{"line":1003,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1004,"column":0},"generated":{"line":1004,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1005,"column":0},"generated":{"line":1005,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1006,"column":0},"generated":{"line":1006,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1007,"column":0},"generated":{"line":1007,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1008,"column":0},"generated":{"line":1008,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1009,"column":0},"generated":{"line":1009,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1010,"column":0},"generated":{"line":1010,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1011,"column":0},"generated":{"line":1011,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1012,"column":0},"generated":{"line":1012,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1013,"column":0},"generated":{"line":1013,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1014,"column":0},"generated":{"line":1014,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1015,"column":0},"generated":{"line":1015,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1016,"column":0},"generated":{"line":1016,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1017,"column":0},"generated":{"line":1017,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1018,"column":0},"generated":{"line":1018,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1019,"column":0},"generated":{"line":1019,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1020,"column":0},"generated":{"line":1020,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1021,"column":0},"generated":{"line":1021,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1022,"column":0},"generated":{"line":1022,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1023,"column":0},"generated":{"line":1023,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1024,"column":0},"generated":{"line":1024,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1025,"column":0},"generated":{"line":1025,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1026,"column":0},"generated":{"line":1026,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1027,"column":0},"generated":{"line":1027,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1028,"column":0},"generated":{"line":1028,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1029,"column":0},"generated":{"line":1029,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1030,"column":0},"generated":{"line":1030,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1031,"column":0},"generated":{"line":1031,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1032,"column":0},"generated":{"line":1032,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1033,"column":0},"generated":{"line":1033,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1034,"column":0},"generated":{"line":1034,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1035,"column":0},"generated":{"line":1035,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1036,"column":0},"generated":{"line":1036,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1037,"column":0},"generated":{"line":1037,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1038,"column":0},"generated":{"line":1038,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1039,"column":0},"generated":{"line":1039,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1040,"column":0},"generated":{"line":1040,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1041,"column":0},"generated":{"line":1041,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1042,"column":0},"generated":{"line":1042,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1043,"column":0},"generated":{"line":1043,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1044,"column":0},"generated":{"line":1044,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1045,"column":0},"generated":{"line":1045,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1046,"column":0},"generated":{"line":1046,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1047,"column":0},"generated":{"line":1047,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1048,"column":0},"generated":{"line":1048,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1049,"column":0},"generated":{"line":1049,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1050,"column":0},"generated":{"line":1050,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1051,"column":0},"generated":{"line":1051,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1052,"column":0},"generated":{"line":1052,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1053,"column":0},"generated":{"line":1053,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1054,"column":0},"generated":{"line":1054,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1055,"column":0},"generated":{"line":1055,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1056,"column":0},"generated":{"line":1056,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1057,"column":0},"generated":{"line":1057,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1058,"column":0},"generated":{"line":1058,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1059,"column":0},"generated":{"line":1059,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1060,"column":0},"generated":{"line":1060,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1061,"column":0},"generated":{"line":1061,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1062,"column":0},"generated":{"line":1062,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1063,"column":0},"generated":{"line":1063,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1064,"column":0},"generated":{"line":1064,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1065,"column":0},"generated":{"line":1065,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1066,"column":0},"generated":{"line":1066,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1067,"column":0},"generated":{"line":1067,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1068,"column":0},"generated":{"line":1068,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1069,"column":0},"generated":{"line":1069,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1070,"column":0},"generated":{"line":1070,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1071,"column":0},"generated":{"line":1071,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1072,"column":0},"generated":{"line":1072,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1073,"column":0},"generated":{"line":1073,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1074,"column":0},"generated":{"line":1074,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1075,"column":0},"generated":{"line":1075,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1076,"column":0},"generated":{"line":1076,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1077,"column":0},"generated":{"line":1077,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1078,"column":0},"generated":{"line":1078,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1079,"column":0},"generated":{"line":1079,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1080,"column":0},"generated":{"line":1080,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1081,"column":0},"generated":{"line":1081,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1082,"column":0},"generated":{"line":1082,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1083,"column":0},"generated":{"line":1083,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1084,"column":0},"generated":{"line":1084,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1085,"column":0},"generated":{"line":1085,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1086,"column":0},"generated":{"line":1086,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1087,"column":0},"generated":{"line":1087,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1088,"column":0},"generated":{"line":1088,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1089,"column":0},"generated":{"line":1089,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1090,"column":0},"generated":{"line":1090,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1091,"column":0},"generated":{"line":1091,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1092,"column":0},"generated":{"line":1092,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1093,"column":0},"generated":{"line":1093,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1094,"column":0},"generated":{"line":1094,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1095,"column":0},"generated":{"line":1095,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1096,"column":0},"generated":{"line":1096,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1097,"column":0},"generated":{"line":1097,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1098,"column":0},"generated":{"line":1098,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1099,"column":0},"generated":{"line":1099,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1100,"column":0},"generated":{"line":1100,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1101,"column":0},"generated":{"line":1101,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1102,"column":0},"generated":{"line":1102,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1103,"column":0},"generated":{"line":1103,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1104,"column":0},"generated":{"line":1104,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1105,"column":0},"generated":{"line":1105,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1106,"column":0},"generated":{"line":1106,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1107,"column":0},"generated":{"line":1107,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1108,"column":0},"generated":{"line":1108,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1109,"column":0},"generated":{"line":1109,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1110,"column":0},"generated":{"line":1110,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1111,"column":0},"generated":{"line":1111,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1112,"column":0},"generated":{"line":1112,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1113,"column":0},"generated":{"line":1113,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1114,"column":0},"generated":{"line":1114,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1115,"column":0},"generated":{"line":1115,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1116,"column":0},"generated":{"line":1116,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1117,"column":0},"generated":{"line":1117,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1118,"column":0},"generated":{"line":1118,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1119,"column":0},"generated":{"line":1119,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1120,"column":0},"generated":{"line":1120,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1121,"column":0},"generated":{"line":1121,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1122,"column":0},"generated":{"line":1122,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1123,"column":0},"generated":{"line":1123,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1124,"column":0},"generated":{"line":1124,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1125,"column":0},"generated":{"line":1125,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1126,"column":0},"generated":{"line":1126,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1127,"column":0},"generated":{"line":1127,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1128,"column":0},"generated":{"line":1128,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1129,"column":0},"generated":{"line":1129,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1130,"column":0},"generated":{"line":1130,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1131,"column":0},"generated":{"line":1131,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1132,"column":0},"generated":{"line":1132,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1133,"column":0},"generated":{"line":1133,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1134,"column":0},"generated":{"line":1134,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1135,"column":0},"generated":{"line":1135,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1136,"column":0},"generated":{"line":1136,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1137,"column":0},"generated":{"line":1137,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1138,"column":0},"generated":{"line":1138,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1139,"column":0},"generated":{"line":1139,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1140,"column":0},"generated":{"line":1140,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1141,"column":0},"generated":{"line":1141,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1142,"column":0},"generated":{"line":1142,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1143,"column":0},"generated":{"line":1143,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1144,"column":0},"generated":{"line":1144,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1145,"column":0},"generated":{"line":1145,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1146,"column":0},"generated":{"line":1146,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1147,"column":0},"generated":{"line":1147,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1148,"column":0},"generated":{"line":1148,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1149,"column":0},"generated":{"line":1149,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1150,"column":0},"generated":{"line":1150,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1151,"column":0},"generated":{"line":1151,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1152,"column":0},"generated":{"line":1152,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1153,"column":0},"generated":{"line":1153,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1154,"column":0},"generated":{"line":1154,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1155,"column":0},"generated":{"line":1155,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1156,"column":0},"generated":{"line":1156,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1157,"column":0},"generated":{"line":1157,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1158,"column":0},"generated":{"line":1158,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1159,"column":0},"generated":{"line":1159,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1160,"column":0},"generated":{"line":1160,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1161,"column":0},"generated":{"line":1161,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1162,"column":0},"generated":{"line":1162,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1163,"column":0},"generated":{"line":1163,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1164,"column":0},"generated":{"line":1164,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1165,"column":0},"generated":{"line":1165,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1166,"column":0},"generated":{"line":1166,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1167,"column":0},"generated":{"line":1167,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1168,"column":0},"generated":{"line":1168,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1169,"column":0},"generated":{"line":1169,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1170,"column":0},"generated":{"line":1170,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1171,"column":0},"generated":{"line":1171,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1172,"column":0},"generated":{"line":1172,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1173,"column":0},"generated":{"line":1173,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1174,"column":0},"generated":{"line":1174,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1175,"column":0},"generated":{"line":1175,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1176,"column":0},"generated":{"line":1176,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1177,"column":0},"generated":{"line":1177,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1178,"column":0},"generated":{"line":1178,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1179,"column":0},"generated":{"line":1179,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1180,"column":0},"generated":{"line":1180,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1181,"column":0},"generated":{"line":1181,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1182,"column":0},"generated":{"line":1182,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1183,"column":0},"generated":{"line":1183,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1184,"column":0},"generated":{"line":1184,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1185,"column":0},"generated":{"line":1185,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1186,"column":0},"generated":{"line":1186,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1187,"column":0},"generated":{"line":1187,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1188,"column":0},"generated":{"line":1188,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1189,"column":0},"generated":{"line":1189,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1190,"column":0},"generated":{"line":1190,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1191,"column":0},"generated":{"line":1191,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1192,"column":0},"generated":{"line":1192,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1193,"column":0},"generated":{"line":1193,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1194,"column":0},"generated":{"line":1194,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1195,"column":0},"generated":{"line":1195,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1196,"column":0},"generated":{"line":1196,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1197,"column":0},"generated":{"line":1197,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1198,"column":0},"generated":{"line":1198,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1199,"column":0},"generated":{"line":1199,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1200,"column":0},"generated":{"line":1200,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1201,"column":0},"generated":{"line":1201,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1202,"column":0},"generated":{"line":1202,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1203,"column":0},"generated":{"line":1203,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1204,"column":0},"generated":{"line":1204,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1205,"column":0},"generated":{"line":1205,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1206,"column":0},"generated":{"line":1206,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1207,"column":0},"generated":{"line":1207,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1208,"column":0},"generated":{"line":1208,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1209,"column":0},"generated":{"line":1209,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1210,"column":0},"generated":{"line":1210,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1211,"column":0},"generated":{"line":1211,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1212,"column":0},"generated":{"line":1212,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1213,"column":0},"generated":{"line":1213,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1214,"column":0},"generated":{"line":1214,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1215,"column":0},"generated":{"line":1215,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1216,"column":0},"generated":{"line":1216,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1217,"column":0},"generated":{"line":1217,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1218,"column":0},"generated":{"line":1218,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1219,"column":0},"generated":{"line":1219,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1220,"column":0},"generated":{"line":1220,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1221,"column":0},"generated":{"line":1221,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1222,"column":0},"generated":{"line":1222,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1223,"column":0},"generated":{"line":1223,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1224,"column":0},"generated":{"line":1224,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1225,"column":0},"generated":{"line":1225,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1226,"column":0},"generated":{"line":1226,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1227,"column":0},"generated":{"line":1227,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1228,"column":0},"generated":{"line":1228,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1229,"column":0},"generated":{"line":1229,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1230,"column":0},"generated":{"line":1230,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1231,"column":0},"generated":{"line":1231,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1232,"column":0},"generated":{"line":1232,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1233,"column":0},"generated":{"line":1233,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1234,"column":0},"generated":{"line":1234,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1235,"column":0},"generated":{"line":1235,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1236,"column":0},"generated":{"line":1236,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1237,"column":0},"generated":{"line":1237,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1238,"column":0},"generated":{"line":1238,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1239,"column":0},"generated":{"line":1239,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1240,"column":0},"generated":{"line":1240,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1241,"column":0},"generated":{"line":1241,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1242,"column":0},"generated":{"line":1242,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1243,"column":0},"generated":{"line":1243,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1244,"column":0},"generated":{"line":1244,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1245,"column":0},"generated":{"line":1245,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1246,"column":0},"generated":{"line":1246,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1247,"column":0},"generated":{"line":1247,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1248,"column":0},"generated":{"line":1248,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1249,"column":0},"generated":{"line":1249,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1250,"column":0},"generated":{"line":1250,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1251,"column":0},"generated":{"line":1251,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1252,"column":0},"generated":{"line":1252,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1253,"column":0},"generated":{"line":1253,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1254,"column":0},"generated":{"line":1254,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1255,"column":0},"generated":{"line":1255,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1256,"column":0},"generated":{"line":1256,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1257,"column":0},"generated":{"line":1257,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1258,"column":0},"generated":{"line":1258,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1259,"column":0},"generated":{"line":1259,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1260,"column":0},"generated":{"line":1260,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1261,"column":0},"generated":{"line":1261,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1262,"column":0},"generated":{"line":1262,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1263,"column":0},"generated":{"line":1263,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1264,"column":0},"generated":{"line":1264,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1265,"column":0},"generated":{"line":1265,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1266,"column":0},"generated":{"line":1266,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1267,"column":0},"generated":{"line":1267,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1268,"column":0},"generated":{"line":1268,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1269,"column":0},"generated":{"line":1269,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1270,"column":0},"generated":{"line":1270,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1271,"column":0},"generated":{"line":1271,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1272,"column":0},"generated":{"line":1272,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1273,"column":0},"generated":{"line":1273,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1274,"column":0},"generated":{"line":1274,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1275,"column":0},"generated":{"line":1275,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1276,"column":0},"generated":{"line":1276,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1277,"column":0},"generated":{"line":1277,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1278,"column":0},"generated":{"line":1278,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1279,"column":0},"generated":{"line":1279,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1280,"column":0},"generated":{"line":1280,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1281,"column":0},"generated":{"line":1281,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1282,"column":0},"generated":{"line":1282,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1283,"column":0},"generated":{"line":1283,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1284,"column":0},"generated":{"line":1284,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1285,"column":0},"generated":{"line":1285,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1286,"column":0},"generated":{"line":1286,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1287,"column":0},"generated":{"line":1287,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1288,"column":0},"generated":{"line":1288,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1289,"column":0},"generated":{"line":1289,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1290,"column":0},"generated":{"line":1290,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1291,"column":0},"generated":{"line":1291,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1292,"column":0},"generated":{"line":1292,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1293,"column":0},"generated":{"line":1293,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1294,"column":0},"generated":{"line":1294,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1295,"column":0},"generated":{"line":1295,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1296,"column":0},"generated":{"line":1296,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1297,"column":0},"generated":{"line":1297,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1298,"column":0},"generated":{"line":1298,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1299,"column":0},"generated":{"line":1299,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1300,"column":0},"generated":{"line":1300,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1301,"column":0},"generated":{"line":1301,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1302,"column":0},"generated":{"line":1302,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1303,"column":0},"generated":{"line":1303,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1304,"column":0},"generated":{"line":1304,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1305,"column":0},"generated":{"line":1305,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1306,"column":0},"generated":{"line":1306,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1307,"column":0},"generated":{"line":1307,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1308,"column":0},"generated":{"line":1308,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1309,"column":0},"generated":{"line":1309,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1310,"column":0},"generated":{"line":1310,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1311,"column":0},"generated":{"line":1311,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1312,"column":0},"generated":{"line":1312,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1313,"column":0},"generated":{"line":1313,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1314,"column":0},"generated":{"line":1314,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1315,"column":0},"generated":{"line":1315,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1316,"column":0},"generated":{"line":1316,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1317,"column":0},"generated":{"line":1317,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1318,"column":0},"generated":{"line":1318,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1319,"column":0},"generated":{"line":1319,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1320,"column":0},"generated":{"line":1320,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1321,"column":0},"generated":{"line":1321,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1322,"column":0},"generated":{"line":1322,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1323,"column":0},"generated":{"line":1323,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1324,"column":0},"generated":{"line":1324,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1325,"column":0},"generated":{"line":1325,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1326,"column":0},"generated":{"line":1326,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1327,"column":0},"generated":{"line":1327,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1328,"column":0},"generated":{"line":1328,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1329,"column":0},"generated":{"line":1329,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1330,"column":0},"generated":{"line":1330,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1331,"column":0},"generated":{"line":1331,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1332,"column":0},"generated":{"line":1332,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1333,"column":0},"generated":{"line":1333,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1334,"column":0},"generated":{"line":1334,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1335,"column":0},"generated":{"line":1335,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1336,"column":0},"generated":{"line":1336,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1337,"column":0},"generated":{"line":1337,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1338,"column":0},"generated":{"line":1338,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1339,"column":0},"generated":{"line":1339,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1340,"column":0},"generated":{"line":1340,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1341,"column":0},"generated":{"line":1341,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1342,"column":0},"generated":{"line":1342,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1343,"column":0},"generated":{"line":1343,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1344,"column":0},"generated":{"line":1344,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1345,"column":0},"generated":{"line":1345,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1346,"column":0},"generated":{"line":1346,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1347,"column":0},"generated":{"line":1347,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1348,"column":0},"generated":{"line":1348,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1349,"column":0},"generated":{"line":1349,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1350,"column":0},"generated":{"line":1350,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1351,"column":0},"generated":{"line":1351,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1352,"column":0},"generated":{"line":1352,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1353,"column":0},"generated":{"line":1353,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1354,"column":0},"generated":{"line":1354,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1355,"column":0},"generated":{"line":1355,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1356,"column":0},"generated":{"line":1356,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1357,"column":0},"generated":{"line":1357,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1358,"column":0},"generated":{"line":1358,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1359,"column":0},"generated":{"line":1359,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1360,"column":0},"generated":{"line":1360,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1361,"column":0},"generated":{"line":1361,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1362,"column":0},"generated":{"line":1362,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1363,"column":0},"generated":{"line":1363,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1364,"column":0},"generated":{"line":1364,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1365,"column":0},"generated":{"line":1365,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1366,"column":0},"generated":{"line":1366,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1367,"column":0},"generated":{"line":1367,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1368,"column":0},"generated":{"line":1368,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1369,"column":0},"generated":{"line":1369,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1370,"column":0},"generated":{"line":1370,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1371,"column":0},"generated":{"line":1371,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1372,"column":0},"generated":{"line":1372,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1373,"column":0},"generated":{"line":1373,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1374,"column":0},"generated":{"line":1374,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1375,"column":0},"generated":{"line":1375,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1376,"column":0},"generated":{"line":1376,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1377,"column":0},"generated":{"line":1377,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1378,"column":0},"generated":{"line":1378,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1379,"column":0},"generated":{"line":1379,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1380,"column":0},"generated":{"line":1380,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1381,"column":0},"generated":{"line":1381,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1382,"column":0},"generated":{"line":1382,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1383,"column":0},"generated":{"line":1383,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1384,"column":0},"generated":{"line":1384,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1385,"column":0},"generated":{"line":1385,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1386,"column":0},"generated":{"line":1386,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1387,"column":0},"generated":{"line":1387,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1388,"column":0},"generated":{"line":1388,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1389,"column":0},"generated":{"line":1389,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1390,"column":0},"generated":{"line":1390,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1391,"column":0},"generated":{"line":1391,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1392,"column":0},"generated":{"line":1392,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1393,"column":0},"generated":{"line":1393,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js","original":{"line":1394,"column":0},"generated":{"line":1394,"column":0}}],"sources":{"node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_core_1 = require(\"@tensorflow/tfjs-core\");\nvar _ = require(\"underscore\");\nvar activations_1 = require(\"../activations\");\nvar K = require(\"../backend/tfjs_backend\");\nvar constraints_1 = require(\"../constraints\");\nvar topology_1 = require(\"../engine/topology\");\nvar topology_2 = require(\"../engine/topology\");\nvar errors_1 = require(\"../errors\");\nvar initializers_1 = require(\"../initializers\");\nvar regularizers_1 = require(\"../regularizers\");\nvar types_1 = require(\"../types\");\nvar generic_utils = require(\"../utils/generic_utils\");\nvar math_utils = require(\"../utils/math_utils\");\nvar serialization_1 = require(\"./serialization\");\nvar RNN = (function (_super) {\n    __extends(RNN, _super);\n    function RNN(config) {\n        var _this = _super.call(this, config) || this;\n        var cell;\n        if (config.cell == null) {\n            throw new errors_1.ValueError('cell property is missing for the constructor of RNN.');\n        }\n        else if (Array.isArray(config.cell)) {\n            cell = new StackedRNNCells({ cells: config.cell });\n        }\n        else {\n            cell = config.cell;\n        }\n        if (cell.stateSize == null) {\n            throw new errors_1.ValueError('The RNN cell should have an attribute `stateSize` (tuple of ' +\n                'integers, one integer per RNN state).');\n        }\n        _this.cell = cell;\n        _this.returnSequences =\n            config.returnSequences == null ? false : config.returnSequences;\n        _this.returnState = config.returnState == null ? false : config.returnState;\n        _this.goBackwards = config.goBackwards == null ? false : config.goBackwards;\n        _this._stateful = config.stateful == null ? false : config.stateful;\n        _this.unroll = config.unroll == null ? false : config.unroll;\n        _this.supportsMasking = true;\n        _this.inputSpec = [new topology_1.InputSpec({ ndim: 3 })];\n        _this.stateSpec = null;\n        _this.states = null;\n        _this.numConstants = null;\n        return _this;\n    }\n    RNN.prototype.getStates = function () {\n        if (this.states == null) {\n            var numStates = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n            return _.range(numStates).map(function (x) { return null; });\n        }\n        else {\n            return this.states;\n        }\n    };\n    RNN.prototype.setStates = function (states) {\n        this.states = states;\n    };\n    RNN.prototype.computeOutputShape = function (inputShape) {\n        if (generic_utils.isArrayOfShapes(inputShape)) {\n            inputShape = inputShape[0];\n        }\n        inputShape = inputShape;\n        var stateSize = this.cell.stateSize;\n        if (!Array.isArray(stateSize)) {\n            stateSize = [stateSize];\n        }\n        var outputDim = stateSize[0];\n        var outputShape;\n        if (this.returnSequences) {\n            outputShape = [inputShape[0], inputShape[1], outputDim];\n        }\n        else {\n            outputShape = [inputShape[0], outputDim];\n        }\n        if (this.returnState) {\n            var stateShape = [];\n            for (var _i = 0, stateSize_1 = stateSize; _i < stateSize_1.length; _i++) {\n                var dim = stateSize_1[_i];\n                stateShape.push([inputShape[0], dim]);\n            }\n            return [outputShape].concat(stateShape);\n        }\n        else {\n            return outputShape;\n        }\n    };\n    RNN.prototype.computeMask = function (inputs, mask) {\n        throw new errors_1.NotImplementedError('computeMask has not been implemented for RNN yet');\n    };\n    RNN.prototype.build = function (inputShape) {\n        var constantShape = null;\n        if (this.numConstants != null) {\n            throw new errors_1.NotImplementedError('Constants support is not implemented in RNN yet.');\n        }\n        if (generic_utils.isArrayOfShapes(inputShape)) {\n            inputShape = inputShape[0];\n        }\n        inputShape = inputShape;\n        var batchSize = this.stateful ? inputShape[0] : null;\n        var inputDim = inputShape[inputShape.length - 1];\n        this.inputSpec[0] = new topology_1.InputSpec({ shape: [batchSize, null, inputDim] });\n        var stepInputShape = [inputShape[0]].concat(inputShape.slice(2));\n        if (constantShape != null) {\n            throw new errors_1.NotImplementedError('Constants support is not implemented in RNN yet.');\n        }\n        else {\n            this.cell.build(stepInputShape);\n        }\n        var stateSize;\n        if (Array.isArray(this.cell.stateSize)) {\n            stateSize = this.cell.stateSize;\n        }\n        else {\n            stateSize = [this.cell.stateSize];\n        }\n        if (this.stateSpec != null) {\n            if (!_.isEqual(this.stateSpec.map(function (spec) { return spec.shape[spec.shape.length - 1]; }), stateSize)) {\n                throw new errors_1.ValueError(\"An initialState was passed that is not compatible with \" +\n                    (\"cell.stateSize. Received stateSpec=\" + this.stateSpec + \"; \") +\n                    (\"However cell.stateSize is \" + this.cell.stateSize));\n            }\n        }\n        else {\n            this.stateSpec =\n                stateSize.map(function (dim) { return new topology_1.InputSpec({ shape: [null, dim] }); });\n        }\n        if (this.stateful) {\n            throw new errors_1.NotImplementedError('stateful RNN layer is not implemented yet');\n        }\n    };\n    RNN.prototype.resetStates = function (states) {\n        if (!this.stateful) {\n            throw new errors_1.AttributeError('Cannot call resetState() on an RNN Layer that is not stateful.');\n        }\n        var batchSize = this.inputSpec[0].shape[0];\n        if (batchSize == null) {\n            throw new errors_1.ValueError('If an RNN is stateful, it needs to know its batch size. Specify ' +\n                'the batch size of your input tensors: \\n' +\n                '- If using a Sequential model, specify the batch size by passing ' +\n                'a `batchInputShape` option to your first layer.\\n' +\n                '- If using the functional API, specify the batch size by ' +\n                'passing a `batchShape` option to your Input layer.');\n        }\n        if (this.states == null) {\n            if (Array.isArray(this.cell.stateSize)) {\n                this.states = this.cell.stateSize.map(function (dim) { return K.zeros([batchSize, dim]); });\n            }\n            else {\n                this.states = [K.zeros([batchSize, this.cell.stateSize])];\n            }\n        }\n        else if (states == null) {\n            if (Array.isArray(this.cell.stateSize)) {\n                this.states = this.cell.stateSize.map(function (dim) { return K.zeros([batchSize, dim]); });\n            }\n            else {\n                this.states[0] = K.zeros([batchSize, this.cell.stateSize]);\n            }\n        }\n        else {\n            if (!Array.isArray(states)) {\n                states = [states];\n            }\n            if (states.length !== this.states.length) {\n                throw new errors_1.ValueError(\"Layer \" + this.name + \" expects \" + this.states.length + \" state(s), \" +\n                    (\"but it received \" + states.length + \" state value(s). Input \") +\n                    (\"received: \" + states));\n            }\n            for (var index = 0; index < this.states.length; ++index) {\n                var value = states[index];\n                var dim = Array.isArray(this.cell.stateSize) ?\n                    this.cell.stateSize[index] :\n                    this.cell.stateSize;\n                var expectedShape = [batchSize, dim];\n                if (!_.isEqual(value.shape, expectedShape)) {\n                    throw new errors_1.ValueError(\"State \" + index + \" is incompatible with layer \" + this.name + \": \" +\n                        (\"expected shape=\" + expectedShape + \", received shape=\" + value.shape));\n                }\n                this.states[index] = value;\n            }\n        }\n    };\n    RNN.prototype.standardizeArgs = function (inputs, initialState, constants) {\n        if (Array.isArray(inputs)) {\n            if (initialState != null || constants != null) {\n                throw new errors_1.ValueError('When inputs is an array, neither initialState or constants ' +\n                    'should be provided');\n            }\n            if (this.numConstants != null) {\n                constants =\n                    inputs.slice(inputs.length - this.numConstants, inputs.length);\n                inputs = inputs.slice(0, inputs.length - this.numConstants);\n            }\n            if (inputs.length > 1) {\n                initialState = inputs.slice(1, inputs.length);\n            }\n            inputs = inputs[0];\n        }\n        function toListOrNull(x) {\n            if (x == null || Array.isArray(x)) {\n                return x;\n            }\n            else {\n                return [x];\n            }\n        }\n        initialState = toListOrNull(initialState);\n        constants = toListOrNull(constants);\n        return { inputs: inputs, initialState: initialState, constants: constants };\n    };\n    RNN.prototype.apply = function (inputs, kwargs) {\n        var initialState = kwargs == null ? null : kwargs['initialState'];\n        var constants = kwargs == null ? null : kwargs['constants'];\n        if (kwargs == null) {\n            kwargs = {};\n        }\n        var standardized = this.standardizeArgs(inputs, initialState, constants);\n        inputs = standardized.inputs;\n        initialState = standardized.initialState;\n        constants = standardized.constants;\n        var additionalInputs = [];\n        var additionalSpecs = [];\n        if (initialState != null) {\n            kwargs['initialState'] = initialState;\n            additionalInputs = additionalInputs.concat(initialState);\n            this.stateSpec = [];\n            for (var _i = 0, initialState_1 = initialState; _i < initialState_1.length; _i++) {\n                var state = initialState_1[_i];\n                this.stateSpec.push(new topology_1.InputSpec({ shape: state.shape }));\n            }\n            additionalSpecs = additionalSpecs.concat(this.stateSpec);\n        }\n        if (constants != null) {\n            kwargs['constants'] = constants;\n            additionalInputs = additionalInputs.concat(constants);\n            this.numConstants = constants.length;\n        }\n        var isTensor = additionalInputs[0] instanceof types_1.SymbolicTensor;\n        if (isTensor) {\n            var fullInput = [inputs].concat(additionalInputs);\n            var fullInputSpec = this.inputSpec.concat(additionalSpecs);\n            var originalInputSpec = this.inputSpec;\n            this.inputSpec = fullInputSpec;\n            var output = _super.prototype.apply.call(this, fullInput, kwargs);\n            this.inputSpec = originalInputSpec;\n            return output;\n        }\n        else {\n            return _super.prototype.apply.call(this, inputs, kwargs);\n        }\n    };\n    RNN.prototype.call = function (inputs, kwargs) {\n        var _this = this;\n        var mask = kwargs == null ? null : kwargs['mask'];\n        var training = kwargs == null ? null : kwargs['training'];\n        var initialState = kwargs == null ? null : kwargs['initialState'];\n        inputs = generic_utils.getExactlyOneTensor(inputs);\n        if (initialState == null) {\n            if (this.stateful) {\n                throw new errors_1.NotImplementedError('stateful RNN layer is not implemented yet.');\n            }\n            else {\n                initialState = this.getInitialState(inputs);\n            }\n        }\n        if (mask != null) {\n            throw new errors_1.NotImplementedError('Masking is not implemented for RNN yet');\n        }\n        var numStates = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n        if (initialState.length !== numStates) {\n            throw new errors_1.ValueError(\"RNN Layer has \" + numStates + \" state(s) but was passed \" +\n                (initialState.length + \" initial state(s).\"));\n        }\n        var inputShape = inputs.shape;\n        var timesteps = inputShape[1];\n        if (this.unroll) {\n            console.warn('Ignoring unroll = true for RNN layer, due to imperative backend.');\n        }\n        var cellCallKwargs = { training: training };\n        var step = function (inputs, states) {\n            var outputs = _this.cell.call([inputs].concat(states), cellCallKwargs);\n            return [outputs[0], outputs.slice(1)];\n        };\n        var rnnOutputs = K.rnn(step, inputs, initialState, this.goBackwards, null, null, this.unroll, timesteps);\n        var lastOutput = rnnOutputs[0];\n        var outputs = rnnOutputs[1];\n        var states = rnnOutputs[2];\n        if (this.stateful) {\n            throw new errors_1.NotImplementedError('stateful RNN layer is not implemented yet');\n        }\n        var output = this.returnSequences ? outputs : lastOutput;\n        if (this.returnState) {\n            return [output].concat(states);\n        }\n        else {\n            return output;\n        }\n    };\n    RNN.prototype.getInitialState = function (inputs) {\n        var initialState = K.zeros(inputs.shape);\n        initialState = K.sum(initialState, [1, 2]);\n        initialState = K.expandDims(initialState);\n        if (Array.isArray(this.cell.stateSize)) {\n            return this.cell.stateSize.map(function (dim) { return dim > 1 ? K.tile(initialState, [1, dim]) : initialState; });\n        }\n        else {\n            return this.cell.stateSize > 1 ?\n                [K.tile(initialState, [1, this.cell.stateSize])] :\n                [initialState];\n        }\n    };\n    Object.defineProperty(RNN.prototype, \"trainableWeights\", {\n        get: function () {\n            if (!this.trainable) {\n                return [];\n            }\n            return this.cell.trainableWeights;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RNN.prototype, \"nonTrainableWeights\", {\n        get: function () {\n            if (!this.trainable) {\n                return this.cell.weights;\n            }\n            return this.cell.nonTrainableWeights;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    RNN.prototype.getConfig = function () {\n        var config = {\n            returnSequences: this.returnSequences,\n            returnState: this.returnState,\n            goBackwards: this.goBackwards,\n            stateful: this.stateful,\n            unroll: this.unroll,\n        };\n        if (this.numConstants != null) {\n            config.numConstants = this.numConstants;\n        }\n        var cellConfig = this.cell.getConfig();\n        config.cell = {\n            className: this.cell.constructor.name,\n            config: cellConfig,\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    return RNN;\n}(topology_2.Layer));\nexports.RNN = RNN;\ngeneric_utils.ClassNameMap.register('RNN', RNN);\nvar RNNCell = (function (_super) {\n    __extends(RNNCell, _super);\n    function RNNCell() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    RNNCell = __decorate([\n        tfjs_core_1.doc({ heading: 'Layers', subheading: 'Classes' })\n    ], RNNCell);\n    return RNNCell;\n}(topology_2.Layer));\nexports.RNNCell = RNNCell;\nvar SimpleRNNCell = (function (_super) {\n    __extends(SimpleRNNCell, _super);\n    function SimpleRNNCell(config) {\n        var _this = _super.call(this, config) || this;\n        _this.DEFAULT_ACTIVATION = 'tanh';\n        _this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n        _this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n        _this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n        _this.units = config.units;\n        _this.activation = activations_1.getActivation(config.activation == null ? _this.DEFAULT_ACTIVATION :\n            config.activation);\n        _this.useBias = config.useBias == null ? true : config.useBias;\n        _this.kernelInitializer = initializers_1.getInitializer(config.kernelInitializer || _this.DEFAULT_KERNEL_INITIALIZER);\n        _this.recurrentInitializer = initializers_1.getInitializer(config.recurrentInitializer || _this.DEFAULT_RECURRENT_INITIALIZER);\n        _this.biasInitializer =\n            initializers_1.getInitializer(config.biasInitializer || _this.DEFAULT_BIAS_INITIALIZER);\n        _this.kernelRegularizer = regularizers_1.getRegularizer(config.kernelRegularizer);\n        _this.recurrentRegularizer = regularizers_1.getRegularizer(config.recurrentRegularizer);\n        _this.biasRegularizer = regularizers_1.getRegularizer(config.biasRegularizer);\n        _this.kernelConstraint = constraints_1.getConstraint(config.kernelConstraint);\n        _this.recurrentConstraint = constraints_1.getConstraint(config.recurrentConstraint);\n        _this.biasConstraint = constraints_1.getConstraint(config.biasConstraint);\n        _this.dropout = math_utils.min([1, math_utils.max([0, config.dropout == null ? 0 : config.dropout])]);\n        _this.recurrentDropout = math_utils.min([\n            1,\n            math_utils.max([0, config.recurrentDropout == null ? 0 : config.recurrentDropout])\n        ]);\n        _this.stateSize = _this.units;\n        return _this;\n    }\n    SimpleRNNCell.prototype.build = function (inputShape) {\n        inputShape = generic_utils.getExactlyOneShape(inputShape);\n        this.kernel = this.addWeight('kernel', [inputShape[inputShape.length - 1], this.units], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        this.recurrentKernel = this.addWeight('recurrent_kernel', [this.units, this.units], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [this.units], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        else {\n            this.bias = null;\n        }\n        this.built = true;\n    };\n    SimpleRNNCell.prototype.call = function (inputs, kwargs) {\n        inputs = inputs;\n        if (inputs.length !== 2) {\n            throw new errors_1.ValueError(\"SimpleRNNCell expects 2 input Tensors, got \" + inputs.length + \".\");\n        }\n        var prevOutput = inputs[1];\n        inputs = inputs[0];\n        if (this.dropout !== 0 || this.recurrentDropout !== 0) {\n            throw new errors_1.NotImplementedError('Dropout is not implemented for SimpleRNNCell yet');\n        }\n        var h = K.dot(inputs, this.kernel.read());\n        if (this.bias != null) {\n            h = K.biasAdd(h, this.bias.read());\n        }\n        var output = K.add(h, K.dot(prevOutput, this.recurrentKernel.read()));\n        if (this.activation != null) {\n            output = this.activation(output);\n        }\n        return [output, output];\n    };\n    SimpleRNNCell.prototype.getConfig = function () {\n        var config = {\n            units: this.units,\n            activation: activations_1.serializeActivation(this.activation),\n            useBias: this.useBias,\n            kernelInitializer: initializers_1.serializeInitializer(this.kernelInitializer),\n            recurrentInitializer: initializers_1.serializeInitializer(this.recurrentInitializer),\n            biasInitializer: initializers_1.serializeInitializer(this.biasInitializer),\n            kernelRegularizer: regularizers_1.serializeRegularizer(this.kernelRegularizer),\n            recurrentRegularizer: regularizers_1.serializeRegularizer(this.recurrentRegularizer),\n            biasRegularizer: regularizers_1.serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: regularizers_1.serializeRegularizer(this.activityRegularizer),\n            kernelConstraint: constraints_1.serializeConstraint(this.kernelConstraint),\n            recurrentConstraint: constraints_1.serializeConstraint(this.recurrentConstraint),\n            biasConstraint: constraints_1.serializeConstraint(this.biasConstraint),\n            dropout: this.dropout,\n            recurrentDropout: this.recurrentDropout,\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    return SimpleRNNCell;\n}(RNNCell));\nexports.SimpleRNNCell = SimpleRNNCell;\ngeneric_utils.ClassNameMap.register('SimpleRNNCell', SimpleRNNCell);\nvar SimpleRNN = (function (_super) {\n    __extends(SimpleRNN, _super);\n    function SimpleRNN(config) {\n        var _this = this;\n        config.cell = new SimpleRNNCell(config);\n        _this = _super.call(this, config) || this;\n        return _this;\n    }\n    SimpleRNN.prototype.call = function (inputs, kwargs) {\n        var mask = kwargs == null ? null : kwargs['mask'];\n        var training = kwargs == null ? null : kwargs['training'];\n        var initialState = kwargs == null ? null : kwargs['initialState'];\n        return _super.prototype.call.call(this, inputs, { mask: mask, training: training, initialState: initialState });\n    };\n    Object.defineProperty(SimpleRNN.prototype, \"units\", {\n        get: function () {\n            return this.cell.units;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleRNN.prototype, \"activation\", {\n        get: function () {\n            return this.cell.activation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleRNN.prototype, \"useBias\", {\n        get: function () {\n            return this.cell.useBias;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleRNN.prototype, \"kernelInitializer\", {\n        get: function () {\n            return this.cell.kernelInitializer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleRNN.prototype, \"recurrentInitializer\", {\n        get: function () {\n            return this.cell.recurrentInitializer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleRNN.prototype, \"biasInitializer\", {\n        get: function () {\n            return this.cell.biasInitializer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleRNN.prototype, \"kernelRegularizer\", {\n        get: function () {\n            return this.cell.kernelRegularizer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleRNN.prototype, \"recurrentRegularizer\", {\n        get: function () {\n            return this.cell.recurrentRegularizer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleRNN.prototype, \"biasRegularizer\", {\n        get: function () {\n            return this.cell.biasRegularizer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleRNN.prototype, \"kernelConstraint\", {\n        get: function () {\n            return this.cell.kernelConstraint;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleRNN.prototype, \"recurrentConstraint\", {\n        get: function () {\n            return this.cell.recurrentConstraint;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleRNN.prototype, \"biasConstraint\", {\n        get: function () {\n            return this.cell.biasConstraint;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleRNN.prototype, \"dropout\", {\n        get: function () {\n            return this.cell.dropout;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleRNN.prototype, \"recurrentDropout\", {\n        get: function () {\n            return this.cell.recurrentDropout;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SimpleRNN.prototype.getConfig = function () {\n        var config = {\n            units: this.units,\n            activation: activations_1.serializeActivation(this.activation),\n            useBias: this.useBias,\n            kernelInitializer: initializers_1.serializeInitializer(this.kernelInitializer),\n            recurrentInitializer: initializers_1.serializeInitializer(this.recurrentInitializer),\n            biasInitializer: initializers_1.serializeInitializer(this.biasInitializer),\n            kernelRegularizer: regularizers_1.serializeRegularizer(this.kernelRegularizer),\n            recurrentRegularizer: regularizers_1.serializeRegularizer(this.recurrentRegularizer),\n            biasRegularizer: regularizers_1.serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: regularizers_1.serializeRegularizer(this.activityRegularizer),\n            kernelConstraint: constraints_1.serializeConstraint(this.kernelConstraint),\n            recurrentConstraint: constraints_1.serializeConstraint(this.recurrentConstraint),\n            biasConstraint: constraints_1.serializeConstraint(this.biasConstraint),\n            dropout: this.dropout,\n            recurrentDropout: this.recurrentDropout,\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    return SimpleRNN;\n}(RNN));\nexports.SimpleRNN = SimpleRNN;\ngeneric_utils.ClassNameMap.register('SimpleRNN', SimpleRNN);\nvar GRUCell = (function (_super) {\n    __extends(GRUCell, _super);\n    function GRUCell(config) {\n        var _this = _super.call(this, config) || this;\n        _this.DEFAULT_ACTIVATION = 'tanh';\n        _this.DEFAULT_RECURRENT_ACTIVATION = 'hardSigmoid';\n        _this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n        _this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n        _this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n        _this.units = config.units;\n        _this.activation = activations_1.getActivation(config.activation === undefined ? _this.DEFAULT_ACTIVATION :\n            config.activation);\n        _this.recurrentActivation = activations_1.getActivation(config.activation === undefined ? _this.DEFAULT_RECURRENT_ACTIVATION :\n            config.recurrentActivation);\n        _this.useBias = config.useBias == null ? true : config.useBias;\n        _this.kernelInitializer = initializers_1.getInitializer(config.kernelInitializer || _this.DEFAULT_KERNEL_INITIALIZER);\n        _this.recurrentInitializer = initializers_1.getInitializer(config.recurrentInitializer || _this.DEFAULT_RECURRENT_INITIALIZER);\n        _this.biasInitializer =\n            initializers_1.getInitializer(config.biasInitializer || _this.DEFAULT_BIAS_INITIALIZER);\n        _this.kernelRegularizer = regularizers_1.getRegularizer(config.kernelRegularizer);\n        _this.recurrentRegularizer = regularizers_1.getRegularizer(config.recurrentRegularizer);\n        _this.biasRegularizer = regularizers_1.getRegularizer(config.biasRegularizer);\n        _this.kernelConstraint = constraints_1.getConstraint(config.kernelConstraint);\n        _this.recurrentConstraint = constraints_1.getConstraint(config.recurrentConstraint);\n        _this.biasConstraint = constraints_1.getConstraint(config.biasConstraint);\n        _this.dropout = math_utils.min([1, math_utils.max([0, config.dropout == null ? 0 : config.dropout])]);\n        _this.recurrentDropout = math_utils.min([\n            1,\n            math_utils.max([0, config.recurrentDropout == null ? 0 : config.recurrentDropout])\n        ]);\n        _this.implementation = config.implementation;\n        _this.stateSize = _this.units;\n        return _this;\n    }\n    GRUCell.prototype.build = function (inputShape) {\n        inputShape = generic_utils.getExactlyOneShape(inputShape);\n        var inputDim = inputShape[inputShape.length - 1];\n        this.kernel = this.addWeight('kernel', [inputDim, this.units * 3], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        this.recurrentKernel = this.addWeight('recurrent_kernel', [this.units, this.units * 3], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [this.units * 3], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        else {\n            this.bias = null;\n        }\n        this.built = true;\n    };\n    GRUCell.prototype.call = function (inputs, kwargs) {\n        if (this.dropout !== 0 || this.recurrentDropout !== 0) {\n            throw new errors_1.NotImplementedError('Dropout is not implemented for GRUCell yet');\n        }\n        inputs = inputs;\n        if (inputs.length !== 2) {\n            throw new errors_1.ValueError(\"GRUCell expects 2 input Tensors (inputs, h, c), got \" +\n                (inputs.length + \".\"));\n        }\n        var hTMinus1 = inputs[1];\n        inputs = inputs[0];\n        var z;\n        var r;\n        var hh;\n        if (this.implementation === 1) {\n            var kernelZ = K.sliceAlongLastAxis(this.kernel.read(), 0, this.units);\n            var kernelR = K.sliceAlongLastAxis(this.kernel.read(), this.units, this.units);\n            var kernelH = K.sliceAlongLastAxis(this.kernel.read(), this.units * 2, this.units);\n            var recurrentKernelZ = K.sliceAlongLastAxis(this.recurrentKernel.read(), 0, this.units);\n            var recurrentKernelR = K.sliceAlongLastAxis(this.recurrentKernel.read(), this.units, this.units);\n            var recurrentKernelH = K.sliceAlongLastAxis(this.recurrentKernel.read(), this.units * 2, this.units);\n            var inputsZ = inputs;\n            var inputsR = inputs;\n            var inputsH = inputs;\n            var xZ = K.dot(inputsZ, kernelZ);\n            var xR = K.dot(inputsR, kernelR);\n            var xH = K.dot(inputsH, kernelH);\n            if (this.useBias) {\n                var biasZ = K.sliceAlongFirstAxis(this.bias.read(), 0, this.units);\n                var biasR = K.sliceAlongFirstAxis(this.bias.read(), this.units, this.units);\n                var biasH = K.sliceAlongFirstAxis(this.bias.read(), this.units * 2, this.units);\n                xZ = K.biasAdd(xZ, biasZ);\n                xR = K.biasAdd(xR, biasR);\n                xH = K.biasAdd(xH, biasH);\n            }\n            var hTMinus1Z = hTMinus1;\n            var hTMinus1R = hTMinus1;\n            var hTMinus1H = hTMinus1;\n            z = this.recurrentActivation(K.add(xZ, K.dot(hTMinus1Z, recurrentKernelZ)));\n            r = this.recurrentActivation(K.add(xR, K.dot(hTMinus1R, recurrentKernelR)));\n            hh = this.activation(K.add(xH, K.dot(K.multiply(r, hTMinus1H), recurrentKernelH)));\n        }\n        else {\n            var matrixX = K.dot(inputs, this.kernel.read());\n            if (this.useBias) {\n                matrixX = K.biasAdd(matrixX, this.bias.read());\n            }\n            var matrixInner = K.dot(hTMinus1, K.sliceAlongLastAxis(this.recurrentKernel.read(), 0, 2 * this.units));\n            var xZ = K.sliceAlongLastAxis(matrixX, 0, this.units);\n            var xR = K.sliceAlongLastAxis(matrixX, this.units, this.units);\n            var recurrentZ = K.sliceAlongLastAxis(matrixInner, 0, this.units);\n            var recurrentR = K.sliceAlongLastAxis(matrixInner, this.units, this.units);\n            z = this.recurrentActivation(K.add(xZ, recurrentZ));\n            r = this.recurrentActivation(K.add(xR, recurrentR));\n            var xH = K.sliceAlongLastAxis(matrixX, 2 * this.units, this.units);\n            var recurrentH = K.dot(K.multiply(r, hTMinus1), K.sliceAlongLastAxis(this.recurrentKernel.read(), 2 * this.units, this.units));\n            hh = this.activation(K.add(xH, recurrentH));\n        }\n        var h = K.add(K.multiply(z, hTMinus1), K.multiply(K.scalarPlusArray(K.getScalar(1), K.neg(z)), hh));\n        return [h, h];\n    };\n    GRUCell.prototype.getConfig = function () {\n        var config = {\n            units: this.units,\n            activation: activations_1.serializeActivation(this.activation),\n            useBias: this.useBias,\n            kernelInitializer: initializers_1.serializeInitializer(this.kernelInitializer),\n            recurrentInitializer: initializers_1.serializeInitializer(this.recurrentInitializer),\n            biasInitializer: initializers_1.serializeInitializer(this.biasInitializer),\n            kernelRegularizer: regularizers_1.serializeRegularizer(this.kernelRegularizer),\n            recurrentRegularizer: regularizers_1.serializeRegularizer(this.recurrentRegularizer),\n            biasRegularizer: regularizers_1.serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: regularizers_1.serializeRegularizer(this.activityRegularizer),\n            kernelConstraint: constraints_1.serializeConstraint(this.kernelConstraint),\n            recurrentConstraint: constraints_1.serializeConstraint(this.recurrentConstraint),\n            biasConstraint: constraints_1.serializeConstraint(this.biasConstraint),\n            dropout: this.dropout,\n            recurrentDropout: this.recurrentDropout,\n            implementation: this.implementation,\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    return GRUCell;\n}(RNNCell));\nexports.GRUCell = GRUCell;\ngeneric_utils.ClassNameMap.register('GRUCell', GRUCell);\nvar GRU = (function (_super) {\n    __extends(GRU, _super);\n    function GRU(config) {\n        var _this = this;\n        if (config.implementation === 0) {\n            console.warn('`implementation=0` has been deprecated, and now defaults to ' +\n                '`implementation=1`. Please update your layer call.');\n        }\n        config.cell = new GRUCell(config);\n        _this = _super.call(this, config) || this;\n        return _this;\n    }\n    GRU.prototype.call = function (inputs, kwargs) {\n        var mask = kwargs == null ? null : kwargs['mask'];\n        var training = kwargs == null ? null : kwargs['training'];\n        var initialState = kwargs == null ? null : kwargs['initialState'];\n        return _super.prototype.call.call(this, inputs, { mask: mask, training: training, initialState: initialState });\n    };\n    Object.defineProperty(GRU.prototype, \"units\", {\n        get: function () {\n            return this.cell.units;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"activation\", {\n        get: function () {\n            return this.cell.activation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"useBias\", {\n        get: function () {\n            return this.cell.useBias;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"kernelInitializer\", {\n        get: function () {\n            return this.cell.kernelInitializer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"recurrentInitializer\", {\n        get: function () {\n            return this.cell.recurrentInitializer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"biasInitializer\", {\n        get: function () {\n            return this.cell.biasInitializer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"kernelRegularizer\", {\n        get: function () {\n            return this.cell.kernelRegularizer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"recurrentRegularizer\", {\n        get: function () {\n            return this.cell.recurrentRegularizer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"biasRegularizer\", {\n        get: function () {\n            return this.cell.biasRegularizer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"kernelConstraint\", {\n        get: function () {\n            return this.cell.kernelConstraint;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"recurrentConstraint\", {\n        get: function () {\n            return this.cell.recurrentConstraint;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"biasConstraint\", {\n        get: function () {\n            return this.cell.biasConstraint;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"dropout\", {\n        get: function () {\n            return this.cell.dropout;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"recurrentDropout\", {\n        get: function () {\n            return this.cell.recurrentDropout;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"implementation\", {\n        get: function () {\n            return this.cell.implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    GRU.prototype.getConfig = function () {\n        var config = {\n            units: this.units,\n            activation: activations_1.serializeActivation(this.activation),\n            useBias: this.useBias,\n            kernelInitializer: initializers_1.serializeInitializer(this.kernelInitializer),\n            recurrentInitializer: initializers_1.serializeInitializer(this.recurrentInitializer),\n            biasInitializer: initializers_1.serializeInitializer(this.biasInitializer),\n            kernelRegularizer: regularizers_1.serializeRegularizer(this.kernelRegularizer),\n            recurrentRegularizer: regularizers_1.serializeRegularizer(this.recurrentRegularizer),\n            biasRegularizer: regularizers_1.serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: regularizers_1.serializeRegularizer(this.activityRegularizer),\n            kernelConstraint: constraints_1.serializeConstraint(this.kernelConstraint),\n            recurrentConstraint: constraints_1.serializeConstraint(this.recurrentConstraint),\n            biasConstraint: constraints_1.serializeConstraint(this.biasConstraint),\n            dropout: this.dropout,\n            recurrentDropout: this.recurrentDropout,\n            implementation: this.implementation,\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    GRU.fromConfig = function (cls, config) {\n        if (config['implmentation'] === 0) {\n            config['implementation'] = 1;\n        }\n        return new cls(config);\n    };\n    return GRU;\n}(RNN));\nexports.GRU = GRU;\ngeneric_utils.ClassNameMap.register('GRU', GRU);\nvar LSTMCell = (function (_super) {\n    __extends(LSTMCell, _super);\n    function LSTMCell(config) {\n        var _this = _super.call(this, config) || this;\n        _this.DEFAULT_ACTIVATION = 'tanh';\n        _this.DEFAULT_RECURRENT_ACTIVATION = 'hardSigmoid';\n        _this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n        _this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n        _this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n        _this.units = config.units;\n        _this.activation = activations_1.getActivation(config.activation === undefined ? _this.DEFAULT_ACTIVATION :\n            config.activation);\n        _this.recurrentActivation = activations_1.getActivation(config.activation === undefined ? _this.DEFAULT_RECURRENT_ACTIVATION :\n            config.recurrentActivation);\n        _this.useBias = config.useBias == null ? true : config.useBias;\n        _this.kernelInitializer = initializers_1.getInitializer(config.kernelInitializer || _this.DEFAULT_KERNEL_INITIALIZER);\n        _this.recurrentInitializer = initializers_1.getInitializer(config.recurrentInitializer || _this.DEFAULT_RECURRENT_INITIALIZER);\n        _this.biasInitializer =\n            initializers_1.getInitializer(config.biasInitializer || _this.DEFAULT_BIAS_INITIALIZER);\n        _this.unitForgetBias = config.unitForgetBias;\n        _this.kernelRegularizer = regularizers_1.getRegularizer(config.kernelRegularizer);\n        _this.recurrentRegularizer = regularizers_1.getRegularizer(config.recurrentRegularizer);\n        _this.biasRegularizer = regularizers_1.getRegularizer(config.biasRegularizer);\n        _this.kernelConstraint = constraints_1.getConstraint(config.kernelConstraint);\n        _this.recurrentConstraint = constraints_1.getConstraint(config.recurrentConstraint);\n        _this.biasConstraint = constraints_1.getConstraint(config.biasConstraint);\n        _this.dropout = math_utils.min([1, math_utils.max([0, config.dropout == null ? 0 : config.dropout])]);\n        _this.recurrentDropout = math_utils.min([\n            1,\n            math_utils.max([0, config.recurrentDropout == null ? 0 : config.recurrentDropout])\n        ]);\n        _this.implementation = config.implementation;\n        _this.stateSize = [_this.units, _this.units];\n        return _this;\n    }\n    LSTMCell.prototype.build = function (inputShape) {\n        inputShape = generic_utils.getExactlyOneShape(inputShape);\n        var inputDim = inputShape[inputShape.length - 1];\n        this.kernel = this.addWeight('kernel', [inputDim, this.units * 4], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        this.recurrentKernel = this.addWeight('recurrent_kernel', [this.units, this.units * 4], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);\n        var biasInitializer;\n        if (this.useBias) {\n            if (this.unitForgetBias) {\n                var capturedBiasInit_1 = this.biasInitializer;\n                var capturedUnits_1 = this.units;\n                biasInitializer = new ((function (_super) {\n                    __extends(CustomInit, _super);\n                    function CustomInit() {\n                        return _super !== null && _super.apply(this, arguments) || this;\n                    }\n                    CustomInit.prototype.apply = function (shape, dtype) {\n                        var bI = capturedBiasInit_1.apply([capturedUnits_1]);\n                        var bF = (new initializers_1.Ones()).apply([capturedUnits_1]);\n                        var bCAndH = capturedBiasInit_1.apply([capturedUnits_1 * 2]);\n                        return K.concatAlongFirstAxis(K.concatAlongFirstAxis(bI, bF), bCAndH);\n                    };\n                    return CustomInit;\n                }(initializers_1.Initializer)))();\n            }\n            else {\n                biasInitializer = this.biasInitializer;\n            }\n            this.bias = this.addWeight('bias', [this.units * 4], null, biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        else {\n            this.bias = null;\n        }\n        this.built = true;\n    };\n    LSTMCell.prototype.call = function (inputs, kwargs) {\n        if (this.dropout !== 0 || this.recurrentDropout !== 0) {\n            throw new errors_1.NotImplementedError('Dropout is not implemented for LSTMCell yet');\n        }\n        inputs = inputs;\n        if (inputs.length !== 3) {\n            throw new errors_1.ValueError(\"LSTMCell expects 3 input Tensors (inputs, h, c), got \" +\n                (inputs.length + \".\"));\n        }\n        var hTMinus1 = inputs[1];\n        var cTMinus1 = inputs[2];\n        inputs = inputs[0];\n        var i;\n        var f;\n        var c;\n        var o;\n        if (this.implementation === 1) {\n            var kernelI = K.sliceAlongLastAxis(this.kernel.read(), 0, this.units);\n            var kernelF = K.sliceAlongLastAxis(this.kernel.read(), this.units, this.units);\n            var kernelC = K.sliceAlongLastAxis(this.kernel.read(), this.units * 2, this.units);\n            var kernelO = K.sliceAlongLastAxis(this.kernel.read(), this.units * 3, this.units);\n            var recurrentKernelI = K.sliceAlongLastAxis(this.recurrentKernel.read(), 0, this.units);\n            var recurrentKernelF = K.sliceAlongLastAxis(this.recurrentKernel.read(), this.units, this.units);\n            var recurrentKernelC = K.sliceAlongLastAxis(this.recurrentKernel.read(), this.units * 2, this.units);\n            var recurrentKernelO = K.sliceAlongLastAxis(this.recurrentKernel.read(), this.units * 3, this.units);\n            var inputsI = inputs;\n            var inputsF = inputs;\n            var inputsC = inputs;\n            var inputsO = inputs;\n            var xI = K.dot(inputsI, kernelI);\n            var xF = K.dot(inputsF, kernelF);\n            var xC = K.dot(inputsC, kernelC);\n            var xO = K.dot(inputsO, kernelO);\n            if (this.useBias) {\n                var biasI = K.sliceAlongFirstAxis(this.bias.read(), 0, this.units);\n                var biasF = K.sliceAlongFirstAxis(this.bias.read(), this.units, this.units);\n                var biasC = K.sliceAlongFirstAxis(this.bias.read(), this.units * 2, this.units);\n                var biasO = K.sliceAlongFirstAxis(this.bias.read(), this.units * 3, this.units);\n                xI = K.biasAdd(xI, biasI);\n                xF = K.biasAdd(xF, biasF);\n                xC = K.biasAdd(xC, biasC);\n                xO = K.biasAdd(xO, biasO);\n            }\n            var hTMinus1I = hTMinus1;\n            var hTMinus1F = hTMinus1;\n            var hTMinus1C = hTMinus1;\n            var hTMinus1O = hTMinus1;\n            i = this.recurrentActivation(K.add(xI, K.dot(hTMinus1I, recurrentKernelI)));\n            f = this.recurrentActivation(K.add(xF, K.dot(hTMinus1F, recurrentKernelF)));\n            c = K.add(K.multiply(f, cTMinus1), K.multiply(i, this.activation(K.add(xC, K.dot(hTMinus1C, recurrentKernelC)))));\n            o = this.recurrentActivation(K.add(xO, K.dot(hTMinus1O, recurrentKernelO)));\n        }\n        else {\n            var z = K.dot(inputs, this.kernel.read());\n            z = K.add(z, K.dot(hTMinus1, this.recurrentKernel.read()));\n            if (this.useBias) {\n                z = K.biasAdd(z, this.bias.read());\n            }\n            var z0 = K.sliceAlongLastAxis(z, 0, this.units);\n            var z1 = K.sliceAlongLastAxis(z, this.units, this.units);\n            var z2 = K.sliceAlongLastAxis(z, this.units * 2, this.units);\n            var z3 = K.sliceAlongLastAxis(z, this.units * 3, this.units);\n            i = this.recurrentActivation(z0);\n            f = this.recurrentActivation(z1);\n            c = K.add(K.multiply(f, cTMinus1), K.multiply(i, this.activation(z2)));\n            o = this.recurrentActivation(z3);\n        }\n        var h = K.multiply(o, this.activation(c));\n        return [h, h, c];\n    };\n    LSTMCell.prototype.getConfig = function () {\n        var config = {\n            units: this.units,\n            activation: activations_1.serializeActivation(this.activation),\n            useBias: this.useBias,\n            kernelInitializer: initializers_1.serializeInitializer(this.kernelInitializer),\n            recurrentInitializer: initializers_1.serializeInitializer(this.recurrentInitializer),\n            biasInitializer: initializers_1.serializeInitializer(this.biasInitializer),\n            unitForgetBias: this.unitForgetBias,\n            kernelRegularizer: regularizers_1.serializeRegularizer(this.kernelRegularizer),\n            recurrentRegularizer: regularizers_1.serializeRegularizer(this.recurrentRegularizer),\n            biasRegularizer: regularizers_1.serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: regularizers_1.serializeRegularizer(this.activityRegularizer),\n            kernelConstraint: constraints_1.serializeConstraint(this.kernelConstraint),\n            recurrentConstraint: constraints_1.serializeConstraint(this.recurrentConstraint),\n            biasConstraint: constraints_1.serializeConstraint(this.biasConstraint),\n            dropout: this.dropout,\n            recurrentDropout: this.recurrentDropout,\n            implementation: this.implementation,\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    return LSTMCell;\n}(RNNCell));\nexports.LSTMCell = LSTMCell;\ngeneric_utils.ClassNameMap.register('LSTMCell', LSTMCell);\nvar LSTM = (function (_super) {\n    __extends(LSTM, _super);\n    function LSTM(config) {\n        var _this = this;\n        if (config.implementation === 0) {\n            console.warn('`implementation=0` has been deprecated, and now defaults to ' +\n                '`implementation=1`. Please update your layer call.');\n        }\n        config.cell = new LSTMCell(config);\n        _this = _super.call(this, config) || this;\n        return _this;\n    }\n    LSTM.prototype.call = function (inputs, kwargs) {\n        var mask = kwargs == null ? null : kwargs['mask'];\n        var training = kwargs == null ? null : kwargs['training'];\n        var initialState = kwargs == null ? null : kwargs['initialState'];\n        return _super.prototype.call.call(this, inputs, { mask: mask, training: training, initialState: initialState });\n    };\n    Object.defineProperty(LSTM.prototype, \"units\", {\n        get: function () {\n            return this.cell.units;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"activation\", {\n        get: function () {\n            return this.cell.activation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"useBias\", {\n        get: function () {\n            return this.cell.useBias;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"kernelInitializer\", {\n        get: function () {\n            return this.cell.kernelInitializer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"recurrentInitializer\", {\n        get: function () {\n            return this.cell.recurrentInitializer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"biasInitializer\", {\n        get: function () {\n            return this.cell.biasInitializer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"unitForgetBias\", {\n        get: function () {\n            return this.cell.unitForgetBias;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"kernelRegularizer\", {\n        get: function () {\n            return this.cell.kernelRegularizer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"recurrentRegularizer\", {\n        get: function () {\n            return this.cell.recurrentRegularizer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"biasRegularizer\", {\n        get: function () {\n            return this.cell.biasRegularizer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"kernelConstraint\", {\n        get: function () {\n            return this.cell.kernelConstraint;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"recurrentConstraint\", {\n        get: function () {\n            return this.cell.recurrentConstraint;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"biasConstraint\", {\n        get: function () {\n            return this.cell.biasConstraint;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"dropout\", {\n        get: function () {\n            return this.cell.dropout;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"recurrentDropout\", {\n        get: function () {\n            return this.cell.recurrentDropout;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"implementation\", {\n        get: function () {\n            return this.cell.implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    LSTM.prototype.getConfig = function () {\n        var config = {\n            units: this.units,\n            activation: activations_1.serializeActivation(this.activation),\n            useBias: this.useBias,\n            kernelInitializer: initializers_1.serializeInitializer(this.kernelInitializer),\n            recurrentInitializer: initializers_1.serializeInitializer(this.recurrentInitializer),\n            biasInitializer: initializers_1.serializeInitializer(this.biasInitializer),\n            unitForgetBias: this.unitForgetBias,\n            kernelRegularizer: regularizers_1.serializeRegularizer(this.kernelRegularizer),\n            recurrentRegularizer: regularizers_1.serializeRegularizer(this.recurrentRegularizer),\n            biasRegularizer: regularizers_1.serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: regularizers_1.serializeRegularizer(this.activityRegularizer),\n            kernelConstraint: constraints_1.serializeConstraint(this.kernelConstraint),\n            recurrentConstraint: constraints_1.serializeConstraint(this.recurrentConstraint),\n            biasConstraint: constraints_1.serializeConstraint(this.biasConstraint),\n            dropout: this.dropout,\n            recurrentDropout: this.recurrentDropout,\n            implementation: this.implementation,\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    LSTM.fromConfig = function (cls, config) {\n        if (config['implmentation'] === 0) {\n            config['implementation'] = 1;\n        }\n        return new cls(config);\n    };\n    return LSTM;\n}(RNN));\nexports.LSTM = LSTM;\ngeneric_utils.ClassNameMap.register('LSTM', LSTM);\nvar StackedRNNCells = (function (_super) {\n    __extends(StackedRNNCells, _super);\n    function StackedRNNCells(config) {\n        var _this = _super.call(this, config) || this;\n        _this.cells = config.cells;\n        return _this;\n    }\n    Object.defineProperty(StackedRNNCells.prototype, \"stateSize\", {\n        get: function () {\n            var stateSize = [];\n            for (var _i = 0, _a = this.cells.slice().reverse(); _i < _a.length; _i++) {\n                var cell = _a[_i];\n                if (Array.isArray(cell.stateSize)) {\n                    stateSize.push.apply(stateSize, cell.stateSize);\n                }\n                else {\n                    stateSize.push(cell.stateSize);\n                }\n            }\n            return stateSize;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    StackedRNNCells.prototype.call = function (inputs, kwargs) {\n        inputs = inputs;\n        var states = inputs.slice(1);\n        var nestedStates = [];\n        for (var _i = 0, _a = this.cells.slice().reverse(); _i < _a.length; _i++) {\n            var cell = _a[_i];\n            if (Array.isArray(cell.stateSize)) {\n                nestedStates.push(states.splice(0, cell.stateSize.length));\n            }\n            else {\n                nestedStates.push(states.splice(0, 1));\n            }\n        }\n        nestedStates.reverse();\n        var newNestedStates = [];\n        var callInputs;\n        for (var i = 0; i < this.cells.length; ++i) {\n            var cell = this.cells[i];\n            states = nestedStates[i];\n            if (i === 0) {\n                callInputs = [inputs[0]].concat(states);\n            }\n            else {\n                callInputs = [callInputs[0]].concat(states);\n            }\n            callInputs = cell.call(callInputs, kwargs);\n            newNestedStates.push(callInputs.slice(1));\n        }\n        states = [];\n        for (var _b = 0, _c = newNestedStates.slice().reverse(); _b < _c.length; _b++) {\n            var cellStates = _c[_b];\n            states.push.apply(states, cellStates);\n        }\n        return [callInputs[0]].concat(states);\n    };\n    StackedRNNCells.prototype.build = function (inputShape) {\n        if (generic_utils.isArrayOfShapes(inputShape)) {\n            inputShape = inputShape[0];\n        }\n        inputShape = inputShape;\n        var outputDim;\n        for (var _i = 0, _a = this.cells; _i < _a.length; _i++) {\n            var cell = _a[_i];\n            cell.build(inputShape);\n            if (Array.isArray(cell.stateSize)) {\n                outputDim = cell.stateSize[0];\n            }\n            else {\n                outputDim = cell.stateSize;\n            }\n            inputShape = [inputShape[0], outputDim];\n        }\n        this.built = true;\n    };\n    StackedRNNCells.prototype.getConfig = function () {\n        var cellConfigs = [];\n        for (var _i = 0, _a = this.cells; _i < _a.length; _i++) {\n            var cell = _a[_i];\n            cellConfigs.push({\n                'className': this.constructor.name,\n                'config': cell.getConfig(),\n            });\n        }\n        var config = { 'cells': cellConfigs };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    StackedRNNCells.fromConfig = function (cls, config, customObjects) {\n        if (customObjects === void 0) { customObjects = {}; }\n        var cells = [];\n        for (var _i = 0, _a = config['cells']; _i < _a.length; _i++) {\n            var cellConfig = _a[_i];\n            cells.push(serialization_1.deserialize(cellConfig, customObjects));\n        }\n        return new cls({ cells: cells });\n    };\n    Object.defineProperty(StackedRNNCells.prototype, \"trainableWeights\", {\n        get: function () {\n            if (!this.trainable) {\n                return [];\n            }\n            var weights = [];\n            for (var _i = 0, _a = this.cells; _i < _a.length; _i++) {\n                var cell = _a[_i];\n                weights.push.apply(weights, cell.trainableWeights);\n            }\n            return weights;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(StackedRNNCells.prototype, \"nonTrainableWeights\", {\n        get: function () {\n            var weights = [];\n            for (var _i = 0, _a = this.cells; _i < _a.length; _i++) {\n                var cell = _a[_i];\n                weights.push.apply(weights, cell.nonTrainableWeights);\n            }\n            if (!this.trainable) {\n                var trainableWeights = [];\n                for (var _b = 0, _c = this.cells; _b < _c.length; _b++) {\n                    var cell = _c[_b];\n                    trainableWeights.push.apply(trainableWeights, cell.trainableWeights);\n                }\n                return trainableWeights.concat(weights);\n            }\n            return weights;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    StackedRNNCells.prototype.getWeights = function () {\n        var weights = [];\n        for (var _i = 0, _a = this.cells; _i < _a.length; _i++) {\n            var cell = _a[_i];\n            weights.push.apply(weights, cell.weights);\n        }\n        return K.batchGetValue(weights);\n    };\n    StackedRNNCells.prototype.setWeights = function (weights) {\n        var tuples = [];\n        for (var _i = 0, _a = this.cells; _i < _a.length; _i++) {\n            var cell = _a[_i];\n            var numParams = cell.weights.length;\n            var inputWeights = weights.splice(numParams);\n            for (var i = 0; i < cell.weights.length; ++i) {\n                tuples.push([cell.weights[i], inputWeights[i]]);\n            }\n        }\n        K.batchSetValue(tuples);\n    };\n    return StackedRNNCells;\n}(RNNCell));\nexports.StackedRNNCells = StackedRNNCells;\ngeneric_utils.ClassNameMap.register('StackedRNNCells', StackedRNNCells);\n"},"lineCount":1394}},"hash":"2418b2cd958cbc95035c5fad440c15b9","cacheData":{"env":{}}}