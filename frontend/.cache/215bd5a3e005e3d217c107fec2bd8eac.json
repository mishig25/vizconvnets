{"dependencies":[{"name":"/home/mishig/Desktop/vizgithub/frontend/package.json","includedInParent":true,"mtime":1523230167415},{"name":"/home/mishig/Desktop/vizgithub/frontend/node_modules/@tensorflow/tfjs-layers/package.json","includedInParent":true,"mtime":1522260134000},{"name":"underscore","loc":{"line":13,"column":16}},{"name":"../backend/tfjs_backend","loc":{"line":14,"column":16}},{"name":"../constraints","loc":{"line":15,"column":28}},{"name":"../engine/topology","loc":{"line":16,"column":25}},{"name":"../errors","loc":{"line":17,"column":23}},{"name":"../initializers","loc":{"line":18,"column":29}},{"name":"../regularizers","loc":{"line":19,"column":29}},{"name":"../utils/generic_utils","loc":{"line":20,"column":28}}],"generated":{"js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _ = require(\"underscore\");\nvar K = require(\"../backend/tfjs_backend\");\nvar constraints_1 = require(\"../constraints\");\nvar topology_1 = require(\"../engine/topology\");\nvar errors_1 = require(\"../errors\");\nvar initializers_1 = require(\"../initializers\");\nvar regularizers_1 = require(\"../regularizers\");\nvar generic_utils = require(\"../utils/generic_utils\");\nvar BatchNormalization = (function (_super) {\n    __extends(BatchNormalization, _super);\n    function BatchNormalization(config) {\n        var _this = _super.call(this, config) || this;\n        _this.supportsMasking = true;\n        _this.axis = config.axis == null ? -1 : config.axis;\n        _this.momentum = config.momentum == null ? 0.99 : config.momentum;\n        _this.epsilon = config.epsilon == null ? 1e-3 : config.epsilon;\n        _this.center = config.center == null ? true : config.center;\n        _this.scale = config.scale == null ? true : config.scale;\n        _this.betaInitializer = initializers_1.getInitializer(config.betaInitializer || 'zeros');\n        _this.gammaInitializer = initializers_1.getInitializer(config.gammaInitializer || 'ones');\n        _this.movingMeanInitializer =\n            initializers_1.getInitializer(config.movingMeanInitializer || 'zeros');\n        _this.movingVarianceInitializer =\n            initializers_1.getInitializer(config.movingVarianceInitializer || 'ones');\n        _this.betaConstraint = constraints_1.getConstraint(config.betaConstraint);\n        _this.gammaConstraint = constraints_1.getConstraint(config.gammaConstraint);\n        _this.betaRegularizer = regularizers_1.getRegularizer(config.betaRegularizer);\n        _this.gammaRegularizer = regularizers_1.getRegularizer(config.gammaRegularizer);\n        return _this;\n    }\n    BatchNormalization.prototype.build = function (inputShape) {\n        inputShape = generic_utils.getExactlyOneShape(inputShape);\n        var axis = this.axis >= 0 ? this.axis : (this.axis + inputShape.length);\n        var dim = inputShape[axis];\n        if (dim == null) {\n            throw new errors_1.ValueError(\"Axis \" + axis + \" of input tensor should have a defined dimension but \" +\n                \"the layer received an input with shape \" +\n                (JSON.stringify(inputShape) + \".\"));\n        }\n        this.inputSpec =\n            [new topology_1.InputSpec({ ndim: inputShape.length, axes: (_a = {}, _a[axis] = dim, _a) })];\n        var shape = [dim];\n        if (this.scale) {\n            this.gamma = this.addWeight('gamma', shape, null, this.gammaInitializer, this.gammaRegularizer, true, this.gammaConstraint);\n        }\n        if (this.center) {\n            this.beta = this.addWeight('beta', shape, null, this.betaInitializer, this.betaRegularizer, true, this.betaConstraint);\n        }\n        this.movingMean = this.addWeight('moving_mean', shape, null, this.movingMeanInitializer, null, false);\n        this.movingVariance = this.addWeight('moving_variance', shape, null, this.movingVarianceInitializer, null, false);\n        this.built = true;\n        var _a;\n    };\n    BatchNormalization.prototype.call = function (inputs, kwargs) {\n        var _this = this;\n        var training = kwargs['training'] == null ? false : kwargs['training'];\n        var input = generic_utils.getExactlyOneTensor(inputs);\n        var inputShape = K.shape(input);\n        var ndim = inputShape.length;\n        var reductionAxes = _.range(ndim);\n        var axis = this.axis >= 0 ? this.axis : (this.axis + ndim);\n        reductionAxes.splice(axis, 1);\n        var broadcastShape = generic_utils.pyListRepeat(1, ndim);\n        broadcastShape[axis] = inputShape[axis];\n        var sortedReductionAxes = reductionAxes.slice();\n        sortedReductionAxes.sort();\n        var needsBroadcasting = !_.isEqual(sortedReductionAxes, _.range(ndim).slice(0, ndim - 1));\n        var normalizeInference = function () {\n            if (needsBroadcasting) {\n                var broadcastMovingMean = K.reshape(_this.movingMean.read(), broadcastShape);\n                var broadcastMovingVariance = K.reshape(_this.movingVariance.read(), broadcastShape);\n                var broadcastBeta = _this.center ? K.reshape(_this.beta.read(), broadcastShape) : null;\n                var broadcastGamma = _this.center ? K.reshape(_this.gamma.read(), broadcastShape) : null;\n                return K.batchNormalization(input, broadcastMovingMean, broadcastMovingVariance, broadcastBeta, broadcastGamma, _this.epsilon);\n            }\n            else {\n                return K.batchNormalization(input, _this.movingMean.read(), _this.movingVariance.read(), _this.beta.read(), _this.gamma.read(), _this.epsilon);\n            }\n        };\n        if (!training) {\n            return normalizeInference();\n        }\n        throw new errors_1.NotImplementedError('BatchNormalization.call() has not been implemented for training ' +\n            'mode yet.');\n    };\n    BatchNormalization.prototype.getConfig = function () {\n        var config = {\n            axis: this.axis,\n            momentum: this.momentum,\n            epsilon: this.epsilon,\n            center: this.center,\n            scale: this.scale,\n            betaInitializer: initializers_1.serializeInitializer(this.betaInitializer),\n            gammaInitializer: initializers_1.serializeInitializer(this.gammaInitializer),\n            movingMeanInitializer: initializers_1.serializeInitializer(this.movingMeanInitializer),\n            movingVarianceInitializer: initializers_1.serializeInitializer(this.movingVarianceInitializer),\n            betaRegularizer: regularizers_1.serializeRegularizer(this.betaRegularizer),\n            gammaRegularizer: regularizers_1.serializeRegularizer(this.gammaRegularizer),\n            betaConstraint: constraints_1.serializeConstraint(this.betaConstraint),\n            gammaConstraint: constraints_1.serializeConstraint(this.gammaConstraint)\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    return BatchNormalization;\n}(topology_1.Layer));\nexports.BatchNormalization = BatchNormalization;\ngeneric_utils.ClassNameMap.register('BatchNormalization', BatchNormalization);\n","map":{"mappings":[{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}}],"sources":{"node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _ = require(\"underscore\");\nvar K = require(\"../backend/tfjs_backend\");\nvar constraints_1 = require(\"../constraints\");\nvar topology_1 = require(\"../engine/topology\");\nvar errors_1 = require(\"../errors\");\nvar initializers_1 = require(\"../initializers\");\nvar regularizers_1 = require(\"../regularizers\");\nvar generic_utils = require(\"../utils/generic_utils\");\nvar BatchNormalization = (function (_super) {\n    __extends(BatchNormalization, _super);\n    function BatchNormalization(config) {\n        var _this = _super.call(this, config) || this;\n        _this.supportsMasking = true;\n        _this.axis = config.axis == null ? -1 : config.axis;\n        _this.momentum = config.momentum == null ? 0.99 : config.momentum;\n        _this.epsilon = config.epsilon == null ? 1e-3 : config.epsilon;\n        _this.center = config.center == null ? true : config.center;\n        _this.scale = config.scale == null ? true : config.scale;\n        _this.betaInitializer = initializers_1.getInitializer(config.betaInitializer || 'zeros');\n        _this.gammaInitializer = initializers_1.getInitializer(config.gammaInitializer || 'ones');\n        _this.movingMeanInitializer =\n            initializers_1.getInitializer(config.movingMeanInitializer || 'zeros');\n        _this.movingVarianceInitializer =\n            initializers_1.getInitializer(config.movingVarianceInitializer || 'ones');\n        _this.betaConstraint = constraints_1.getConstraint(config.betaConstraint);\n        _this.gammaConstraint = constraints_1.getConstraint(config.gammaConstraint);\n        _this.betaRegularizer = regularizers_1.getRegularizer(config.betaRegularizer);\n        _this.gammaRegularizer = regularizers_1.getRegularizer(config.gammaRegularizer);\n        return _this;\n    }\n    BatchNormalization.prototype.build = function (inputShape) {\n        inputShape = generic_utils.getExactlyOneShape(inputShape);\n        var axis = this.axis >= 0 ? this.axis : (this.axis + inputShape.length);\n        var dim = inputShape[axis];\n        if (dim == null) {\n            throw new errors_1.ValueError(\"Axis \" + axis + \" of input tensor should have a defined dimension but \" +\n                \"the layer received an input with shape \" +\n                (JSON.stringify(inputShape) + \".\"));\n        }\n        this.inputSpec =\n            [new topology_1.InputSpec({ ndim: inputShape.length, axes: (_a = {}, _a[axis] = dim, _a) })];\n        var shape = [dim];\n        if (this.scale) {\n            this.gamma = this.addWeight('gamma', shape, null, this.gammaInitializer, this.gammaRegularizer, true, this.gammaConstraint);\n        }\n        if (this.center) {\n            this.beta = this.addWeight('beta', shape, null, this.betaInitializer, this.betaRegularizer, true, this.betaConstraint);\n        }\n        this.movingMean = this.addWeight('moving_mean', shape, null, this.movingMeanInitializer, null, false);\n        this.movingVariance = this.addWeight('moving_variance', shape, null, this.movingVarianceInitializer, null, false);\n        this.built = true;\n        var _a;\n    };\n    BatchNormalization.prototype.call = function (inputs, kwargs) {\n        var _this = this;\n        var training = kwargs['training'] == null ? false : kwargs['training'];\n        var input = generic_utils.getExactlyOneTensor(inputs);\n        var inputShape = K.shape(input);\n        var ndim = inputShape.length;\n        var reductionAxes = _.range(ndim);\n        var axis = this.axis >= 0 ? this.axis : (this.axis + ndim);\n        reductionAxes.splice(axis, 1);\n        var broadcastShape = generic_utils.pyListRepeat(1, ndim);\n        broadcastShape[axis] = inputShape[axis];\n        var sortedReductionAxes = reductionAxes.slice();\n        sortedReductionAxes.sort();\n        var needsBroadcasting = !_.isEqual(sortedReductionAxes, _.range(ndim).slice(0, ndim - 1));\n        var normalizeInference = function () {\n            if (needsBroadcasting) {\n                var broadcastMovingMean = K.reshape(_this.movingMean.read(), broadcastShape);\n                var broadcastMovingVariance = K.reshape(_this.movingVariance.read(), broadcastShape);\n                var broadcastBeta = _this.center ? K.reshape(_this.beta.read(), broadcastShape) : null;\n                var broadcastGamma = _this.center ? K.reshape(_this.gamma.read(), broadcastShape) : null;\n                return K.batchNormalization(input, broadcastMovingMean, broadcastMovingVariance, broadcastBeta, broadcastGamma, _this.epsilon);\n            }\n            else {\n                return K.batchNormalization(input, _this.movingMean.read(), _this.movingVariance.read(), _this.beta.read(), _this.gamma.read(), _this.epsilon);\n            }\n        };\n        if (!training) {\n            return normalizeInference();\n        }\n        throw new errors_1.NotImplementedError('BatchNormalization.call() has not been implemented for training ' +\n            'mode yet.');\n    };\n    BatchNormalization.prototype.getConfig = function () {\n        var config = {\n            axis: this.axis,\n            momentum: this.momentum,\n            epsilon: this.epsilon,\n            center: this.center,\n            scale: this.scale,\n            betaInitializer: initializers_1.serializeInitializer(this.betaInitializer),\n            gammaInitializer: initializers_1.serializeInitializer(this.gammaInitializer),\n            movingMeanInitializer: initializers_1.serializeInitializer(this.movingMeanInitializer),\n            movingVarianceInitializer: initializers_1.serializeInitializer(this.movingVarianceInitializer),\n            betaRegularizer: regularizers_1.serializeRegularizer(this.betaRegularizer),\n            gammaRegularizer: regularizers_1.serializeRegularizer(this.gammaRegularizer),\n            betaConstraint: constraints_1.serializeConstraint(this.betaConstraint),\n            gammaConstraint: constraints_1.serializeConstraint(this.gammaConstraint)\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    return BatchNormalization;\n}(topology_1.Layer));\nexports.BatchNormalization = BatchNormalization;\ngeneric_utils.ClassNameMap.register('BatchNormalization', BatchNormalization);\n"},"lineCount":122}},"hash":"f1caaab88e31b448658da8859a62afe6","cacheData":{"env":{}}}