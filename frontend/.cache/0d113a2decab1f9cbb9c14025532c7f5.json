{"dependencies":[{"name":"/home/mishig/Desktop/viz/final/package.json","includedInParent":true,"mtime":1522648746056},{"name":"/home/mishig/Desktop/viz/final/node_modules/seedrandom/package.json","includedInParent":true,"mtime":1492464043000},{"name":"./lib/alea","loc":{"line":13,"column":19}},{"name":"./lib/xor128","loc":{"line":18,"column":21}},{"name":"./lib/xorwow","loc":{"line":23,"column":21}},{"name":"./lib/xorshift7","loc":{"line":31,"column":24}},{"name":"./lib/xor4096","loc":{"line":40,"column":22}},{"name":"./lib/tychei","loc":{"line":47,"column":21}},{"name":"./seedrandom","loc":{"line":51,"column":17}}],"generated":{"js":"// A library of seedable RNGs implemented in Javascript.\n//\n// Usage:\n//\n// var seedrandom = require('seedrandom');\n// var random = seedrandom(1); // or any seed.\n// var x = random();       // 0 <= x < 1.  Every bit is random.\n// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.\n\n// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.\n// Period: ~2^116\n// Reported to pass all BigCrush tests.\nvar alea = require('./lib/alea');\n\n// xor128, a pure xor-shift generator by George Marsaglia.\n// Period: 2^128-1.\n// Reported to fail: MatrixRank and LinearComp.\nvar xor128 = require('./lib/xor128');\n\n// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.\n// Period: 2^192-2^32\n// Reported to fail: CollisionOver, SimpPoker, and LinearComp.\nvar xorwow = require('./lib/xorwow');\n\n// xorshift7, by François Panneton and Pierre L'ecuyer, takes\n// a different approach: it adds robustness by allowing more shifts\n// than Marsaglia's original three.  It is a 7-shift generator\n// with 256 bits, that passes BigCrush with no systmatic failures.\n// Period 2^256-1.\n// No systematic BigCrush failures reported.\nvar xorshift7 = require('./lib/xorshift7');\n\n// xor4096, by Richard Brent, is a 4096-bit xor-shift with a\n// very long period that also adds a Weyl generator. It also passes\n// BigCrush with no systematic failures.  Its long period may\n// be useful if you have many generators and need to avoid\n// collisions.\n// Period: 2^4128-2^32.\n// No systematic BigCrush failures reported.\nvar xor4096 = require('./lib/xor4096');\n\n// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random\n// number generator derived from ChaCha, a modern stream cipher.\n// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n// Period: ~2^127\n// No systematic BigCrush failures reported.\nvar tychei = require('./lib/tychei');\n\n// The original ARC4-based prng included in this library.\n// Period: ~2^1600\nvar sr = require('./seedrandom');\n\nsr.alea = alea;\nsr.xor128 = xor128;\nsr.xorwow = xorwow;\nsr.xorshift7 = xorshift7;\nsr.xor4096 = xor4096;\nsr.tychei = tychei;\n\nmodule.exports = sr;\n","map":{"mappings":[{"source":"node_modules/seedrandom/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/seedrandom/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}}],"sources":{"node_modules/seedrandom/index.js":"// A library of seedable RNGs implemented in Javascript.\n//\n// Usage:\n//\n// var seedrandom = require('seedrandom');\n// var random = seedrandom(1); // or any seed.\n// var x = random();       // 0 <= x < 1.  Every bit is random.\n// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.\n\n// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.\n// Period: ~2^116\n// Reported to pass all BigCrush tests.\nvar alea = require('./lib/alea');\n\n// xor128, a pure xor-shift generator by George Marsaglia.\n// Period: 2^128-1.\n// Reported to fail: MatrixRank and LinearComp.\nvar xor128 = require('./lib/xor128');\n\n// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.\n// Period: 2^192-2^32\n// Reported to fail: CollisionOver, SimpPoker, and LinearComp.\nvar xorwow = require('./lib/xorwow');\n\n// xorshift7, by François Panneton and Pierre L'ecuyer, takes\n// a different approach: it adds robustness by allowing more shifts\n// than Marsaglia's original three.  It is a 7-shift generator\n// with 256 bits, that passes BigCrush with no systmatic failures.\n// Period 2^256-1.\n// No systematic BigCrush failures reported.\nvar xorshift7 = require('./lib/xorshift7');\n\n// xor4096, by Richard Brent, is a 4096-bit xor-shift with a\n// very long period that also adds a Weyl generator. It also passes\n// BigCrush with no systematic failures.  Its long period may\n// be useful if you have many generators and need to avoid\n// collisions.\n// Period: 2^4128-2^32.\n// No systematic BigCrush failures reported.\nvar xor4096 = require('./lib/xor4096');\n\n// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random\n// number generator derived from ChaCha, a modern stream cipher.\n// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n// Period: ~2^127\n// No systematic BigCrush failures reported.\nvar tychei = require('./lib/tychei');\n\n// The original ARC4-based prng included in this library.\n// Period: ~2^1600\nvar sr = require('./seedrandom');\n\nsr.alea = alea;\nsr.xor128 = xor128;\nsr.xorwow = xorwow;\nsr.xorshift7 = xorshift7;\nsr.xor4096 = xor4096;\nsr.tychei = tychei;\n\nmodule.exports = sr;\n"},"lineCount":61}},"hash":"b44a6b56b2549db7343e06bf5018de55","cacheData":{"env":{}}}