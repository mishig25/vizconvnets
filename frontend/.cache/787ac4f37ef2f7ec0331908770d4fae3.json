{"dependencies":[{"name":"/home/mishig/Desktop/viz/final/package.json","includedInParent":true,"mtime":1522648746056},{"name":"/home/mishig/Desktop/viz/final/node_modules/phaser/package.json","includedInParent":true,"mtime":1521632677000},{"name":"../display/align/in/QuickSet","loc":{"line":7,"column":22}},{"name":"../display/align/const","loc":{"line":8,"column":20}},{"name":"../utils/object/GetFastValue","loc":{"line":9,"column":27}},{"name":"../utils/NOOP","loc":{"line":10,"column":19}},{"name":"../gameobjects/zone/Zone","loc":{"line":11,"column":19}}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar AlignIn = require('../display/align/in/QuickSet');\r\nvar CONST = require('../display/align/const');\r\nvar GetFastValue = require('../utils/object/GetFastValue');\r\nvar NOOP = require('../utils/NOOP');\r\nvar Zone = require('../gameobjects/zone/Zone');\r\n\r\nvar tempZone = new Zone({ sys: { queueDepthSort: NOOP }}, 0, 0, 1, 1);\r\n\r\n/**\r\n * @typedef {object} GridAlignConfig\r\n *\r\n * @property {integer} [width=-1] - The width of the grid in items (not pixels). -1 means lay all items out horizontally, regardless of quantity.\r\n *                                  If both this value and height are set to -1 then this value overrides it and the `height` value is ignored.\r\n * @property {integer} [height=-1] - The height of the grid in items (not pixels). -1 means lay all items out vertically, regardless of quantity.\r\n *                                   If both this value and `width` are set to -1 then `width` overrides it and this value is ignored.\r\n * @property {boolean} [cellWidth=1] - The width of the cell, in pixels, in which the item is positioned.\r\n * @property {integer} [cellHeight=1] - The height of the cell, in pixels, in which the item is positioned.\r\n * @property {integer} [position=0] - The alignment position. One of the Phaser.Display.Align consts such as `TOP_LEFT` or `RIGHT_CENTER`.\r\n * @property {number} [x=0] - Optionally place the top-left of the final grid at this coordinate.\r\n * @property {number} [y=0] - Optionally place the top-left of the final grid at this coordinate.\r\n */\r\n\r\n/**\r\n * Takes an array of Game Objects, or any objects that have public `x` and `y` properties,\r\n * and then aligns them based on the grid configuration given to this action.\r\n *\r\n * @function Phaser.Actions.GridAlign\r\n * @since 3.0.0\r\n *\r\n * @param {(array|Phaser.GameObjects.GameObject[])} items - The array of items to be updated by this action.\r\n * @param {GridAlignConfig} options - The GridAlign Configuration object.\r\n *\r\n * @return {array} The array of objects that were passed to this Action.\r\n */\r\nvar GridAlign = function (items, options)\r\n{\r\n    if (options === undefined) { options = {}; }\r\n\r\n    var width = GetFastValue(options, 'width', -1);\r\n    var height = GetFastValue(options, 'height', -1);\r\n    var cellWidth = GetFastValue(options, 'cellWidth', 1);\r\n    var cellHeight = GetFastValue(options, 'cellHeight', cellWidth);\r\n    var position = GetFastValue(options, 'position', CONST.TOP_LEFT);\r\n    var x = GetFastValue(options, 'x', 0);\r\n    var y = GetFastValue(options, 'y', 0);\r\n\r\n    var cx = 0;\r\n    var cy = 0;\r\n    var w = (width * cellWidth);\r\n    var h = (height * cellHeight);\r\n\r\n    tempZone.setPosition(x, y);\r\n    tempZone.setSize(cellWidth, cellHeight);\r\n\r\n    for (var i = 0; i < items.length; i++)\r\n    {\r\n        AlignIn(items[i], tempZone, position);\r\n\r\n        if (width === -1)\r\n        {\r\n            //  We keep laying them out horizontally until we've done them all\r\n            cy += cellHeight;\r\n            tempZone.y += cellHeight;\r\n\r\n            if (cy === h)\r\n            {\r\n                cy = 0;\r\n                tempZone.x += cellWidth;\r\n                tempZone.y = y;\r\n            }\r\n        }\r\n        else if (height === -1)\r\n        {\r\n            //  We keep laying them out vertically until we've done them all\r\n            cx += cellWidth;\r\n            tempZone.x += cellWidth;\r\n\r\n            if (cx === w)\r\n            {\r\n                cx = 0;\r\n                tempZone.x = x;\r\n                tempZone.y += cellHeight;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            //  We keep laying them out until we hit the column limit\r\n            cx += cellWidth;\r\n            tempZone.x += cellWidth;\r\n\r\n            if (cx === w)\r\n            {\r\n                cx = 0;\r\n                cy += cellHeight;\r\n                tempZone.x = x;\r\n                tempZone.y += cellHeight;\r\n\r\n                if (cy === h)\r\n                {\r\n                    //  We've hit the column limit, so return, even if there are items left\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return items;\r\n};\r\n\r\nmodule.exports = GridAlign;\r\n","map":{"mappings":[{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/phaser/src/actions/GridAlign.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}}],"sources":{"node_modules/phaser/src/actions/GridAlign.js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar AlignIn = require('../display/align/in/QuickSet');\r\nvar CONST = require('../display/align/const');\r\nvar GetFastValue = require('../utils/object/GetFastValue');\r\nvar NOOP = require('../utils/NOOP');\r\nvar Zone = require('../gameobjects/zone/Zone');\r\n\r\nvar tempZone = new Zone({ sys: { queueDepthSort: NOOP }}, 0, 0, 1, 1);\r\n\r\n/**\r\n * @typedef {object} GridAlignConfig\r\n *\r\n * @property {integer} [width=-1] - The width of the grid in items (not pixels). -1 means lay all items out horizontally, regardless of quantity.\r\n *                                  If both this value and height are set to -1 then this value overrides it and the `height` value is ignored.\r\n * @property {integer} [height=-1] - The height of the grid in items (not pixels). -1 means lay all items out vertically, regardless of quantity.\r\n *                                   If both this value and `width` are set to -1 then `width` overrides it and this value is ignored.\r\n * @property {boolean} [cellWidth=1] - The width of the cell, in pixels, in which the item is positioned.\r\n * @property {integer} [cellHeight=1] - The height of the cell, in pixels, in which the item is positioned.\r\n * @property {integer} [position=0] - The alignment position. One of the Phaser.Display.Align consts such as `TOP_LEFT` or `RIGHT_CENTER`.\r\n * @property {number} [x=0] - Optionally place the top-left of the final grid at this coordinate.\r\n * @property {number} [y=0] - Optionally place the top-left of the final grid at this coordinate.\r\n */\r\n\r\n/**\r\n * Takes an array of Game Objects, or any objects that have public `x` and `y` properties,\r\n * and then aligns them based on the grid configuration given to this action.\r\n *\r\n * @function Phaser.Actions.GridAlign\r\n * @since 3.0.0\r\n *\r\n * @param {(array|Phaser.GameObjects.GameObject[])} items - The array of items to be updated by this action.\r\n * @param {GridAlignConfig} options - The GridAlign Configuration object.\r\n *\r\n * @return {array} The array of objects that were passed to this Action.\r\n */\r\nvar GridAlign = function (items, options)\r\n{\r\n    if (options === undefined) { options = {}; }\r\n\r\n    var width = GetFastValue(options, 'width', -1);\r\n    var height = GetFastValue(options, 'height', -1);\r\n    var cellWidth = GetFastValue(options, 'cellWidth', 1);\r\n    var cellHeight = GetFastValue(options, 'cellHeight', cellWidth);\r\n    var position = GetFastValue(options, 'position', CONST.TOP_LEFT);\r\n    var x = GetFastValue(options, 'x', 0);\r\n    var y = GetFastValue(options, 'y', 0);\r\n\r\n    var cx = 0;\r\n    var cy = 0;\r\n    var w = (width * cellWidth);\r\n    var h = (height * cellHeight);\r\n\r\n    tempZone.setPosition(x, y);\r\n    tempZone.setSize(cellWidth, cellHeight);\r\n\r\n    for (var i = 0; i < items.length; i++)\r\n    {\r\n        AlignIn(items[i], tempZone, position);\r\n\r\n        if (width === -1)\r\n        {\r\n            //  We keep laying them out horizontally until we've done them all\r\n            cy += cellHeight;\r\n            tempZone.y += cellHeight;\r\n\r\n            if (cy === h)\r\n            {\r\n                cy = 0;\r\n                tempZone.x += cellWidth;\r\n                tempZone.y = y;\r\n            }\r\n        }\r\n        else if (height === -1)\r\n        {\r\n            //  We keep laying them out vertically until we've done them all\r\n            cx += cellWidth;\r\n            tempZone.x += cellWidth;\r\n\r\n            if (cx === w)\r\n            {\r\n                cx = 0;\r\n                tempZone.x = x;\r\n                tempZone.y += cellHeight;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            //  We keep laying them out until we hit the column limit\r\n            cx += cellWidth;\r\n            tempZone.x += cellWidth;\r\n\r\n            if (cx === w)\r\n            {\r\n                cx = 0;\r\n                cy += cellHeight;\r\n                tempZone.x = x;\r\n                tempZone.y += cellHeight;\r\n\r\n                if (cy === h)\r\n                {\r\n                    //  We've hit the column limit, so return, even if there are items left\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return items;\r\n};\r\n\r\nmodule.exports = GridAlign;\r\n"},"lineCount":117}},"hash":"0370341330f67e83ffe32a77fd78eb70","cacheData":{"env":{}}}