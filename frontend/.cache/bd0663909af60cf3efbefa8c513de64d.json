{"dependencies":[{"name":"/home/mishig/Desktop/vizgithub/frontend/package.json","includedInParent":true,"mtime":1523230167415},{"name":"/home/mishig/Desktop/vizgithub/frontend/node_modules/@tensorflow/tfjs-core/package.json","includedInParent":true,"mtime":0},{"name":"../doc","loc":{"line":9,"column":20}},{"name":"../globals","loc":{"line":10,"column":24}},{"name":"../util","loc":{"line":11,"column":19}},{"name":"./axis_util","loc":{"line":12,"column":24}},{"name":"./operation","loc":{"line":13,"column":26}},{"name":"./ops","loc":{"line":14,"column":18}}],"generated":{"js":"\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = require(\"../doc\");\nvar globals_1 = require(\"../globals\");\nvar util = require(\"../util\");\nvar axis_util = require(\"./axis_util\");\nvar operation_1 = require(\"./operation\");\nvar ops = require(\"./ops\");\nvar SoftmaxOps = (function () {\n    function SoftmaxOps() {\n    }\n    SoftmaxOps.softmax = function (logits, dim) {\n        if (dim === void 0) { dim = -1; }\n        if (dim === -1) {\n            dim = logits.rank - 1;\n        }\n        if (dim !== logits.rank - 1) {\n            throw Error('Softmax along a non-last dimension is not yet supported. ' +\n                (\"Logits was rank \" + logits.rank + \" and dim was \" + dim));\n        }\n        var customOp = globals_1.customGrad(function (logits) {\n            var keepDims = true;\n            var lse = logits.logSumExp([dim], keepDims);\n            var logResult = logits.toFloat().sub(lse);\n            var y = logResult.exp();\n            var gradFunc = function (dy) {\n                var dyTimesY = dy.mul(y);\n                var keepDims = true;\n                return dyTimesY.sub(dyTimesY.sum([dim], keepDims).mul(y));\n            };\n            return { value: y, gradFunc: gradFunc };\n        });\n        return customOp(logits);\n    };\n    SoftmaxOps.softmaxCrossEntropy = function (labels, logits, dim) {\n        if (dim === void 0) { dim = -1; }\n        util.assertShapesMatch(labels.shape, logits.shape, 'Error in softmaxCrossEntropy: ');\n        if (dim === -1) {\n            dim = logits.rank - 1;\n        }\n        if (dim !== logits.rank - 1) {\n            throw Error(\"Softmax cross entropy along a non-last dimension is not yet \" +\n                (\"supported. Labels / logits was rank \" + logits.rank + \" \") +\n                (\"and dim was \" + dim));\n        }\n        var customOp = globals_1.customGrad(function (labels, logits) {\n            var predictedProbs = logits.softmax(dim);\n            var costVector = ops.scalar(1e-5).add(predictedProbs).log().mul(labels).neg();\n            var value = costVector.sum([dim]);\n            var gradFunc = function (dy) {\n                var dyShape = axis_util.expandShapeToKeepDim(dy.shape, [dim]);\n                return [\n                    dy.reshape(dyShape).mul(labels.toFloat().sub(predictedProbs)),\n                    dy.reshape(dyShape).mul(predictedProbs.sub(labels.toFloat())),\n                ];\n            };\n            return { value: value, gradFunc: gradFunc };\n        });\n        return customOp(labels, logits);\n    };\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Normalization' }),\n        operation_1.operation\n    ], SoftmaxOps, \"softmax\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Training', subheading: 'Losses', namespace: 'losses' }),\n        operation_1.operation\n    ], SoftmaxOps, \"softmaxCrossEntropy\", null);\n    return SoftmaxOps;\n}());\nexports.SoftmaxOps = SoftmaxOps;\n","map":{"mappings":[{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}}],"sources":{"node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js":"\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = require(\"../doc\");\nvar globals_1 = require(\"../globals\");\nvar util = require(\"../util\");\nvar axis_util = require(\"./axis_util\");\nvar operation_1 = require(\"./operation\");\nvar ops = require(\"./ops\");\nvar SoftmaxOps = (function () {\n    function SoftmaxOps() {\n    }\n    SoftmaxOps.softmax = function (logits, dim) {\n        if (dim === void 0) { dim = -1; }\n        if (dim === -1) {\n            dim = logits.rank - 1;\n        }\n        if (dim !== logits.rank - 1) {\n            throw Error('Softmax along a non-last dimension is not yet supported. ' +\n                (\"Logits was rank \" + logits.rank + \" and dim was \" + dim));\n        }\n        var customOp = globals_1.customGrad(function (logits) {\n            var keepDims = true;\n            var lse = logits.logSumExp([dim], keepDims);\n            var logResult = logits.toFloat().sub(lse);\n            var y = logResult.exp();\n            var gradFunc = function (dy) {\n                var dyTimesY = dy.mul(y);\n                var keepDims = true;\n                return dyTimesY.sub(dyTimesY.sum([dim], keepDims).mul(y));\n            };\n            return { value: y, gradFunc: gradFunc };\n        });\n        return customOp(logits);\n    };\n    SoftmaxOps.softmaxCrossEntropy = function (labels, logits, dim) {\n        if (dim === void 0) { dim = -1; }\n        util.assertShapesMatch(labels.shape, logits.shape, 'Error in softmaxCrossEntropy: ');\n        if (dim === -1) {\n            dim = logits.rank - 1;\n        }\n        if (dim !== logits.rank - 1) {\n            throw Error(\"Softmax cross entropy along a non-last dimension is not yet \" +\n                (\"supported. Labels / logits was rank \" + logits.rank + \" \") +\n                (\"and dim was \" + dim));\n        }\n        var customOp = globals_1.customGrad(function (labels, logits) {\n            var predictedProbs = logits.softmax(dim);\n            var costVector = ops.scalar(1e-5).add(predictedProbs).log().mul(labels).neg();\n            var value = costVector.sum([dim]);\n            var gradFunc = function (dy) {\n                var dyShape = axis_util.expandShapeToKeepDim(dy.shape, [dim]);\n                return [\n                    dy.reshape(dyShape).mul(labels.toFloat().sub(predictedProbs)),\n                    dy.reshape(dyShape).mul(predictedProbs.sub(labels.toFloat())),\n                ];\n            };\n            return { value: value, gradFunc: gradFunc };\n        });\n        return customOp(labels, logits);\n    };\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Normalization' }),\n        operation_1.operation\n    ], SoftmaxOps, \"softmax\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Training', subheading: 'Losses', namespace: 'losses' }),\n        operation_1.operation\n    ], SoftmaxOps, \"softmaxCrossEntropy\", null);\n    return SoftmaxOps;\n}());\nexports.SoftmaxOps = SoftmaxOps;\n"},"lineCount":78}},"hash":"797c702ce16ce5fc501dc45030c47e70","cacheData":{"env":{}}}