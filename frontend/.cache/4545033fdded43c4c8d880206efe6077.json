{"dependencies":[{"name":"/home/mishig/Desktop/vizgithub/frontend/package.json","includedInParent":true,"mtime":1523230167415},{"name":"/home/mishig/Desktop/vizgithub/frontend/node_modules/@tensorflow/tfjs-core/package.json","includedInParent":true,"mtime":0},{"name":"../doc","loc":{"line":9,"column":20}},{"name":"../environment","loc":{"line":10,"column":28}},{"name":"../util","loc":{"line":11,"column":19}},{"name":"./conv_util","loc":{"line":12,"column":24}},{"name":"./operation","loc":{"line":13,"column":26}}],"generated":{"js":"\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = require(\"../doc\");\nvar environment_1 = require(\"../environment\");\nvar util = require(\"../util\");\nvar conv_util = require(\"./conv_util\");\nvar operation_1 = require(\"./operation\");\nvar PoolOps = (function () {\n    function PoolOps() {\n    }\n    PoolOps.maxPool = function (x, filterSize, strides, pad, dimRoundingMode) {\n        var x4D = x;\n        var reshapedTo4D = false;\n        if (x.rank === 3) {\n            reshapedTo4D = true;\n            x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);\n        }\n        util.assert(x4D.rank === 4, \"Error in maxPool: input must be rank 4 but got rank \" + x4D.rank + \".\");\n        if (dimRoundingMode != null) {\n            util.assert(util.isInt(pad), \"Error in maxPool: pad must be an integer when using, \" +\n                (\"dimRoundingMode \" + dimRoundingMode + \" but got pad \" + pad + \".\"));\n        }\n        var convInfo = conv_util.computePool2DInfo(x4D.shape, filterSize, strides, pad, dimRoundingMode);\n        var grad = function (dy) {\n            return {\n                x: function () { return PoolOps.maxPoolBackprop(dy, x4D, filterSize, strides, pad); }\n            };\n        };\n        var res = environment_1.ENV.engine.runKernel(function (backend) { return backend.maxPool(x4D, convInfo); }, { x: x4D }, grad);\n        if (reshapedTo4D) {\n            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);\n        }\n        return res;\n    };\n    PoolOps.maxPoolBackprop = function (dy, input, filterSize, strides, pad, dimRoundingMode) {\n        util.assert(input.rank === dy.rank, \"Rank of input (\" + input.rank + \") does not match rank of dy (\" + dy.rank + \")\");\n        var input4D = input;\n        var dy4D = dy;\n        var reshapedTo4D = false;\n        if (input.rank === 3) {\n            reshapedTo4D = true;\n            input4D = input.as4D(1, input.shape[0], input.shape[1], input.shape[2]);\n            dy4D = dy.as4D(1, dy.shape[0], dy.shape[1], dy.shape[2]);\n        }\n        util.assert(dy4D.rank === 4, \"Error in maxPoolBackprop: dy must be rank 4 but got rank \" +\n            (dy4D.rank + \".\"));\n        util.assert(input4D.rank === 4, \"Error in maxPoolBackprop: input must be rank 4 but got rank \" +\n            (input4D.rank + \".\"));\n        if (dimRoundingMode != null) {\n            util.assert(util.isInt(pad), \"Error in maxPoolBackprop: pad must be an integer when using, \" +\n                (\"dimRoundingMode \" + dimRoundingMode + \" but got pad \" + pad + \".\"));\n        }\n        var convInfo = conv_util.computePool2DInfo(input4D.shape, filterSize, strides, pad, dimRoundingMode);\n        var res = environment_1.ENV.engine.runKernel(function (backend) { return backend.maxPoolBackprop(dy4D, input4D, convInfo); }, { dy4D: dy4D, input4D: input4D });\n        if (reshapedTo4D) {\n            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);\n        }\n        return res;\n    };\n    PoolOps.minPool = function (input, filterSize, strides, pad, dimRoundingMode) {\n        var input4D = input;\n        var reshapedTo4D = false;\n        if (input.rank === 3) {\n            reshapedTo4D = true;\n            input4D = input.as4D(1, input.shape[0], input.shape[1], input.shape[2]);\n        }\n        util.assert(input4D.rank === 4, \"Error in minPool: x must be rank 4 but got rank \" + input4D.rank + \".\");\n        if (dimRoundingMode != null) {\n            util.assert(util.isInt(pad), \"Error in minPool: pad must be an integer when using, \" +\n                (\"dimRoundingMode \" + dimRoundingMode + \" but got pad \" + pad + \".\"));\n        }\n        var convInfo = conv_util.computePool2DInfo(input4D.shape, filterSize, strides, pad, dimRoundingMode);\n        var res = environment_1.ENV.engine.runKernel(function (backend) { return backend.minPool(input4D, convInfo); }, { input4D: input4D });\n        if (reshapedTo4D) {\n            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);\n        }\n        return res;\n    };\n    PoolOps.avgPool = function (x, filterSize, strides, pad, dimRoundingMode) {\n        var x4D = x;\n        var reshapedTo4D = false;\n        if (x.rank === 3) {\n            reshapedTo4D = true;\n            x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);\n        }\n        util.assert(x4D.rank === 4, \"Error in avgPool: x must be rank 4 but got rank \" + x4D.rank + \".\");\n        if (dimRoundingMode != null) {\n            util.assert(util.isInt(pad), \"Error in avgPool: pad must be an integer when using, \" +\n                (\"dimRoundingMode \" + dimRoundingMode + \" but got pad \" + pad + \".\"));\n        }\n        var convInfo = conv_util.computePool2DInfo(x4D.shape, filterSize, strides, pad);\n        var grad = function (dy) {\n            return {\n                x: function () { return PoolOps.avgPoolBackprop(dy, x4D, filterSize, strides, pad); }\n            };\n        };\n        var res = environment_1.ENV.engine.runKernel(function (backend) { return backend.avgPool(x4D, convInfo); }, { x: x4D }, grad);\n        if (reshapedTo4D) {\n            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);\n        }\n        return res;\n    };\n    PoolOps.avgPoolBackprop = function (dy, input, filterSize, strides, pad) {\n        util.assert(input.rank === dy.rank, \"Rank of input (\" + input.rank + \") does not match rank of dy (\" + dy.rank + \")\");\n        var input4D = input;\n        var dy4D = dy;\n        var reshapedTo4D = false;\n        if (input.rank === 3) {\n            reshapedTo4D = true;\n            input4D = input.as4D(1, input.shape[0], input.shape[1], input.shape[2]);\n            dy4D = dy.as4D(1, dy.shape[0], dy.shape[1], dy.shape[2]);\n        }\n        util.assert(dy4D.rank === 4, \"Error in avgPoolBackprop: dy must be rank 4 but got rank \" +\n            (dy4D.rank + \".\"));\n        util.assert(input4D.rank === 4, \"Error in avgPoolBackprop: input must be rank 4 but got rank \" +\n            (input4D.rank + \".\"));\n        var convInfo = conv_util.computePool2DInfo(input4D.shape, filterSize, strides, pad);\n        var res = environment_1.ENV.engine.runKernel(function (backend) { return backend.avgPoolBackprop(dy4D, input4D, convInfo); }, { dy4D: dy4D, input4D: input4D });\n        if (reshapedTo4D) {\n            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);\n        }\n        return res;\n    };\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Convolution' }),\n        operation_1.operation\n    ], PoolOps, \"maxPool\", null);\n    __decorate([\n        operation_1.operation\n    ], PoolOps, \"maxPoolBackprop\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Convolution' }),\n        operation_1.operation\n    ], PoolOps, \"minPool\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Convolution' }),\n        operation_1.operation\n    ], PoolOps, \"avgPool\", null);\n    __decorate([\n        operation_1.operation\n    ], PoolOps, \"avgPoolBackprop\", null);\n    return PoolOps;\n}());\nexports.PoolOps = PoolOps;\n","map":{"mappings":[{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}}],"sources":{"node_modules/@tensorflow/tfjs-core/dist/ops/pool.js":"\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = require(\"../doc\");\nvar environment_1 = require(\"../environment\");\nvar util = require(\"../util\");\nvar conv_util = require(\"./conv_util\");\nvar operation_1 = require(\"./operation\");\nvar PoolOps = (function () {\n    function PoolOps() {\n    }\n    PoolOps.maxPool = function (x, filterSize, strides, pad, dimRoundingMode) {\n        var x4D = x;\n        var reshapedTo4D = false;\n        if (x.rank === 3) {\n            reshapedTo4D = true;\n            x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);\n        }\n        util.assert(x4D.rank === 4, \"Error in maxPool: input must be rank 4 but got rank \" + x4D.rank + \".\");\n        if (dimRoundingMode != null) {\n            util.assert(util.isInt(pad), \"Error in maxPool: pad must be an integer when using, \" +\n                (\"dimRoundingMode \" + dimRoundingMode + \" but got pad \" + pad + \".\"));\n        }\n        var convInfo = conv_util.computePool2DInfo(x4D.shape, filterSize, strides, pad, dimRoundingMode);\n        var grad = function (dy) {\n            return {\n                x: function () { return PoolOps.maxPoolBackprop(dy, x4D, filterSize, strides, pad); }\n            };\n        };\n        var res = environment_1.ENV.engine.runKernel(function (backend) { return backend.maxPool(x4D, convInfo); }, { x: x4D }, grad);\n        if (reshapedTo4D) {\n            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);\n        }\n        return res;\n    };\n    PoolOps.maxPoolBackprop = function (dy, input, filterSize, strides, pad, dimRoundingMode) {\n        util.assert(input.rank === dy.rank, \"Rank of input (\" + input.rank + \") does not match rank of dy (\" + dy.rank + \")\");\n        var input4D = input;\n        var dy4D = dy;\n        var reshapedTo4D = false;\n        if (input.rank === 3) {\n            reshapedTo4D = true;\n            input4D = input.as4D(1, input.shape[0], input.shape[1], input.shape[2]);\n            dy4D = dy.as4D(1, dy.shape[0], dy.shape[1], dy.shape[2]);\n        }\n        util.assert(dy4D.rank === 4, \"Error in maxPoolBackprop: dy must be rank 4 but got rank \" +\n            (dy4D.rank + \".\"));\n        util.assert(input4D.rank === 4, \"Error in maxPoolBackprop: input must be rank 4 but got rank \" +\n            (input4D.rank + \".\"));\n        if (dimRoundingMode != null) {\n            util.assert(util.isInt(pad), \"Error in maxPoolBackprop: pad must be an integer when using, \" +\n                (\"dimRoundingMode \" + dimRoundingMode + \" but got pad \" + pad + \".\"));\n        }\n        var convInfo = conv_util.computePool2DInfo(input4D.shape, filterSize, strides, pad, dimRoundingMode);\n        var res = environment_1.ENV.engine.runKernel(function (backend) { return backend.maxPoolBackprop(dy4D, input4D, convInfo); }, { dy4D: dy4D, input4D: input4D });\n        if (reshapedTo4D) {\n            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);\n        }\n        return res;\n    };\n    PoolOps.minPool = function (input, filterSize, strides, pad, dimRoundingMode) {\n        var input4D = input;\n        var reshapedTo4D = false;\n        if (input.rank === 3) {\n            reshapedTo4D = true;\n            input4D = input.as4D(1, input.shape[0], input.shape[1], input.shape[2]);\n        }\n        util.assert(input4D.rank === 4, \"Error in minPool: x must be rank 4 but got rank \" + input4D.rank + \".\");\n        if (dimRoundingMode != null) {\n            util.assert(util.isInt(pad), \"Error in minPool: pad must be an integer when using, \" +\n                (\"dimRoundingMode \" + dimRoundingMode + \" but got pad \" + pad + \".\"));\n        }\n        var convInfo = conv_util.computePool2DInfo(input4D.shape, filterSize, strides, pad, dimRoundingMode);\n        var res = environment_1.ENV.engine.runKernel(function (backend) { return backend.minPool(input4D, convInfo); }, { input4D: input4D });\n        if (reshapedTo4D) {\n            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);\n        }\n        return res;\n    };\n    PoolOps.avgPool = function (x, filterSize, strides, pad, dimRoundingMode) {\n        var x4D = x;\n        var reshapedTo4D = false;\n        if (x.rank === 3) {\n            reshapedTo4D = true;\n            x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);\n        }\n        util.assert(x4D.rank === 4, \"Error in avgPool: x must be rank 4 but got rank \" + x4D.rank + \".\");\n        if (dimRoundingMode != null) {\n            util.assert(util.isInt(pad), \"Error in avgPool: pad must be an integer when using, \" +\n                (\"dimRoundingMode \" + dimRoundingMode + \" but got pad \" + pad + \".\"));\n        }\n        var convInfo = conv_util.computePool2DInfo(x4D.shape, filterSize, strides, pad);\n        var grad = function (dy) {\n            return {\n                x: function () { return PoolOps.avgPoolBackprop(dy, x4D, filterSize, strides, pad); }\n            };\n        };\n        var res = environment_1.ENV.engine.runKernel(function (backend) { return backend.avgPool(x4D, convInfo); }, { x: x4D }, grad);\n        if (reshapedTo4D) {\n            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);\n        }\n        return res;\n    };\n    PoolOps.avgPoolBackprop = function (dy, input, filterSize, strides, pad) {\n        util.assert(input.rank === dy.rank, \"Rank of input (\" + input.rank + \") does not match rank of dy (\" + dy.rank + \")\");\n        var input4D = input;\n        var dy4D = dy;\n        var reshapedTo4D = false;\n        if (input.rank === 3) {\n            reshapedTo4D = true;\n            input4D = input.as4D(1, input.shape[0], input.shape[1], input.shape[2]);\n            dy4D = dy.as4D(1, dy.shape[0], dy.shape[1], dy.shape[2]);\n        }\n        util.assert(dy4D.rank === 4, \"Error in avgPoolBackprop: dy must be rank 4 but got rank \" +\n            (dy4D.rank + \".\"));\n        util.assert(input4D.rank === 4, \"Error in avgPoolBackprop: input must be rank 4 but got rank \" +\n            (input4D.rank + \".\"));\n        var convInfo = conv_util.computePool2DInfo(input4D.shape, filterSize, strides, pad);\n        var res = environment_1.ENV.engine.runKernel(function (backend) { return backend.avgPoolBackprop(dy4D, input4D, convInfo); }, { dy4D: dy4D, input4D: input4D });\n        if (reshapedTo4D) {\n            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);\n        }\n        return res;\n    };\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Convolution' }),\n        operation_1.operation\n    ], PoolOps, \"maxPool\", null);\n    __decorate([\n        operation_1.operation\n    ], PoolOps, \"maxPoolBackprop\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Convolution' }),\n        operation_1.operation\n    ], PoolOps, \"minPool\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Convolution' }),\n        operation_1.operation\n    ], PoolOps, \"avgPool\", null);\n    __decorate([\n        operation_1.operation\n    ], PoolOps, \"avgPoolBackprop\", null);\n    return PoolOps;\n}());\nexports.PoolOps = PoolOps;\n"},"lineCount":151}},"hash":"8d3982b3115a1a2e133d4d367d19d4f0","cacheData":{"env":{}}}