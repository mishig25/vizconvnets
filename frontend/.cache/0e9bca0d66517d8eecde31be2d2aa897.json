{"dependencies":[{"name":"/home/mishig/Desktop/viz/final/package.json","includedInParent":true,"mtime":1522648746056},{"name":"/home/mishig/Desktop/viz/final/node_modules/phaser/package.json","includedInParent":true,"mtime":1521632677000}],"generated":{"js":"/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2018 Photon Storm Ltd.\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\n */\n\nmodule.exports = {\r\n    decomp: polygonDecomp,\r\n    quickDecomp: polygonQuickDecomp,\r\n    isSimple: polygonIsSimple,\r\n    removeCollinearPoints: polygonRemoveCollinearPoints,\r\n    makeCCW: polygonMakeCCW\r\n};\r\n\r\n/**\r\n * Compute the intersection between two lines.\r\n * @static\r\n * @method lineInt\r\n * @param  {Array}  l1          Line vector 1\r\n * @param  {Array}  l2          Line vector 2\r\n * @param  {Number} precision   Precision to use when checking if the lines are parallel\r\n * @return {Array}              The intersection point.\r\n */\r\nfunction lineInt(l1,l2,precision){\r\n    precision = precision || 0;\r\n    var i = [0,0]; // point\r\n    var a1, b1, c1, a2, b2, c2, det; // scalars\r\n    a1 = l1[1][1] - l1[0][1];\r\n    b1 = l1[0][0] - l1[1][0];\r\n    c1 = a1 * l1[0][0] + b1 * l1[0][1];\r\n    a2 = l2[1][1] - l2[0][1];\r\n    b2 = l2[0][0] - l2[1][0];\r\n    c2 = a2 * l2[0][0] + b2 * l2[0][1];\r\n    det = a1 * b2 - a2*b1;\r\n    if (!scalar_eq(det, 0, precision)) { // lines are not parallel\r\n        i[0] = (b2 * c1 - b1 * c2) / det;\r\n        i[1] = (a1 * c2 - a2 * c1) / det;\r\n    }\r\n    return i;\r\n}\r\n\r\n/**\r\n * Checks if two line segments intersects.\r\n * @method segmentsIntersect\r\n * @param {Array} p1 The start vertex of the first line segment.\r\n * @param {Array} p2 The end vertex of the first line segment.\r\n * @param {Array} q1 The start vertex of the second line segment.\r\n * @param {Array} q2 The end vertex of the second line segment.\r\n * @return {Boolean} True if the two line segments intersect\r\n */\r\nfunction lineSegmentsIntersect(p1, p2, q1, q2){\r\n\tvar dx = p2[0] - p1[0];\r\n\tvar dy = p2[1] - p1[1];\r\n\tvar da = q2[0] - q1[0];\r\n\tvar db = q2[1] - q1[1];\r\n\r\n\t// segments are parallel\r\n\tif((da*dy - db*dx) === 0){\r\n\t\treturn false;\r\n\t}\r\n\r\n\tvar s = (dx * (q1[1] - p1[1]) + dy * (p1[0] - q1[0])) / (da * dy - db * dx);\r\n\tvar t = (da * (p1[1] - q1[1]) + db * (q1[0] - p1[0])) / (db * dx - da * dy);\r\n\r\n\treturn (s>=0 && s<=1 && t>=0 && t<=1);\r\n}\r\n\r\n/**\r\n * Get the area of a triangle spanned by the three given points. Note that the area will be negative if the points are not given in counter-clockwise order.\r\n * @static\r\n * @method area\r\n * @param  {Array} a\r\n * @param  {Array} b\r\n * @param  {Array} c\r\n * @return {Number}\r\n */\r\nfunction triangleArea(a,b,c){\r\n    return (((b[0] - a[0])*(c[1] - a[1]))-((c[0] - a[0])*(b[1] - a[1])));\r\n}\r\n\r\nfunction isLeft(a,b,c){\r\n    return triangleArea(a,b,c) > 0;\r\n}\r\n\r\nfunction isLeftOn(a,b,c) {\r\n    return triangleArea(a, b, c) >= 0;\r\n}\r\n\r\nfunction isRight(a,b,c) {\r\n    return triangleArea(a, b, c) < 0;\r\n}\r\n\r\nfunction isRightOn(a,b,c) {\r\n    return triangleArea(a, b, c) <= 0;\r\n}\r\n\r\nvar tmpPoint1 = [],\r\n    tmpPoint2 = [];\r\n\r\n/**\r\n * Check if three points are collinear\r\n * @method collinear\r\n * @param  {Array} a\r\n * @param  {Array} b\r\n * @param  {Array} c\r\n * @param  {Number} [thresholdAngle=0] Threshold angle to use when comparing the vectors. The function will return true if the angle between the resulting vectors is less than this value. Use zero for max precision.\r\n * @return {Boolean}\r\n */\r\nfunction collinear(a,b,c,thresholdAngle) {\r\n    if(!thresholdAngle){\r\n        return triangleArea(a, b, c) === 0;\r\n    } else {\r\n        var ab = tmpPoint1,\r\n            bc = tmpPoint2;\r\n\r\n        ab[0] = b[0]-a[0];\r\n        ab[1] = b[1]-a[1];\r\n        bc[0] = c[0]-b[0];\r\n        bc[1] = c[1]-b[1];\r\n\r\n        var dot = ab[0]*bc[0] + ab[1]*bc[1],\r\n            magA = Math.sqrt(ab[0]*ab[0] + ab[1]*ab[1]),\r\n            magB = Math.sqrt(bc[0]*bc[0] + bc[1]*bc[1]),\r\n            angle = Math.acos(dot/(magA*magB));\r\n        return angle < thresholdAngle;\r\n    }\r\n}\r\n\r\nfunction sqdist(a,b){\r\n    var dx = b[0] - a[0];\r\n    var dy = b[1] - a[1];\r\n    return dx * dx + dy * dy;\r\n}\r\n\r\n/**\r\n * Get a vertex at position i. It does not matter if i is out of bounds, this function will just cycle.\r\n * @method at\r\n * @param  {Number} i\r\n * @return {Array}\r\n */\r\nfunction polygonAt(polygon, i){\r\n    var s = polygon.length;\r\n    return polygon[i < 0 ? i % s + s : i % s];\r\n}\r\n\r\n/**\r\n * Clear the polygon data\r\n * @method clear\r\n * @return {Array}\r\n */\r\nfunction polygonClear(polygon){\r\n    polygon.length = 0;\r\n}\r\n\r\n/**\r\n * Append points \"from\" to \"to\"-1 from an other polygon \"poly\" onto this one.\r\n * @method append\r\n * @param {Polygon} poly The polygon to get points from.\r\n * @param {Number}  from The vertex index in \"poly\".\r\n * @param {Number}  to The end vertex index in \"poly\". Note that this vertex is NOT included when appending.\r\n * @return {Array}\r\n */\r\nfunction polygonAppend(polygon, poly, from, to){\r\n    for(var i=from; i<to; i++){\r\n        polygon.push(poly[i]);\r\n    }\r\n}\r\n\r\n/**\r\n * Make sure that the polygon vertices are ordered counter-clockwise.\r\n * @method makeCCW\r\n */\r\nfunction polygonMakeCCW(polygon){\r\n    var br = 0,\r\n        v = polygon;\r\n\r\n    // find bottom right point\r\n    for (var i = 1; i < polygon.length; ++i) {\r\n        if (v[i][1] < v[br][1] || (v[i][1] === v[br][1] && v[i][0] > v[br][0])) {\r\n            br = i;\r\n        }\r\n    }\r\n\r\n    // reverse poly if clockwise\r\n    if (!isLeft(polygonAt(polygon, br - 1), polygonAt(polygon, br), polygonAt(polygon, br + 1))) {\r\n        polygonReverse(polygon);\r\n    }\r\n}\r\n\r\n/**\r\n * Reverse the vertices in the polygon\r\n * @method reverse\r\n */\r\nfunction polygonReverse(polygon){\r\n    var tmp = [];\r\n    var N = polygon.length;\r\n    for(var i=0; i!==N; i++){\r\n        tmp.push(polygon.pop());\r\n    }\r\n    for(var i=0; i!==N; i++){\r\n\t\tpolygon[i] = tmp[i];\r\n    }\r\n}\r\n\r\n/**\r\n * Check if a point in the polygon is a reflex point\r\n * @method isReflex\r\n * @param  {Number}  i\r\n * @return {Boolean}\r\n */\r\nfunction polygonIsReflex(polygon, i){\r\n    return isRight(polygonAt(polygon, i - 1), polygonAt(polygon, i), polygonAt(polygon, i + 1));\r\n}\r\n\r\nvar tmpLine1=[],\r\n    tmpLine2=[];\r\n\r\n/**\r\n * Check if two vertices in the polygon can see each other\r\n * @method canSee\r\n * @param  {Number} a Vertex index 1\r\n * @param  {Number} b Vertex index 2\r\n * @return {Boolean}\r\n */\r\nfunction polygonCanSee(polygon, a,b) {\r\n    var p, dist, l1=tmpLine1, l2=tmpLine2;\r\n\r\n    if (isLeftOn(polygonAt(polygon, a + 1), polygonAt(polygon, a), polygonAt(polygon, b)) && isRightOn(polygonAt(polygon, a - 1), polygonAt(polygon, a), polygonAt(polygon, b))) {\r\n        return false;\r\n    }\r\n    dist = sqdist(polygonAt(polygon, a), polygonAt(polygon, b));\r\n    for (var i = 0; i !== polygon.length; ++i) { // for each edge\r\n        if ((i + 1) % polygon.length === a || i === a){ // ignore incident edges\r\n            continue;\r\n        }\r\n        if (isLeftOn(polygonAt(polygon, a), polygonAt(polygon, b), polygonAt(polygon, i + 1)) && isRightOn(polygonAt(polygon, a), polygonAt(polygon, b), polygonAt(polygon, i))) { // if diag intersects an edge\r\n            l1[0] = polygonAt(polygon, a);\r\n            l1[1] = polygonAt(polygon, b);\r\n            l2[0] = polygonAt(polygon, i);\r\n            l2[1] = polygonAt(polygon, i + 1);\r\n            p = lineInt(l1,l2);\r\n            if (sqdist(polygonAt(polygon, a), p) < dist) { // if edge is blocking visibility to b\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/**\r\n * Copy the polygon from vertex i to vertex j.\r\n * @method copy\r\n * @param  {Number} i\r\n * @param  {Number} j\r\n * @param  {Polygon} [targetPoly]   Optional target polygon to save in.\r\n * @return {Polygon}                The resulting copy.\r\n */\r\nfunction polygonCopy(polygon, i,j,targetPoly){\r\n    var p = targetPoly || [];\r\n    polygonClear(p);\r\n    if (i < j) {\r\n        // Insert all vertices from i to j\r\n        for(var k=i; k<=j; k++){\r\n            p.push(polygon[k]);\r\n        }\r\n\r\n    } else {\r\n\r\n        // Insert vertices 0 to j\r\n        for(var k=0; k<=j; k++){\r\n            p.push(polygon[k]);\r\n        }\r\n\r\n        // Insert vertices i to end\r\n        for(var k=i; k<polygon.length; k++){\r\n            p.push(polygon[k]);\r\n        }\r\n    }\r\n\r\n    return p;\r\n}\r\n\r\n/**\r\n * Decomposes the polygon into convex pieces. Returns a list of edges [[p1,p2],[p2,p3],...] that cuts the polygon.\r\n * Note that this algorithm has complexity O(N^4) and will be very slow for polygons with many vertices.\r\n * @method getCutEdges\r\n * @return {Array}\r\n */\r\nfunction polygonGetCutEdges(polygon) {\r\n    var min=[], tmp1=[], tmp2=[], tmpPoly = [];\r\n    var nDiags = Number.MAX_VALUE;\r\n\r\n    for (var i = 0; i < polygon.length; ++i) {\r\n        if (polygonIsReflex(polygon, i)) {\r\n            for (var j = 0; j < polygon.length; ++j) {\r\n                if (polygonCanSee(polygon, i, j)) {\r\n                    tmp1 = polygonGetCutEdges(polygonCopy(polygon, i, j, tmpPoly));\r\n                    tmp2 = polygonGetCutEdges(polygonCopy(polygon, j, i, tmpPoly));\r\n\r\n                    for(var k=0; k<tmp2.length; k++){\r\n                        tmp1.push(tmp2[k]);\r\n                    }\r\n\r\n                    if (tmp1.length < nDiags) {\r\n                        min = tmp1;\r\n                        nDiags = tmp1.length;\r\n                        min.push([polygonAt(polygon, i), polygonAt(polygon, j)]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return min;\r\n}\r\n\r\n/**\r\n * Decomposes the polygon into one or more convex sub-Polygons.\r\n * @method decomp\r\n * @return {Array} An array or Polygon objects.\r\n */\r\nfunction polygonDecomp(polygon){\r\n    var edges = polygonGetCutEdges(polygon);\r\n    if(edges.length > 0){\r\n        return polygonSlice(polygon, edges);\r\n    } else {\r\n        return [polygon];\r\n    }\r\n}\r\n\r\n/**\r\n * Slices the polygon given one or more cut edges. If given one, this function will return two polygons (false on failure). If many, an array of polygons.\r\n * @method slice\r\n * @param {Array} cutEdges A list of edges, as returned by .getCutEdges()\r\n * @return {Array}\r\n */\r\nfunction polygonSlice(polygon, cutEdges){\r\n    if(cutEdges.length === 0){\r\n\t\treturn [polygon];\r\n    }\r\n    if(cutEdges instanceof Array && cutEdges.length && cutEdges[0] instanceof Array && cutEdges[0].length===2 && cutEdges[0][0] instanceof Array){\r\n\r\n        var polys = [polygon];\r\n\r\n        for(var i=0; i<cutEdges.length; i++){\r\n            var cutEdge = cutEdges[i];\r\n            // Cut all polys\r\n            for(var j=0; j<polys.length; j++){\r\n                var poly = polys[j];\r\n                var result = polygonSlice(poly, cutEdge);\r\n                if(result){\r\n                    // Found poly! Cut and quit\r\n                    polys.splice(j,1);\r\n                    polys.push(result[0],result[1]);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return polys;\r\n    } else {\r\n\r\n        // Was given one edge\r\n        var cutEdge = cutEdges;\r\n        var i = polygon.indexOf(cutEdge[0]);\r\n        var j = polygon.indexOf(cutEdge[1]);\r\n\r\n        if(i !== -1 && j !== -1){\r\n            return [polygonCopy(polygon, i,j),\r\n                    polygonCopy(polygon, j,i)];\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Checks that the line segments of this polygon do not intersect each other.\r\n * @method isSimple\r\n * @param  {Array} path An array of vertices e.g. [[0,0],[0,1],...]\r\n * @return {Boolean}\r\n * @todo Should it check all segments with all others?\r\n */\r\nfunction polygonIsSimple(polygon){\r\n    var path = polygon, i;\r\n    // Check\r\n    for(i=0; i<path.length-1; i++){\r\n        for(var j=0; j<i-1; j++){\r\n            if(lineSegmentsIntersect(path[i], path[i+1], path[j], path[j+1] )){\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Check the segment between the last and the first point to all others\r\n    for(i=1; i<path.length-2; i++){\r\n        if(lineSegmentsIntersect(path[0], path[path.length-1], path[i], path[i+1] )){\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction getIntersectionPoint(p1, p2, q1, q2, delta){\r\n\tdelta = delta || 0;\r\n\tvar a1 = p2[1] - p1[1];\r\n\tvar b1 = p1[0] - p2[0];\r\n\tvar c1 = (a1 * p1[0]) + (b1 * p1[1]);\r\n\tvar a2 = q2[1] - q1[1];\r\n\tvar b2 = q1[0] - q2[0];\r\n\tvar c2 = (a2 * q1[0]) + (b2 * q1[1]);\r\n\tvar det = (a1 * b2) - (a2 * b1);\r\n\r\n\tif(!scalar_eq(det,0,delta)){\r\n\t\treturn [((b2 * c1) - (b1 * c2)) / det, ((a1 * c2) - (a2 * c1)) / det];\r\n\t} else {\r\n\t\treturn [0,0];\r\n    }\r\n}\r\n\r\n/**\r\n * Quickly decompose the Polygon into convex sub-polygons.\r\n * @method quickDecomp\r\n * @param  {Array} result\r\n * @param  {Array} [reflexVertices]\r\n * @param  {Array} [steinerPoints]\r\n * @param  {Number} [delta]\r\n * @param  {Number} [maxlevel]\r\n * @param  {Number} [level]\r\n * @return {Array}\r\n */\r\nfunction polygonQuickDecomp(polygon, result,reflexVertices,steinerPoints,delta,maxlevel,level){\r\n    maxlevel = maxlevel || 100;\r\n    level = level || 0;\r\n    delta = delta || 25;\r\n    result = typeof(result)!==\"undefined\" ? result : [];\r\n    reflexVertices = reflexVertices || [];\r\n    steinerPoints = steinerPoints || [];\r\n\r\n    var upperInt=[0,0], lowerInt=[0,0], p=[0,0]; // Points\r\n    var upperDist=0, lowerDist=0, d=0, closestDist=0; // scalars\r\n    var upperIndex=0, lowerIndex=0, closestIndex=0; // Integers\r\n    var lowerPoly=[], upperPoly=[]; // polygons\r\n    var poly = polygon,\r\n        v = polygon;\r\n\r\n    if(v.length < 3){\r\n\t\treturn result;\r\n    }\r\n\r\n    level++;\r\n    if(level > maxlevel){\r\n        console.warn(\"quickDecomp: max level (\"+maxlevel+\") reached.\");\r\n        return result;\r\n    }\r\n\r\n    for (var i = 0; i < polygon.length; ++i) {\r\n        if (polygonIsReflex(poly, i)) {\r\n            reflexVertices.push(poly[i]);\r\n            upperDist = lowerDist = Number.MAX_VALUE;\r\n\r\n\r\n            for (var j = 0; j < polygon.length; ++j) {\r\n                if (isLeft(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j)) && isRightOn(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j - 1))) { // if line intersects with an edge\r\n                    p = getIntersectionPoint(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j), polygonAt(poly, j - 1)); // find the point of intersection\r\n                    if (isRight(polygonAt(poly, i + 1), polygonAt(poly, i), p)) { // make sure it's inside the poly\r\n                        d = sqdist(poly[i], p);\r\n                        if (d < lowerDist) { // keep only the closest intersection\r\n                            lowerDist = d;\r\n                            lowerInt = p;\r\n                            lowerIndex = j;\r\n                        }\r\n                    }\r\n                }\r\n                if (isLeft(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j + 1)) && isRightOn(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j))) {\r\n                    p = getIntersectionPoint(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j), polygonAt(poly, j + 1));\r\n                    if (isLeft(polygonAt(poly, i - 1), polygonAt(poly, i), p)) {\r\n                        d = sqdist(poly[i], p);\r\n                        if (d < upperDist) {\r\n                            upperDist = d;\r\n                            upperInt = p;\r\n                            upperIndex = j;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // if there are no vertices to connect to, choose a point in the middle\r\n            if (lowerIndex === (upperIndex + 1) % polygon.length) {\r\n                //console.log(\"Case 1: Vertex(\"+i+\"), lowerIndex(\"+lowerIndex+\"), upperIndex(\"+upperIndex+\"), poly.size(\"+polygon.length+\")\");\r\n                p[0] = (lowerInt[0] + upperInt[0]) / 2;\r\n                p[1] = (lowerInt[1] + upperInt[1]) / 2;\r\n                steinerPoints.push(p);\r\n\r\n                if (i < upperIndex) {\r\n                    //lowerPoly.insert(lowerPoly.end(), poly.begin() + i, poly.begin() + upperIndex + 1);\r\n                    polygonAppend(lowerPoly, poly, i, upperIndex+1);\r\n                    lowerPoly.push(p);\r\n                    upperPoly.push(p);\r\n                    if (lowerIndex !== 0){\r\n                        //upperPoly.insert(upperPoly.end(), poly.begin() + lowerIndex, poly.end());\r\n                        polygonAppend(upperPoly, poly,lowerIndex,poly.length);\r\n                    }\r\n                    //upperPoly.insert(upperPoly.end(), poly.begin(), poly.begin() + i + 1);\r\n                    polygonAppend(upperPoly, poly,0,i+1);\r\n                } else {\r\n                    if (i !== 0){\r\n                        //lowerPoly.insert(lowerPoly.end(), poly.begin() + i, poly.end());\r\n                        polygonAppend(lowerPoly, poly,i,poly.length);\r\n                    }\r\n                    //lowerPoly.insert(lowerPoly.end(), poly.begin(), poly.begin() + upperIndex + 1);\r\n                    polygonAppend(lowerPoly, poly,0,upperIndex+1);\r\n                    lowerPoly.push(p);\r\n                    upperPoly.push(p);\r\n                    //upperPoly.insert(upperPoly.end(), poly.begin() + lowerIndex, poly.begin() + i + 1);\r\n                    polygonAppend(upperPoly, poly,lowerIndex,i+1);\r\n                }\r\n            } else {\r\n                // connect to the closest point within the triangle\r\n                //console.log(\"Case 2: Vertex(\"+i+\"), closestIndex(\"+closestIndex+\"), poly.size(\"+polygon.length+\")\\n\");\r\n\r\n                if (lowerIndex > upperIndex) {\r\n                    upperIndex += polygon.length;\r\n                }\r\n                closestDist = Number.MAX_VALUE;\r\n\r\n                if(upperIndex < lowerIndex){\r\n                    return result;\r\n                }\r\n\r\n                for (var j = lowerIndex; j <= upperIndex; ++j) {\r\n                    if (isLeftOn(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j)) && isRightOn(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j))) {\r\n                        d = sqdist(polygonAt(poly, i), polygonAt(poly, j));\r\n                        if (d < closestDist) {\r\n                            closestDist = d;\r\n                            closestIndex = j % polygon.length;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (i < closestIndex) {\r\n                    polygonAppend(lowerPoly, poly,i,closestIndex+1);\r\n                    if (closestIndex !== 0){\r\n                        polygonAppend(upperPoly, poly,closestIndex,v.length);\r\n                    }\r\n                    polygonAppend(upperPoly, poly,0,i+1);\r\n                } else {\r\n                    if (i !== 0){\r\n                        polygonAppend(lowerPoly, poly,i,v.length);\r\n                    }\r\n                    polygonAppend(lowerPoly, poly,0,closestIndex+1);\r\n                    polygonAppend(upperPoly, poly,closestIndex,i+1);\r\n                }\r\n            }\r\n\r\n            // solve smallest poly first\r\n            if (lowerPoly.length < upperPoly.length) {\r\n                polygonQuickDecomp(lowerPoly,result,reflexVertices,steinerPoints,delta,maxlevel,level);\r\n                polygonQuickDecomp(upperPoly,result,reflexVertices,steinerPoints,delta,maxlevel,level);\r\n            } else {\r\n                polygonQuickDecomp(upperPoly,result,reflexVertices,steinerPoints,delta,maxlevel,level);\r\n                polygonQuickDecomp(lowerPoly,result,reflexVertices,steinerPoints,delta,maxlevel,level);\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n    result.push(polygon);\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Remove collinear points in the polygon.\r\n * @method removeCollinearPoints\r\n * @param  {Number} [precision] The threshold angle to use when determining whether two edges are collinear. Use zero for finest precision.\r\n * @return {Number}           The number of points removed\r\n */\r\nfunction polygonRemoveCollinearPoints(polygon, precision){\r\n    var num = 0;\r\n    for(var i=polygon.length-1; polygon.length>3 && i>=0; --i){\r\n        if(collinear(polygonAt(polygon, i-1),polygonAt(polygon, i),polygonAt(polygon, i+1),precision)){\r\n            // Remove the middle point\r\n            polygon.splice(i%polygon.length,1);\r\n            num++;\r\n        }\r\n    }\r\n    return num;\r\n}\r\n\r\n/**\r\n * Check if two scalars are equal\r\n * @static\r\n * @method eq\r\n * @param  {Number} a\r\n * @param  {Number} b\r\n * @param  {Number} [precision]\r\n * @return {Boolean}\r\n */\r\nfunction scalar_eq(a,b,precision){\r\n    precision = precision || 0;\r\n    return Math.abs(a-b) < precision;\r\n}\r\n","map":{"mappings":[{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}}],"sources":{"node_modules/phaser/src/physics/matter-js/poly-decomp/index.js":"/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2018 Photon Storm Ltd.\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\n */\n\nmodule.exports = {\r\n    decomp: polygonDecomp,\r\n    quickDecomp: polygonQuickDecomp,\r\n    isSimple: polygonIsSimple,\r\n    removeCollinearPoints: polygonRemoveCollinearPoints,\r\n    makeCCW: polygonMakeCCW\r\n};\r\n\r\n/**\r\n * Compute the intersection between two lines.\r\n * @static\r\n * @method lineInt\r\n * @param  {Array}  l1          Line vector 1\r\n * @param  {Array}  l2          Line vector 2\r\n * @param  {Number} precision   Precision to use when checking if the lines are parallel\r\n * @return {Array}              The intersection point.\r\n */\r\nfunction lineInt(l1,l2,precision){\r\n    precision = precision || 0;\r\n    var i = [0,0]; // point\r\n    var a1, b1, c1, a2, b2, c2, det; // scalars\r\n    a1 = l1[1][1] - l1[0][1];\r\n    b1 = l1[0][0] - l1[1][0];\r\n    c1 = a1 * l1[0][0] + b1 * l1[0][1];\r\n    a2 = l2[1][1] - l2[0][1];\r\n    b2 = l2[0][0] - l2[1][0];\r\n    c2 = a2 * l2[0][0] + b2 * l2[0][1];\r\n    det = a1 * b2 - a2*b1;\r\n    if (!scalar_eq(det, 0, precision)) { // lines are not parallel\r\n        i[0] = (b2 * c1 - b1 * c2) / det;\r\n        i[1] = (a1 * c2 - a2 * c1) / det;\r\n    }\r\n    return i;\r\n}\r\n\r\n/**\r\n * Checks if two line segments intersects.\r\n * @method segmentsIntersect\r\n * @param {Array} p1 The start vertex of the first line segment.\r\n * @param {Array} p2 The end vertex of the first line segment.\r\n * @param {Array} q1 The start vertex of the second line segment.\r\n * @param {Array} q2 The end vertex of the second line segment.\r\n * @return {Boolean} True if the two line segments intersect\r\n */\r\nfunction lineSegmentsIntersect(p1, p2, q1, q2){\r\n\tvar dx = p2[0] - p1[0];\r\n\tvar dy = p2[1] - p1[1];\r\n\tvar da = q2[0] - q1[0];\r\n\tvar db = q2[1] - q1[1];\r\n\r\n\t// segments are parallel\r\n\tif((da*dy - db*dx) === 0){\r\n\t\treturn false;\r\n\t}\r\n\r\n\tvar s = (dx * (q1[1] - p1[1]) + dy * (p1[0] - q1[0])) / (da * dy - db * dx);\r\n\tvar t = (da * (p1[1] - q1[1]) + db * (q1[0] - p1[0])) / (db * dx - da * dy);\r\n\r\n\treturn (s>=0 && s<=1 && t>=0 && t<=1);\r\n}\r\n\r\n/**\r\n * Get the area of a triangle spanned by the three given points. Note that the area will be negative if the points are not given in counter-clockwise order.\r\n * @static\r\n * @method area\r\n * @param  {Array} a\r\n * @param  {Array} b\r\n * @param  {Array} c\r\n * @return {Number}\r\n */\r\nfunction triangleArea(a,b,c){\r\n    return (((b[0] - a[0])*(c[1] - a[1]))-((c[0] - a[0])*(b[1] - a[1])));\r\n}\r\n\r\nfunction isLeft(a,b,c){\r\n    return triangleArea(a,b,c) > 0;\r\n}\r\n\r\nfunction isLeftOn(a,b,c) {\r\n    return triangleArea(a, b, c) >= 0;\r\n}\r\n\r\nfunction isRight(a,b,c) {\r\n    return triangleArea(a, b, c) < 0;\r\n}\r\n\r\nfunction isRightOn(a,b,c) {\r\n    return triangleArea(a, b, c) <= 0;\r\n}\r\n\r\nvar tmpPoint1 = [],\r\n    tmpPoint2 = [];\r\n\r\n/**\r\n * Check if three points are collinear\r\n * @method collinear\r\n * @param  {Array} a\r\n * @param  {Array} b\r\n * @param  {Array} c\r\n * @param  {Number} [thresholdAngle=0] Threshold angle to use when comparing the vectors. The function will return true if the angle between the resulting vectors is less than this value. Use zero for max precision.\r\n * @return {Boolean}\r\n */\r\nfunction collinear(a,b,c,thresholdAngle) {\r\n    if(!thresholdAngle){\r\n        return triangleArea(a, b, c) === 0;\r\n    } else {\r\n        var ab = tmpPoint1,\r\n            bc = tmpPoint2;\r\n\r\n        ab[0] = b[0]-a[0];\r\n        ab[1] = b[1]-a[1];\r\n        bc[0] = c[0]-b[0];\r\n        bc[1] = c[1]-b[1];\r\n\r\n        var dot = ab[0]*bc[0] + ab[1]*bc[1],\r\n            magA = Math.sqrt(ab[0]*ab[0] + ab[1]*ab[1]),\r\n            magB = Math.sqrt(bc[0]*bc[0] + bc[1]*bc[1]),\r\n            angle = Math.acos(dot/(magA*magB));\r\n        return angle < thresholdAngle;\r\n    }\r\n}\r\n\r\nfunction sqdist(a,b){\r\n    var dx = b[0] - a[0];\r\n    var dy = b[1] - a[1];\r\n    return dx * dx + dy * dy;\r\n}\r\n\r\n/**\r\n * Get a vertex at position i. It does not matter if i is out of bounds, this function will just cycle.\r\n * @method at\r\n * @param  {Number} i\r\n * @return {Array}\r\n */\r\nfunction polygonAt(polygon, i){\r\n    var s = polygon.length;\r\n    return polygon[i < 0 ? i % s + s : i % s];\r\n}\r\n\r\n/**\r\n * Clear the polygon data\r\n * @method clear\r\n * @return {Array}\r\n */\r\nfunction polygonClear(polygon){\r\n    polygon.length = 0;\r\n}\r\n\r\n/**\r\n * Append points \"from\" to \"to\"-1 from an other polygon \"poly\" onto this one.\r\n * @method append\r\n * @param {Polygon} poly The polygon to get points from.\r\n * @param {Number}  from The vertex index in \"poly\".\r\n * @param {Number}  to The end vertex index in \"poly\". Note that this vertex is NOT included when appending.\r\n * @return {Array}\r\n */\r\nfunction polygonAppend(polygon, poly, from, to){\r\n    for(var i=from; i<to; i++){\r\n        polygon.push(poly[i]);\r\n    }\r\n}\r\n\r\n/**\r\n * Make sure that the polygon vertices are ordered counter-clockwise.\r\n * @method makeCCW\r\n */\r\nfunction polygonMakeCCW(polygon){\r\n    var br = 0,\r\n        v = polygon;\r\n\r\n    // find bottom right point\r\n    for (var i = 1; i < polygon.length; ++i) {\r\n        if (v[i][1] < v[br][1] || (v[i][1] === v[br][1] && v[i][0] > v[br][0])) {\r\n            br = i;\r\n        }\r\n    }\r\n\r\n    // reverse poly if clockwise\r\n    if (!isLeft(polygonAt(polygon, br - 1), polygonAt(polygon, br), polygonAt(polygon, br + 1))) {\r\n        polygonReverse(polygon);\r\n    }\r\n}\r\n\r\n/**\r\n * Reverse the vertices in the polygon\r\n * @method reverse\r\n */\r\nfunction polygonReverse(polygon){\r\n    var tmp = [];\r\n    var N = polygon.length;\r\n    for(var i=0; i!==N; i++){\r\n        tmp.push(polygon.pop());\r\n    }\r\n    for(var i=0; i!==N; i++){\r\n\t\tpolygon[i] = tmp[i];\r\n    }\r\n}\r\n\r\n/**\r\n * Check if a point in the polygon is a reflex point\r\n * @method isReflex\r\n * @param  {Number}  i\r\n * @return {Boolean}\r\n */\r\nfunction polygonIsReflex(polygon, i){\r\n    return isRight(polygonAt(polygon, i - 1), polygonAt(polygon, i), polygonAt(polygon, i + 1));\r\n}\r\n\r\nvar tmpLine1=[],\r\n    tmpLine2=[];\r\n\r\n/**\r\n * Check if two vertices in the polygon can see each other\r\n * @method canSee\r\n * @param  {Number} a Vertex index 1\r\n * @param  {Number} b Vertex index 2\r\n * @return {Boolean}\r\n */\r\nfunction polygonCanSee(polygon, a,b) {\r\n    var p, dist, l1=tmpLine1, l2=tmpLine2;\r\n\r\n    if (isLeftOn(polygonAt(polygon, a + 1), polygonAt(polygon, a), polygonAt(polygon, b)) && isRightOn(polygonAt(polygon, a - 1), polygonAt(polygon, a), polygonAt(polygon, b))) {\r\n        return false;\r\n    }\r\n    dist = sqdist(polygonAt(polygon, a), polygonAt(polygon, b));\r\n    for (var i = 0; i !== polygon.length; ++i) { // for each edge\r\n        if ((i + 1) % polygon.length === a || i === a){ // ignore incident edges\r\n            continue;\r\n        }\r\n        if (isLeftOn(polygonAt(polygon, a), polygonAt(polygon, b), polygonAt(polygon, i + 1)) && isRightOn(polygonAt(polygon, a), polygonAt(polygon, b), polygonAt(polygon, i))) { // if diag intersects an edge\r\n            l1[0] = polygonAt(polygon, a);\r\n            l1[1] = polygonAt(polygon, b);\r\n            l2[0] = polygonAt(polygon, i);\r\n            l2[1] = polygonAt(polygon, i + 1);\r\n            p = lineInt(l1,l2);\r\n            if (sqdist(polygonAt(polygon, a), p) < dist) { // if edge is blocking visibility to b\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/**\r\n * Copy the polygon from vertex i to vertex j.\r\n * @method copy\r\n * @param  {Number} i\r\n * @param  {Number} j\r\n * @param  {Polygon} [targetPoly]   Optional target polygon to save in.\r\n * @return {Polygon}                The resulting copy.\r\n */\r\nfunction polygonCopy(polygon, i,j,targetPoly){\r\n    var p = targetPoly || [];\r\n    polygonClear(p);\r\n    if (i < j) {\r\n        // Insert all vertices from i to j\r\n        for(var k=i; k<=j; k++){\r\n            p.push(polygon[k]);\r\n        }\r\n\r\n    } else {\r\n\r\n        // Insert vertices 0 to j\r\n        for(var k=0; k<=j; k++){\r\n            p.push(polygon[k]);\r\n        }\r\n\r\n        // Insert vertices i to end\r\n        for(var k=i; k<polygon.length; k++){\r\n            p.push(polygon[k]);\r\n        }\r\n    }\r\n\r\n    return p;\r\n}\r\n\r\n/**\r\n * Decomposes the polygon into convex pieces. Returns a list of edges [[p1,p2],[p2,p3],...] that cuts the polygon.\r\n * Note that this algorithm has complexity O(N^4) and will be very slow for polygons with many vertices.\r\n * @method getCutEdges\r\n * @return {Array}\r\n */\r\nfunction polygonGetCutEdges(polygon) {\r\n    var min=[], tmp1=[], tmp2=[], tmpPoly = [];\r\n    var nDiags = Number.MAX_VALUE;\r\n\r\n    for (var i = 0; i < polygon.length; ++i) {\r\n        if (polygonIsReflex(polygon, i)) {\r\n            for (var j = 0; j < polygon.length; ++j) {\r\n                if (polygonCanSee(polygon, i, j)) {\r\n                    tmp1 = polygonGetCutEdges(polygonCopy(polygon, i, j, tmpPoly));\r\n                    tmp2 = polygonGetCutEdges(polygonCopy(polygon, j, i, tmpPoly));\r\n\r\n                    for(var k=0; k<tmp2.length; k++){\r\n                        tmp1.push(tmp2[k]);\r\n                    }\r\n\r\n                    if (tmp1.length < nDiags) {\r\n                        min = tmp1;\r\n                        nDiags = tmp1.length;\r\n                        min.push([polygonAt(polygon, i), polygonAt(polygon, j)]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return min;\r\n}\r\n\r\n/**\r\n * Decomposes the polygon into one or more convex sub-Polygons.\r\n * @method decomp\r\n * @return {Array} An array or Polygon objects.\r\n */\r\nfunction polygonDecomp(polygon){\r\n    var edges = polygonGetCutEdges(polygon);\r\n    if(edges.length > 0){\r\n        return polygonSlice(polygon, edges);\r\n    } else {\r\n        return [polygon];\r\n    }\r\n}\r\n\r\n/**\r\n * Slices the polygon given one or more cut edges. If given one, this function will return two polygons (false on failure). If many, an array of polygons.\r\n * @method slice\r\n * @param {Array} cutEdges A list of edges, as returned by .getCutEdges()\r\n * @return {Array}\r\n */\r\nfunction polygonSlice(polygon, cutEdges){\r\n    if(cutEdges.length === 0){\r\n\t\treturn [polygon];\r\n    }\r\n    if(cutEdges instanceof Array && cutEdges.length && cutEdges[0] instanceof Array && cutEdges[0].length===2 && cutEdges[0][0] instanceof Array){\r\n\r\n        var polys = [polygon];\r\n\r\n        for(var i=0; i<cutEdges.length; i++){\r\n            var cutEdge = cutEdges[i];\r\n            // Cut all polys\r\n            for(var j=0; j<polys.length; j++){\r\n                var poly = polys[j];\r\n                var result = polygonSlice(poly, cutEdge);\r\n                if(result){\r\n                    // Found poly! Cut and quit\r\n                    polys.splice(j,1);\r\n                    polys.push(result[0],result[1]);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return polys;\r\n    } else {\r\n\r\n        // Was given one edge\r\n        var cutEdge = cutEdges;\r\n        var i = polygon.indexOf(cutEdge[0]);\r\n        var j = polygon.indexOf(cutEdge[1]);\r\n\r\n        if(i !== -1 && j !== -1){\r\n            return [polygonCopy(polygon, i,j),\r\n                    polygonCopy(polygon, j,i)];\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Checks that the line segments of this polygon do not intersect each other.\r\n * @method isSimple\r\n * @param  {Array} path An array of vertices e.g. [[0,0],[0,1],...]\r\n * @return {Boolean}\r\n * @todo Should it check all segments with all others?\r\n */\r\nfunction polygonIsSimple(polygon){\r\n    var path = polygon, i;\r\n    // Check\r\n    for(i=0; i<path.length-1; i++){\r\n        for(var j=0; j<i-1; j++){\r\n            if(lineSegmentsIntersect(path[i], path[i+1], path[j], path[j+1] )){\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Check the segment between the last and the first point to all others\r\n    for(i=1; i<path.length-2; i++){\r\n        if(lineSegmentsIntersect(path[0], path[path.length-1], path[i], path[i+1] )){\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction getIntersectionPoint(p1, p2, q1, q2, delta){\r\n\tdelta = delta || 0;\r\n\tvar a1 = p2[1] - p1[1];\r\n\tvar b1 = p1[0] - p2[0];\r\n\tvar c1 = (a1 * p1[0]) + (b1 * p1[1]);\r\n\tvar a2 = q2[1] - q1[1];\r\n\tvar b2 = q1[0] - q2[0];\r\n\tvar c2 = (a2 * q1[0]) + (b2 * q1[1]);\r\n\tvar det = (a1 * b2) - (a2 * b1);\r\n\r\n\tif(!scalar_eq(det,0,delta)){\r\n\t\treturn [((b2 * c1) - (b1 * c2)) / det, ((a1 * c2) - (a2 * c1)) / det];\r\n\t} else {\r\n\t\treturn [0,0];\r\n    }\r\n}\r\n\r\n/**\r\n * Quickly decompose the Polygon into convex sub-polygons.\r\n * @method quickDecomp\r\n * @param  {Array} result\r\n * @param  {Array} [reflexVertices]\r\n * @param  {Array} [steinerPoints]\r\n * @param  {Number} [delta]\r\n * @param  {Number} [maxlevel]\r\n * @param  {Number} [level]\r\n * @return {Array}\r\n */\r\nfunction polygonQuickDecomp(polygon, result,reflexVertices,steinerPoints,delta,maxlevel,level){\r\n    maxlevel = maxlevel || 100;\r\n    level = level || 0;\r\n    delta = delta || 25;\r\n    result = typeof(result)!==\"undefined\" ? result : [];\r\n    reflexVertices = reflexVertices || [];\r\n    steinerPoints = steinerPoints || [];\r\n\r\n    var upperInt=[0,0], lowerInt=[0,0], p=[0,0]; // Points\r\n    var upperDist=0, lowerDist=0, d=0, closestDist=0; // scalars\r\n    var upperIndex=0, lowerIndex=0, closestIndex=0; // Integers\r\n    var lowerPoly=[], upperPoly=[]; // polygons\r\n    var poly = polygon,\r\n        v = polygon;\r\n\r\n    if(v.length < 3){\r\n\t\treturn result;\r\n    }\r\n\r\n    level++;\r\n    if(level > maxlevel){\r\n        console.warn(\"quickDecomp: max level (\"+maxlevel+\") reached.\");\r\n        return result;\r\n    }\r\n\r\n    for (var i = 0; i < polygon.length; ++i) {\r\n        if (polygonIsReflex(poly, i)) {\r\n            reflexVertices.push(poly[i]);\r\n            upperDist = lowerDist = Number.MAX_VALUE;\r\n\r\n\r\n            for (var j = 0; j < polygon.length; ++j) {\r\n                if (isLeft(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j)) && isRightOn(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j - 1))) { // if line intersects with an edge\r\n                    p = getIntersectionPoint(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j), polygonAt(poly, j - 1)); // find the point of intersection\r\n                    if (isRight(polygonAt(poly, i + 1), polygonAt(poly, i), p)) { // make sure it's inside the poly\r\n                        d = sqdist(poly[i], p);\r\n                        if (d < lowerDist) { // keep only the closest intersection\r\n                            lowerDist = d;\r\n                            lowerInt = p;\r\n                            lowerIndex = j;\r\n                        }\r\n                    }\r\n                }\r\n                if (isLeft(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j + 1)) && isRightOn(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j))) {\r\n                    p = getIntersectionPoint(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j), polygonAt(poly, j + 1));\r\n                    if (isLeft(polygonAt(poly, i - 1), polygonAt(poly, i), p)) {\r\n                        d = sqdist(poly[i], p);\r\n                        if (d < upperDist) {\r\n                            upperDist = d;\r\n                            upperInt = p;\r\n                            upperIndex = j;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // if there are no vertices to connect to, choose a point in the middle\r\n            if (lowerIndex === (upperIndex + 1) % polygon.length) {\r\n                //console.log(\"Case 1: Vertex(\"+i+\"), lowerIndex(\"+lowerIndex+\"), upperIndex(\"+upperIndex+\"), poly.size(\"+polygon.length+\")\");\r\n                p[0] = (lowerInt[0] + upperInt[0]) / 2;\r\n                p[1] = (lowerInt[1] + upperInt[1]) / 2;\r\n                steinerPoints.push(p);\r\n\r\n                if (i < upperIndex) {\r\n                    //lowerPoly.insert(lowerPoly.end(), poly.begin() + i, poly.begin() + upperIndex + 1);\r\n                    polygonAppend(lowerPoly, poly, i, upperIndex+1);\r\n                    lowerPoly.push(p);\r\n                    upperPoly.push(p);\r\n                    if (lowerIndex !== 0){\r\n                        //upperPoly.insert(upperPoly.end(), poly.begin() + lowerIndex, poly.end());\r\n                        polygonAppend(upperPoly, poly,lowerIndex,poly.length);\r\n                    }\r\n                    //upperPoly.insert(upperPoly.end(), poly.begin(), poly.begin() + i + 1);\r\n                    polygonAppend(upperPoly, poly,0,i+1);\r\n                } else {\r\n                    if (i !== 0){\r\n                        //lowerPoly.insert(lowerPoly.end(), poly.begin() + i, poly.end());\r\n                        polygonAppend(lowerPoly, poly,i,poly.length);\r\n                    }\r\n                    //lowerPoly.insert(lowerPoly.end(), poly.begin(), poly.begin() + upperIndex + 1);\r\n                    polygonAppend(lowerPoly, poly,0,upperIndex+1);\r\n                    lowerPoly.push(p);\r\n                    upperPoly.push(p);\r\n                    //upperPoly.insert(upperPoly.end(), poly.begin() + lowerIndex, poly.begin() + i + 1);\r\n                    polygonAppend(upperPoly, poly,lowerIndex,i+1);\r\n                }\r\n            } else {\r\n                // connect to the closest point within the triangle\r\n                //console.log(\"Case 2: Vertex(\"+i+\"), closestIndex(\"+closestIndex+\"), poly.size(\"+polygon.length+\")\\n\");\r\n\r\n                if (lowerIndex > upperIndex) {\r\n                    upperIndex += polygon.length;\r\n                }\r\n                closestDist = Number.MAX_VALUE;\r\n\r\n                if(upperIndex < lowerIndex){\r\n                    return result;\r\n                }\r\n\r\n                for (var j = lowerIndex; j <= upperIndex; ++j) {\r\n                    if (isLeftOn(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j)) && isRightOn(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j))) {\r\n                        d = sqdist(polygonAt(poly, i), polygonAt(poly, j));\r\n                        if (d < closestDist) {\r\n                            closestDist = d;\r\n                            closestIndex = j % polygon.length;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (i < closestIndex) {\r\n                    polygonAppend(lowerPoly, poly,i,closestIndex+1);\r\n                    if (closestIndex !== 0){\r\n                        polygonAppend(upperPoly, poly,closestIndex,v.length);\r\n                    }\r\n                    polygonAppend(upperPoly, poly,0,i+1);\r\n                } else {\r\n                    if (i !== 0){\r\n                        polygonAppend(lowerPoly, poly,i,v.length);\r\n                    }\r\n                    polygonAppend(lowerPoly, poly,0,closestIndex+1);\r\n                    polygonAppend(upperPoly, poly,closestIndex,i+1);\r\n                }\r\n            }\r\n\r\n            // solve smallest poly first\r\n            if (lowerPoly.length < upperPoly.length) {\r\n                polygonQuickDecomp(lowerPoly,result,reflexVertices,steinerPoints,delta,maxlevel,level);\r\n                polygonQuickDecomp(upperPoly,result,reflexVertices,steinerPoints,delta,maxlevel,level);\r\n            } else {\r\n                polygonQuickDecomp(upperPoly,result,reflexVertices,steinerPoints,delta,maxlevel,level);\r\n                polygonQuickDecomp(lowerPoly,result,reflexVertices,steinerPoints,delta,maxlevel,level);\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n    result.push(polygon);\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Remove collinear points in the polygon.\r\n * @method removeCollinearPoints\r\n * @param  {Number} [precision] The threshold angle to use when determining whether two edges are collinear. Use zero for finest precision.\r\n * @return {Number}           The number of points removed\r\n */\r\nfunction polygonRemoveCollinearPoints(polygon, precision){\r\n    var num = 0;\r\n    for(var i=polygon.length-1; polygon.length>3 && i>=0; --i){\r\n        if(collinear(polygonAt(polygon, i-1),polygonAt(polygon, i),polygonAt(polygon, i+1),precision)){\r\n            // Remove the middle point\r\n            polygon.splice(i%polygon.length,1);\r\n            num++;\r\n        }\r\n    }\r\n    return num;\r\n}\r\n\r\n/**\r\n * Check if two scalars are equal\r\n * @static\r\n * @method eq\r\n * @param  {Number} a\r\n * @param  {Number} b\r\n * @param  {Number} [precision]\r\n * @return {Boolean}\r\n */\r\nfunction scalar_eq(a,b,precision){\r\n    precision = precision || 0;\r\n    return Math.abs(a-b) < precision;\r\n}\r\n"},"lineCount":606}},"hash":"cd5fc1e6bf2c7fe5eb4f91511b6e15f1","cacheData":{"env":{}}}