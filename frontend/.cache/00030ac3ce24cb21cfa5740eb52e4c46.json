{"dependencies":[{"name":"/home/mishig/Desktop/viz/final/package.json","includedInParent":true,"mtime":1522648746056},{"name":"/home/mishig/Desktop/viz/final/node_modules/phaser/package.json","includedInParent":true,"mtime":1521632677000},{"name":"../../geom/","loc":{"line":7,"column":19}},{"name":"./GetTilesWithin","loc":{"line":8,"column":29}},{"name":"../../geom/intersects/","loc":{"line":9,"column":25}},{"name":"../../utils/NOOP","loc":{"line":10,"column":19}},{"name":"./TileToWorldX","loc":{"line":11,"column":27}},{"name":"./TileToWorldY","loc":{"line":12,"column":27}},{"name":"./WorldToTileX","loc":{"line":13,"column":27}},{"name":"./WorldToTileY","loc":{"line":14,"column":27}}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Geom = require('../../geom/');\r\nvar GetTilesWithin = require('./GetTilesWithin');\r\nvar Intersects = require('../../geom/intersects/');\r\nvar NOOP = require('../../utils/NOOP');\r\nvar TileToWorldX = require('./TileToWorldX');\r\nvar TileToWorldY = require('./TileToWorldY');\r\nvar WorldToTileX = require('./WorldToTileX');\r\nvar WorldToTileY = require('./WorldToTileY');\r\n\r\nvar TriangleToRectangle = function (triangle, rect)\r\n{\r\n    return Intersects.RectangleToTriangle(rect, triangle);\r\n};\r\n\r\n// Note: Could possibly be optimized by copying the shape and shifting it into tilemapLayer\r\n// coordinates instead of shifting the tiles.\r\n\r\n/**\r\n * Gets the tiles that overlap with the given shape in the given layer. The shape must be a Circle,\r\n * Line, Rectangle or Triangle. The shape should be in world coordinates.\r\n *\r\n * @function Phaser.Tilemaps.Components.GetTilesWithinShape\r\n * @since 3.0.0\r\n *\r\n * @param {(Phaser.Geom.Circle|Phaser.Geom.Line|Phaser.Geom.Rectangle|Phaser.Geom.Triangle)} shape - A shape in world (pixel) coordinates\r\n * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have\r\n * -1 for an index.\r\n * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on\r\n * at least one side.\r\n * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that\r\n * have at least one interesting face.\r\n * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n *\r\n * @return {Phaser.Tilemaps.Tile[]} Array of Tile objects.\r\n */\r\nvar GetTilesWithinShape = function (shape, filteringOptions, camera, layer)\r\n{\r\n    if (shape === undefined) { return []; }\r\n\r\n    // intersectTest is a function with parameters: shape, rect\r\n    var intersectTest = NOOP;\r\n    if (shape instanceof Geom.Circle) { intersectTest = Intersects.CircleToRectangle; }\r\n    else if (shape instanceof Geom.Rectangle) { intersectTest = Intersects.RectangleToRectangle; }\r\n    else if (shape instanceof Geom.Triangle) { intersectTest = TriangleToRectangle; }\r\n    else if (shape instanceof Geom.Line) { intersectTest = Intersects.LineToRectangle; }\r\n\r\n    // Top left corner of the shapes's bounding box, rounded down to include partial tiles\r\n    var xStart = WorldToTileX(shape.left, true, camera, layer);\r\n    var yStart = WorldToTileY(shape.top, true, camera, layer);\r\n\r\n    // Bottom right corner of the shapes's bounding box, rounded up to include partial tiles\r\n    var xEnd = Math.ceil(WorldToTileX(shape.right, false, camera, layer));\r\n    var yEnd = Math.ceil(WorldToTileY(shape.bottom, false, camera, layer));\r\n\r\n    // Tiles within bounding rectangle of shape. Bounds are forced to be at least 1 x 1 tile in size\r\n    // to grab tiles for shapes that don't have a height or width (e.g. a horizontal line).\r\n    var width = Math.max(xEnd - xStart, 1);\r\n    var height = Math.max(yEnd - yStart, 1);\r\n    var tiles = GetTilesWithin(xStart, yStart, width, height, filteringOptions, layer);\r\n\r\n    var tileWidth = layer.tileWidth;\r\n    var tileHeight = layer.tileHeight;\r\n    if (layer.tilemapLayer)\r\n    {\r\n        tileWidth *= layer.tilemapLayer.scaleX;\r\n        tileHeight *= layer.tilemapLayer.scaleY;\r\n    }\r\n\r\n    var results = [];\r\n    var tileRect = new Geom.Rectangle(0, 0, tileWidth, tileHeight);\r\n    for (var i = 0; i < tiles.length; i++)\r\n    {\r\n        var tile = tiles[i];\r\n        tileRect.x = TileToWorldX(tile.x, camera, layer);\r\n        tileRect.y = TileToWorldY(tile.y, camera, layer);\r\n        if (intersectTest(shape, tileRect))\r\n        {\r\n            results.push(tile);\r\n        }\r\n    }\r\n\r\n    return results;\r\n};\r\n\r\nmodule.exports = GetTilesWithinShape;\r\n","map":{"mappings":[{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}}],"sources":{"node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Geom = require('../../geom/');\r\nvar GetTilesWithin = require('./GetTilesWithin');\r\nvar Intersects = require('../../geom/intersects/');\r\nvar NOOP = require('../../utils/NOOP');\r\nvar TileToWorldX = require('./TileToWorldX');\r\nvar TileToWorldY = require('./TileToWorldY');\r\nvar WorldToTileX = require('./WorldToTileX');\r\nvar WorldToTileY = require('./WorldToTileY');\r\n\r\nvar TriangleToRectangle = function (triangle, rect)\r\n{\r\n    return Intersects.RectangleToTriangle(rect, triangle);\r\n};\r\n\r\n// Note: Could possibly be optimized by copying the shape and shifting it into tilemapLayer\r\n// coordinates instead of shifting the tiles.\r\n\r\n/**\r\n * Gets the tiles that overlap with the given shape in the given layer. The shape must be a Circle,\r\n * Line, Rectangle or Triangle. The shape should be in world coordinates.\r\n *\r\n * @function Phaser.Tilemaps.Components.GetTilesWithinShape\r\n * @since 3.0.0\r\n *\r\n * @param {(Phaser.Geom.Circle|Phaser.Geom.Line|Phaser.Geom.Rectangle|Phaser.Geom.Triangle)} shape - A shape in world (pixel) coordinates\r\n * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have\r\n * -1 for an index.\r\n * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on\r\n * at least one side.\r\n * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that\r\n * have at least one interesting face.\r\n * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n *\r\n * @return {Phaser.Tilemaps.Tile[]} Array of Tile objects.\r\n */\r\nvar GetTilesWithinShape = function (shape, filteringOptions, camera, layer)\r\n{\r\n    if (shape === undefined) { return []; }\r\n\r\n    // intersectTest is a function with parameters: shape, rect\r\n    var intersectTest = NOOP;\r\n    if (shape instanceof Geom.Circle) { intersectTest = Intersects.CircleToRectangle; }\r\n    else if (shape instanceof Geom.Rectangle) { intersectTest = Intersects.RectangleToRectangle; }\r\n    else if (shape instanceof Geom.Triangle) { intersectTest = TriangleToRectangle; }\r\n    else if (shape instanceof Geom.Line) { intersectTest = Intersects.LineToRectangle; }\r\n\r\n    // Top left corner of the shapes's bounding box, rounded down to include partial tiles\r\n    var xStart = WorldToTileX(shape.left, true, camera, layer);\r\n    var yStart = WorldToTileY(shape.top, true, camera, layer);\r\n\r\n    // Bottom right corner of the shapes's bounding box, rounded up to include partial tiles\r\n    var xEnd = Math.ceil(WorldToTileX(shape.right, false, camera, layer));\r\n    var yEnd = Math.ceil(WorldToTileY(shape.bottom, false, camera, layer));\r\n\r\n    // Tiles within bounding rectangle of shape. Bounds are forced to be at least 1 x 1 tile in size\r\n    // to grab tiles for shapes that don't have a height or width (e.g. a horizontal line).\r\n    var width = Math.max(xEnd - xStart, 1);\r\n    var height = Math.max(yEnd - yStart, 1);\r\n    var tiles = GetTilesWithin(xStart, yStart, width, height, filteringOptions, layer);\r\n\r\n    var tileWidth = layer.tileWidth;\r\n    var tileHeight = layer.tileHeight;\r\n    if (layer.tilemapLayer)\r\n    {\r\n        tileWidth *= layer.tilemapLayer.scaleX;\r\n        tileHeight *= layer.tilemapLayer.scaleY;\r\n    }\r\n\r\n    var results = [];\r\n    var tileRect = new Geom.Rectangle(0, 0, tileWidth, tileHeight);\r\n    for (var i = 0; i < tiles.length; i++)\r\n    {\r\n        var tile = tiles[i];\r\n        tileRect.x = TileToWorldX(tile.x, camera, layer);\r\n        tileRect.y = TileToWorldY(tile.y, camera, layer);\r\n        if (intersectTest(shape, tileRect))\r\n        {\r\n            results.push(tile);\r\n        }\r\n    }\r\n\r\n    return results;\r\n};\r\n\r\nmodule.exports = GetTilesWithinShape;\r\n"},"lineCount":94}},"hash":"24d332229bbedd79b32acb3ff764b1c4","cacheData":{"env":{}}}