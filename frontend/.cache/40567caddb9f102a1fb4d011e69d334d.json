{"dependencies":[{"name":"/home/mishig/Desktop/vizgithub/frontend/package.json","includedInParent":true,"mtime":1523230167415},{"name":"/home/mishig/Desktop/vizgithub/frontend/node_modules/@tensorflow/tfjs-core/package.json","includedInParent":true,"mtime":0},{"name":"../../environment","loc":{"line":3,"column":28}},{"name":"../../util","loc":{"line":4,"column":19}},{"name":"../../ops/broadcast_util","loc":{"line":5,"column":29}},{"name":"./tex_util","loc":{"line":6,"column":23}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar environment_1 = require(\"../../environment\");\nvar util = require(\"../../util\");\nvar broadcast_util = require(\"../../ops/broadcast_util\");\nvar tex_util = require(\"./tex_util\");\nfunction makeShader(inputsInfo, outputShape, userCode, broadcast) {\n    var sampleSnippet = getSampleSnippet();\n    var setOutputSnippet = getSetOutputSnippet();\n    var inputPrefixSnippet = inputsInfo.map(function (x) { return \"uniform sampler2D \" + x.name + \";\"; }).join('\\n');\n    var inputSamplingSnippet = inputsInfo.map(function (x) { return getInputSamplingSnippet(x, outputShape, broadcast); })\n        .join('\\n');\n    var outTexShape = outputShape.texShape;\n    var outputSamplingSnippet = getOutputSamplingSnippet(outputShape.logicalShape, outTexShape);\n    var source = [\n        SHADER_PREFIX, sampleSnippet, setOutputSnippet, inputPrefixSnippet,\n        outputSamplingSnippet, inputSamplingSnippet, userCode\n    ].join('\\n');\n    return source;\n}\nexports.makeShader = makeShader;\nfunction getSampleSnippet() {\n    return environment_1.ENV.get('WEBGL_FLOAT_TEXTURE_ENABLED') ?\n        FLOAT_TEXTURE_SAMPLE_SNIPPET :\n        UNSIGNED_BYTE_TEXTURE_SAMPLE_SNIPPET;\n}\nfunction getSetOutputSnippet() {\n    return environment_1.ENV.get('WEBGL_FLOAT_TEXTURE_ENABLED') ?\n        FLOAT_TEXTURE_SETOUTPUT_SNIPPET :\n        UNSIGNED_BYTE_TEXTURE_SETOUTPUT_SNIPPET;\n}\nfunction getSamplerFromInInfo(inInfo) {\n    var shape = inInfo.shapeInfo.logicalShape;\n    switch (shape.length) {\n        case 0:\n            return getSamplerScalar(inInfo);\n        case 1:\n            return getSampler1D(inInfo);\n        case 2:\n            return getSampler2D(inInfo);\n        case 3:\n            return getSampler3D(inInfo);\n        case 4:\n            return getSampler4D(inInfo);\n        default:\n            throw new Error(shape.length + \"-D input sampling\" +\n                \" is not yet supported\");\n    }\n}\nfunction getInputSamplingSnippet(inInfo, outShapeInfo, broadcast) {\n    var res = getSamplerFlat(inInfo);\n    res += getSamplerFromInInfo(inInfo);\n    if (broadcast ||\n        util.arraysEqual(inInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape)) {\n        res += getSamplerAtOutputCoords(inInfo, outShapeInfo, broadcast);\n    }\n    return res;\n}\nfunction getOutputSamplingSnippet(outShape, outTexShape) {\n    switch (outShape.length) {\n        case 0:\n            return getOutputScalarCoords();\n        case 1:\n            return getOutput1DCoords(outShape, outTexShape);\n        case 2:\n            return getOutput2DCoords(outShape, outTexShape);\n        case 3:\n            return getOutput3DCoords(outShape, outTexShape);\n        case 4:\n            return getOutput4DCoords(outShape, outTexShape);\n        default:\n            throw new Error(outShape.length + \"-D output sampling is not yet supported\");\n    }\n}\nvar SAMPLE_1D_SNIPPET = \"\\nvec2 UVfrom1D(int texNumR, int texNumC, int index) {\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";\nvar SAMPLE_2D_SNIPPET = \"\\nvec2 UVfrom2D(int texNumR, int texNumC, int numC, int row, int col) {\\n  int index = row * numC + col;\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";\nvar SAMPLE_3D_SNIPPET = \"\\nvec2 UVfrom3D(int texNumR, int texNumC, int stride0,\\n    int stride1, int row, int col, int depth) {\\n  // Explicitly use integer operations as dot() only works on floats.\\n  int index = row * stride0 + col * stride1 + depth;\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";\nvar SAMPLE_4D_SNIPPET = \"\\nvec2 UVfrom4D(int texNumR, int texNumC, int stride0,\\n    int stride1, int stride2, int row, int col, int depth,\\n    int depth2) {\\n  // Explicitly use integer operations as dot() only works on floats.\\n  int index = row * stride0 + col * stride1 + depth * stride2 + depth2;\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";\nvar UNSIGNED_BYTE_TEXTURE_SAMPLE_SNIPPET = \"\\n  uniform float NaN;\\n\\n  const vec4 floatDeltas = vec4(\\n      1.0,\\n      1.0 / 255.0,\\n      1.0 / (255.0 * 255.0),\\n      1.0 / (255.0 * 255.0 * 255.0)\\n  );\\n  const float minValue = \" + tex_util.FLOAT_MIN + \".0;\\n  const float maxValue = \" + tex_util.FLOAT_MAX + \".0;\\n  const float range = (maxValue - minValue) / 255.0;\\n  const vec2 dotRange = vec2(1.0, range);\\n\\n  float sample(sampler2D texture, vec2 uv) {\\n    vec4 sampleValue = texture2D(texture, uv);\\n    if (all(equal(sampleValue, vec4(\" + tex_util.BYTE_NAN_VALUE + \")))) {\\n      return NaN;\\n    }\\n\\n    vec4 encValue = floor(sampleValue * 255.0 + 0.5);\\n    float decodedValue = dot(encValue, floatDeltas);\\n    return dot(vec2(minValue, decodedValue), dotRange);\\n  }\\n\";\nvar UNSIGNED_BYTE_TEXTURE_SETOUTPUT_SNIPPET = \"\\n  const vec4 floatPowers = vec4(\\n    1.0,\\n    255.0,\\n    255.0 * 255.0,\\n    255.0 * 255.0 * 255.0\\n  );\\n  const vec2 recipRange = vec2(1.0/range);\\n  const vec2 recipRange255 = vec2(1.0/(maxValue - minValue));\\n\\n  void setOutput(float decodedValue) {\\n    if (isNaN(decodedValue)) {\\n      gl_FragColor = vec4(\" + tex_util.BYTE_NAN_VALUE + \");\\n      return;\\n    }\\n\\n    float a = dot(vec2(decodedValue, -minValue), recipRange);\\n    float b = fract(a) * 255.0;\\n    float c = fract(b) * 255.0;\\n    float d = fract(c) * 255.0;\\n    gl_FragColor = floor(vec4(a, b, c, d)) / 255.0;\\n\\n    // TODO(dsmilkov): Version above gets better accuracy but probably slower\\n    // than the version below. Benchmark to determine if the accuracy is worth\\n    // the cost.\\n\\n    // float normValue = dot(vec2(decodedValue, -minValue), recipRange255);\\n    // vec4 f = normValue * floatPowers;\\n    // gl_FragColor = floor(fract(f) * 255.0) / 255.0;\\n  }\\n\";\nvar FLOAT_TEXTURE_SAMPLE_SNIPPET = \"\\n  float sample(sampler2D texture, vec2 uv) {\\n    return texture2D(texture, uv).r;\\n  }\\n\";\nvar FLOAT_TEXTURE_SETOUTPUT_SNIPPET = \"\\n  void setOutput(float val) {\\n    gl_FragColor = vec4(val, 0, 0, 0);\\n  }\\n\";\nvar SHADER_PREFIX = \"\\n  precision highp float;\\n  precision highp int;\\n  varying vec2 resultUV;\\n  const vec2 halfCR = vec2(0.5, 0.5);\\n\\n  bool isNaN(float val) {\\n    float v1 = val * val;\\n    float v2 = val * val;\\n    return v1 == v2 ? false : true;\\n  }\\n\\n  bool hasNaN(vec4 values) {\\n    vec4 v1 = values * values;\\n    vec4 v2 = values * values;\\n    return any(notEqual(v1, v2));\\n  }\\n\\n  float getNaN(vec4 values) {\\n    return dot(vec4(1), values);\\n  }\\n\\n  int round(float value) {\\n    return int(floor(value + 0.5));\\n  }\\n\\n  int imod(int x, int y) {\\n    return x - y * (x / y);\\n  }\\n\\n  const vec2 randomConst = vec2(\\n    23.14069263277926, // e^pi (Gelfond's constant)\\n     2.665144142690225 // 2^sqrt(2) (Gelfond\\u2013Schneider constant)\\n  );\\n\\n  float random(float seed) {\\n      return fract(cos(dot(resultUV * seed, randomConst)) * 12345.6789);\\n  }\\n\\n  \" + SAMPLE_1D_SNIPPET + \"\\n  \" + SAMPLE_2D_SNIPPET + \"\\n  \" + SAMPLE_3D_SNIPPET + \"\\n  \" + SAMPLE_4D_SNIPPET + \"\\n\";\nfunction getOutputScalarCoords() {\n    return \"\\n    int getOutputCoords() {\\n      return 0;\\n    }\\n  \";\n}\nfunction getOutput1DCoords(shape, texShape) {\n    if (texShape[0] === 1) {\n        return \"\\n      int getOutputCoords() {\\n        return int(resultUV.x * \" + texShape[1] + \".0);\\n      }\\n    \";\n    }\n    if (texShape[1] === 1) {\n        return \"\\n      int getOutputCoords() {\\n        return int(resultUV.y * \" + texShape[0] + \".0);\\n      }\\n    \";\n    }\n    return \"\\n    int getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\" + texShape[0] + \", \" + texShape[1] + \"));\\n      return resTexRC.x * \" + texShape[1] + \" + resTexRC.y;\\n    }\\n  \";\n}\nfunction getOutput3DCoords(shape, texShape) {\n    var stride0 = shape[1] * shape[2];\n    var stride1 = shape[2];\n    return \"\\n    ivec3 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\" + texShape[0] + \", \" + texShape[1] + \"));\\n      int index = resTexRC.x * \" + texShape[1] + \" + resTexRC.y;\\n      int r = index / \" + stride0 + \";\\n      index -= r * \" + stride0 + \";\\n      int c = index / \" + stride1 + \";\\n      int d = index - c * \" + stride1 + \";\\n      return ivec3(r, c, d);\\n    }\\n  \";\n}\nfunction getOutput4DCoords(shape, texShape) {\n    var stride2 = shape[3];\n    var stride1 = shape[2] * stride2;\n    var stride0 = shape[1] * stride1;\n    return \"\\n    ivec4 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n        vec2(\" + texShape[0] + \", \" + texShape[1] + \"));\\n      int index = resTexRC.x * \" + texShape[1] + \" + resTexRC.y;\\n\\n      int r = index / \" + stride0 + \";\\n      index -= r * \" + stride0 + \";\\n\\n      int c = index / \" + stride1 + \";\\n      index -= c * \" + stride1 + \";\\n\\n      int d = index / \" + stride2 + \";\\n      int d2 = index - d * \" + stride2 + \";\\n\\n      return ivec4(r, c, d, d2);\\n    }\\n  \";\n}\nfunction getOutput2DCoords(shape, texShape) {\n    if (util.arraysEqual(shape, texShape)) {\n        return \"\\n      ivec2 getOutputCoords() {\\n        return ivec2(resultUV.yx * vec2(\" + texShape[0] + \", \" + texShape[1] + \"));\\n      }\\n    \";\n    }\n    if (shape[1] === 1) {\n        return \"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(\" + texShape[0] + \", \" + texShape[1] + \"));\\n        int index = resTexRC.x * \" + texShape[1] + \" + resTexRC.y;\\n        return ivec2(index, 0);\\n      }\\n    \";\n    }\n    if (shape[0] === 1) {\n        return \"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(\" + texShape[0] + \", \" + texShape[1] + \"));\\n        int index = resTexRC.x * \" + texShape[1] + \" + resTexRC.y;\\n        return ivec2(0, index);\\n      }\\n    \";\n    }\n    return \"\\n    ivec2 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\" + texShape[0] + \", \" + texShape[1] + \"));\\n      int index = resTexRC.x * \" + texShape[1] + \" + resTexRC.y;\\n      int r = index / \" + shape[1] + \";\\n      int c = index - r * \" + shape[1] + \";\\n      return ivec2(r, c);\\n    }\\n  \";\n}\nfunction getSamplerScalar(inputInfo) {\n    var texName = inputInfo.name;\n    var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    return \"\\n    float \" + funcName + \"() {\\n      return sample(\" + texName + \", halfCR);\\n    }\\n  \";\n}\nfunction getSampler1D(inputInfo) {\n    var texName = inputInfo.name;\n    var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    return \"\\n    float \" + funcName + \"(int index) {\\n      return \" + funcName + \"Flat(index);\\n    }\\n  \";\n}\nfunction getSampler2D(inputInfo) {\n    var shape = inputInfo.shapeInfo.logicalShape;\n    var texShape = inputInfo.shapeInfo.texShape;\n    var texName = inputInfo.name;\n    var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    var texNumR = texShape[0];\n    var texNumC = texShape[1];\n    if (util.arraysEqual(shape, texShape)) {\n        return \"\\n    float \" + funcName + \"(int row, int col) {\\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(\" + texNumC + \".0, \" + texNumR + \".0);\\n      return sample(\" + texName + \", uv);\\n    }\\n  \";\n    }\n    var _a = util.squeezeShape(shape), newShape = _a.newShape, keptDims = _a.keptDims;\n    var squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n        var newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n        var params = ['row', 'col'];\n        return \"\\n      \" + getSamplerFromInInfo(newInputInfo) + \"\\n      float \" + funcName + \"(int row, int col) {\\n        return \" + funcName + \"(\" + getSqueezedParams(params, keptDims) + \");\\n      }\\n    \";\n    }\n    if (texNumC === 1) {\n        return \"\\n    float \" + funcName + \"(int row, int col) {\\n      int index = row * \" + shape[1] + \" + col;\\n      vec2 uv = vec2(0.5, (float(index) + 0.5) / \" + texNumR + \".0);\\n      return sample(\" + texName + \", uv);\\n    }\\n  \";\n    }\n    if (texNumR === 1) {\n        return \"\\n    float \" + funcName + \"(int row, int col) {\\n      int index = row * \" + shape[1] + \" + col;\\n      vec2 uv = vec2((float(index) + 0.5) / \" + texNumC + \".0, 0.5);\\n      return sample(\" + texName + \", uv);\\n    }\\n  \";\n    }\n    return \"\\n  float \" + funcName + \"(int row, int col) {\\n    vec2 uv = UVfrom2D(\" + texNumR + \", \" + texNumC + \", \" + shape[1] + \", row, col);\\n    return sample(\" + texName + \", uv);\\n  }\\n\";\n}\nfunction getSampler3D(inputInfo) {\n    var texShape = inputInfo.shapeInfo.texShape;\n    var shape = inputInfo.shapeInfo.logicalShape;\n    var texName = inputInfo.name;\n    var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    var texNumR = texShape[0];\n    var texNumC = texShape[1];\n    var stride0 = shape[1] * shape[2];\n    var stride1 = shape[2];\n    var _a = util.squeezeShape(shape), newShape = _a.newShape, keptDims = _a.keptDims;\n    var squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n        var newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n        var params = ['row', 'col', 'depth'];\n        return \"\\n        \" + getSamplerFromInInfo(newInputInfo) + \"\\n        float \" + funcName + \"(int row, int col, int depth) {\\n          return \" + funcName + \"(\" + getSqueezedParams(params, keptDims) + \");\\n        }\\n      \";\n    }\n    if (texNumC === stride0) {\n        return \"\\n        float \" + funcName + \"(int row, int col, int depth) {\\n          int texR = row;\\n          int texC = col * \" + stride1 + \" + depth;\\n          vec2 uv = (vec2(texC, texR) + halfCR) /\\n                     vec2(\" + texNumC + \".0, \" + texNumR + \".0);\\n          return sample(\" + texName + \", uv);\\n        }\\n      \";\n    }\n    if (texNumC === stride1) {\n        return \"\\n    float \" + funcName + \"(int row, int col, int depth) {\\n      int texR = row * \" + shape[1] + \" + col;\\n      int texC = depth;\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\" + texNumC + \".0, \" + texNumR + \".0);\\n      return sample(\" + texName + \", uv);\\n    }\\n  \";\n    }\n    return \"\\n      float \" + funcName + \"(int row, int col, int depth) {\\n        vec2 uv = UVfrom3D(\\n            \" + texNumR + \", \" + texNumC + \", \" + stride0 + \", \" + stride1 + \", row, col, depth);\\n        return sample(\" + texName + \", uv);\\n      }\\n  \";\n}\nfunction getSampler4D(inputInfo) {\n    var shape = inputInfo.shapeInfo.logicalShape;\n    var texShape = inputInfo.shapeInfo.texShape;\n    var texName = inputInfo.name;\n    var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    var texNumR = texShape[0];\n    var texNumC = texShape[1];\n    var stride2 = shape[3];\n    var stride1 = shape[2] * stride2;\n    var stride0 = shape[1] * stride1;\n    var _a = util.squeezeShape(shape), newShape = _a.newShape, keptDims = _a.keptDims;\n    if (newShape.length < shape.length) {\n        var newInputInfo = squeezeInputInfo(inputInfo, newShape);\n        var params = ['row', 'col', 'depth', 'depth2'];\n        return \"\\n      \" + getSamplerFromInInfo(newInputInfo) + \"\\n      float \" + funcName + \"(int row, int col, int depth, int depth2) {\\n        return \" + funcName + \"(\" + getSqueezedParams(params, keptDims) + \");\\n      }\\n    \";\n    }\n    if (texNumC === stride0) {\n        return \"\\n      float \" + funcName + \"(int row, int col, int depth, int depth2) {\\n        int texR = row;\\n        int texC = col * \" + stride1 + \" + depth * \" + stride2 + \" + depth2;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\" + texNumC + \".0, \" + texNumR + \".0);\\n        return sample(\" + texName + \", uv);\\n      }\\n    \";\n    }\n    if (texNumC === stride2) {\n        return \"\\n      float \" + funcName + \"(int row, int col, int depth, int depth2) {\\n        int texR = row * \" + shape[1] * shape[2] + \" + col * \" + shape[2] + \" + depth;\\n        int texC = depth2;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\" + texNumC + \".0, \" + texNumR + \".0);\\n        return sample(\" + texName + \", uv);\\n      }\\n    \";\n    }\n    return \"\\n    float \" + funcName + \"(int row, int col, int depth, int depth2) {\\n      vec2 uv = UVfrom4D(\" + texNumR + \", \" + texNumC + \", \" + stride0 + \", \" + stride1 + \",\\n          \" + stride2 + \", row, col, depth, depth2);\\n      return sample(\" + texName + \", uv);\\n    }\\n  \";\n}\nfunction getSamplerFlat(inputInfo) {\n    var texName = inputInfo.name;\n    var texShape = inputInfo.shapeInfo.texShape;\n    var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1) + 'Flat';\n    var tNumR = texShape[0];\n    var tNumC = texShape[1];\n    if (tNumC === 1 && tNumR === 1) {\n        return \"\\n      float \" + funcName + \"(int index) {\\n        return sample(\" + texName + \", halfCR);\\n      }\\n    \";\n    }\n    if (tNumC === 1) {\n        return \"\\n      float \" + funcName + \"(int index) {\\n        vec2 uv = vec2(0.5, (float(index) + 0.5) / \" + tNumR + \".0);\\n        return sample(\" + texName + \", uv);\\n      }\\n    \";\n    }\n    if (tNumR === 1) {\n        return \"\\n      float \" + funcName + \"(int index) {\\n        vec2 uv = vec2((float(index) + 0.5) / \" + tNumC + \".0, 0.5);\\n        return sample(\" + texName + \", uv);\\n      }\\n    \";\n    }\n    return \"\\n    float \" + funcName + \"(int index) {\\n      vec2 uv = UVfrom1D(\" + tNumR + \", \" + tNumC + \", index);\\n      return sample(\" + texName + \", uv);\\n    }\\n  \";\n}\nfunction getBroadcastOutputCoordsSampler(inputInfo, outShapeInfo, texFuncSnippet, funcName) {\n    var inRank = inputInfo.shapeInfo.logicalShape.length;\n    var outRank = outShapeInfo.logicalShape.length;\n    var type = 'int';\n    if (outRank === 2) {\n        type = 'ivec2';\n    }\n    else if (outRank === 3) {\n        type = 'ivec3';\n    }\n    else if (outRank === 4) {\n        type = 'ivec4';\n    }\n    var broadcastDims = broadcast_util.getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n    var rankDiff = outRank - inRank;\n    var coordsSnippet;\n    if (inRank === 0) {\n        coordsSnippet = '';\n    }\n    else if (outRank < 2 && broadcastDims.length >= 1) {\n        coordsSnippet = 'coords = 0;';\n    }\n    else {\n        coordsSnippet =\n            broadcastDims.map(function (d) { return \"coords[\" + (d + rankDiff) + \"] = 0;\"; }).join('\\n');\n    }\n    var unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n        unpackedCoordsSnippet = 'coords';\n    }\n    else {\n        unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n            .map(function (s, i) { return \"coords[\" + (i + rankDiff) + \"]\"; })\n            .join(', ');\n    }\n    return \"\\n    float \" + funcName + \"() {\\n      \" + type + \" coords = getOutputCoords();\\n      \" + coordsSnippet + \"\\n      return get\" + texFuncSnippet + \"(\" + unpackedCoordsSnippet + \");\\n    }\\n  \";\n}\nfunction getSamplerAtOutputCoords(inputInfo, outShapeInfo, supportsBroadcasting) {\n    var inTexShape = inputInfo.shapeInfo.texShape;\n    var texName = inputInfo.name;\n    var texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n    var funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n    var broadcastDims = broadcast_util.getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n    var inRank = inputInfo.shapeInfo.logicalShape.length;\n    var outRank = outShapeInfo.logicalShape.length;\n    var doBroadcast = supportsBroadcasting && ((outRank > inRank) || broadcastDims.length > 0);\n    var broadcastOverOuter = broadcast_util.broadcastDimsAreOuter(broadcastDims);\n    if (doBroadcast && !broadcastOverOuter) {\n        return getBroadcastOutputCoordsSampler(inputInfo, outShapeInfo, texFuncSnippet, funcName);\n    }\n    var outTexShape = outShapeInfo.texShape;\n    if (util.arraysEqual(inTexShape, outTexShape)) {\n        return \"\\n      float \" + funcName + \"() {\\n        return sample(\" + texName + \", resultUV);\\n      }\\n    \";\n    }\n    var inSize = util.sizeFromShape(inTexShape);\n    var broadcastSnippet = '';\n    if (doBroadcast && broadcastOverOuter) {\n        broadcastSnippet = \"\\n        int mainPart = index / \" + inSize + \";\\n        index -= mainPart * \" + inSize + \";\\n      \";\n    }\n    return \"\\n    float \" + funcName + \"() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\" + outTexShape[0] + \", \" + outTexShape[1] + \"));\\n      int index = resTexRC.x * \" + outTexShape[1] + \" + resTexRC.y;\\n      \" + broadcastSnippet + \"\\n      int texR = index / \" + inTexShape[1] + \";\\n      int texC = index - texR * \" + inTexShape[1] + \";\\n      vec2 uv = (vec2(texC, texR) + halfCR) /\\n                 vec2(\" + inTexShape[1] + \".0, \" + inTexShape[0] + \".0);\\n\\n      return sample(\" + texName + \", uv);\\n    }\\n  \";\n}\nfunction getCoordsDataType(rank) {\n    if (rank <= 1) {\n        return 'int';\n    }\n    else if (rank === 2) {\n        return 'ivec2';\n    }\n    else if (rank === 3) {\n        return 'ivec3';\n    }\n    else if (rank === 4) {\n        return 'ivec4';\n    }\n    else {\n        throw Error(\"GPU for rank \" + rank + \" is not yet supported\");\n    }\n}\nexports.getCoordsDataType = getCoordsDataType;\nfunction squeezeInputInfo(inInfo, squeezedShape) {\n    var newInputInfo = JSON.parse(JSON.stringify(inInfo));\n    newInputInfo.shapeInfo.logicalShape = squeezedShape;\n    return newInputInfo;\n}\nfunction getSqueezedParams(params, keptDims) {\n    return keptDims.map(function (d) { return params[d]; }).join(', ');\n}\n","map":{"mappings":[{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}}],"sources":{"node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar environment_1 = require(\"../../environment\");\nvar util = require(\"../../util\");\nvar broadcast_util = require(\"../../ops/broadcast_util\");\nvar tex_util = require(\"./tex_util\");\nfunction makeShader(inputsInfo, outputShape, userCode, broadcast) {\n    var sampleSnippet = getSampleSnippet();\n    var setOutputSnippet = getSetOutputSnippet();\n    var inputPrefixSnippet = inputsInfo.map(function (x) { return \"uniform sampler2D \" + x.name + \";\"; }).join('\\n');\n    var inputSamplingSnippet = inputsInfo.map(function (x) { return getInputSamplingSnippet(x, outputShape, broadcast); })\n        .join('\\n');\n    var outTexShape = outputShape.texShape;\n    var outputSamplingSnippet = getOutputSamplingSnippet(outputShape.logicalShape, outTexShape);\n    var source = [\n        SHADER_PREFIX, sampleSnippet, setOutputSnippet, inputPrefixSnippet,\n        outputSamplingSnippet, inputSamplingSnippet, userCode\n    ].join('\\n');\n    return source;\n}\nexports.makeShader = makeShader;\nfunction getSampleSnippet() {\n    return environment_1.ENV.get('WEBGL_FLOAT_TEXTURE_ENABLED') ?\n        FLOAT_TEXTURE_SAMPLE_SNIPPET :\n        UNSIGNED_BYTE_TEXTURE_SAMPLE_SNIPPET;\n}\nfunction getSetOutputSnippet() {\n    return environment_1.ENV.get('WEBGL_FLOAT_TEXTURE_ENABLED') ?\n        FLOAT_TEXTURE_SETOUTPUT_SNIPPET :\n        UNSIGNED_BYTE_TEXTURE_SETOUTPUT_SNIPPET;\n}\nfunction getSamplerFromInInfo(inInfo) {\n    var shape = inInfo.shapeInfo.logicalShape;\n    switch (shape.length) {\n        case 0:\n            return getSamplerScalar(inInfo);\n        case 1:\n            return getSampler1D(inInfo);\n        case 2:\n            return getSampler2D(inInfo);\n        case 3:\n            return getSampler3D(inInfo);\n        case 4:\n            return getSampler4D(inInfo);\n        default:\n            throw new Error(shape.length + \"-D input sampling\" +\n                \" is not yet supported\");\n    }\n}\nfunction getInputSamplingSnippet(inInfo, outShapeInfo, broadcast) {\n    var res = getSamplerFlat(inInfo);\n    res += getSamplerFromInInfo(inInfo);\n    if (broadcast ||\n        util.arraysEqual(inInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape)) {\n        res += getSamplerAtOutputCoords(inInfo, outShapeInfo, broadcast);\n    }\n    return res;\n}\nfunction getOutputSamplingSnippet(outShape, outTexShape) {\n    switch (outShape.length) {\n        case 0:\n            return getOutputScalarCoords();\n        case 1:\n            return getOutput1DCoords(outShape, outTexShape);\n        case 2:\n            return getOutput2DCoords(outShape, outTexShape);\n        case 3:\n            return getOutput3DCoords(outShape, outTexShape);\n        case 4:\n            return getOutput4DCoords(outShape, outTexShape);\n        default:\n            throw new Error(outShape.length + \"-D output sampling is not yet supported\");\n    }\n}\nvar SAMPLE_1D_SNIPPET = \"\\nvec2 UVfrom1D(int texNumR, int texNumC, int index) {\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";\nvar SAMPLE_2D_SNIPPET = \"\\nvec2 UVfrom2D(int texNumR, int texNumC, int numC, int row, int col) {\\n  int index = row * numC + col;\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";\nvar SAMPLE_3D_SNIPPET = \"\\nvec2 UVfrom3D(int texNumR, int texNumC, int stride0,\\n    int stride1, int row, int col, int depth) {\\n  // Explicitly use integer operations as dot() only works on floats.\\n  int index = row * stride0 + col * stride1 + depth;\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";\nvar SAMPLE_4D_SNIPPET = \"\\nvec2 UVfrom4D(int texNumR, int texNumC, int stride0,\\n    int stride1, int stride2, int row, int col, int depth,\\n    int depth2) {\\n  // Explicitly use integer operations as dot() only works on floats.\\n  int index = row * stride0 + col * stride1 + depth * stride2 + depth2;\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";\nvar UNSIGNED_BYTE_TEXTURE_SAMPLE_SNIPPET = \"\\n  uniform float NaN;\\n\\n  const vec4 floatDeltas = vec4(\\n      1.0,\\n      1.0 / 255.0,\\n      1.0 / (255.0 * 255.0),\\n      1.0 / (255.0 * 255.0 * 255.0)\\n  );\\n  const float minValue = \" + tex_util.FLOAT_MIN + \".0;\\n  const float maxValue = \" + tex_util.FLOAT_MAX + \".0;\\n  const float range = (maxValue - minValue) / 255.0;\\n  const vec2 dotRange = vec2(1.0, range);\\n\\n  float sample(sampler2D texture, vec2 uv) {\\n    vec4 sampleValue = texture2D(texture, uv);\\n    if (all(equal(sampleValue, vec4(\" + tex_util.BYTE_NAN_VALUE + \")))) {\\n      return NaN;\\n    }\\n\\n    vec4 encValue = floor(sampleValue * 255.0 + 0.5);\\n    float decodedValue = dot(encValue, floatDeltas);\\n    return dot(vec2(minValue, decodedValue), dotRange);\\n  }\\n\";\nvar UNSIGNED_BYTE_TEXTURE_SETOUTPUT_SNIPPET = \"\\n  const vec4 floatPowers = vec4(\\n    1.0,\\n    255.0,\\n    255.0 * 255.0,\\n    255.0 * 255.0 * 255.0\\n  );\\n  const vec2 recipRange = vec2(1.0/range);\\n  const vec2 recipRange255 = vec2(1.0/(maxValue - minValue));\\n\\n  void setOutput(float decodedValue) {\\n    if (isNaN(decodedValue)) {\\n      gl_FragColor = vec4(\" + tex_util.BYTE_NAN_VALUE + \");\\n      return;\\n    }\\n\\n    float a = dot(vec2(decodedValue, -minValue), recipRange);\\n    float b = fract(a) * 255.0;\\n    float c = fract(b) * 255.0;\\n    float d = fract(c) * 255.0;\\n    gl_FragColor = floor(vec4(a, b, c, d)) / 255.0;\\n\\n    // TODO(dsmilkov): Version above gets better accuracy but probably slower\\n    // than the version below. Benchmark to determine if the accuracy is worth\\n    // the cost.\\n\\n    // float normValue = dot(vec2(decodedValue, -minValue), recipRange255);\\n    // vec4 f = normValue * floatPowers;\\n    // gl_FragColor = floor(fract(f) * 255.0) / 255.0;\\n  }\\n\";\nvar FLOAT_TEXTURE_SAMPLE_SNIPPET = \"\\n  float sample(sampler2D texture, vec2 uv) {\\n    return texture2D(texture, uv).r;\\n  }\\n\";\nvar FLOAT_TEXTURE_SETOUTPUT_SNIPPET = \"\\n  void setOutput(float val) {\\n    gl_FragColor = vec4(val, 0, 0, 0);\\n  }\\n\";\nvar SHADER_PREFIX = \"\\n  precision highp float;\\n  precision highp int;\\n  varying vec2 resultUV;\\n  const vec2 halfCR = vec2(0.5, 0.5);\\n\\n  bool isNaN(float val) {\\n    float v1 = val * val;\\n    float v2 = val * val;\\n    return v1 == v2 ? false : true;\\n  }\\n\\n  bool hasNaN(vec4 values) {\\n    vec4 v1 = values * values;\\n    vec4 v2 = values * values;\\n    return any(notEqual(v1, v2));\\n  }\\n\\n  float getNaN(vec4 values) {\\n    return dot(vec4(1), values);\\n  }\\n\\n  int round(float value) {\\n    return int(floor(value + 0.5));\\n  }\\n\\n  int imod(int x, int y) {\\n    return x - y * (x / y);\\n  }\\n\\n  const vec2 randomConst = vec2(\\n    23.14069263277926, // e^pi (Gelfond's constant)\\n     2.665144142690225 // 2^sqrt(2) (Gelfond\\u2013Schneider constant)\\n  );\\n\\n  float random(float seed) {\\n      return fract(cos(dot(resultUV * seed, randomConst)) * 12345.6789);\\n  }\\n\\n  \" + SAMPLE_1D_SNIPPET + \"\\n  \" + SAMPLE_2D_SNIPPET + \"\\n  \" + SAMPLE_3D_SNIPPET + \"\\n  \" + SAMPLE_4D_SNIPPET + \"\\n\";\nfunction getOutputScalarCoords() {\n    return \"\\n    int getOutputCoords() {\\n      return 0;\\n    }\\n  \";\n}\nfunction getOutput1DCoords(shape, texShape) {\n    if (texShape[0] === 1) {\n        return \"\\n      int getOutputCoords() {\\n        return int(resultUV.x * \" + texShape[1] + \".0);\\n      }\\n    \";\n    }\n    if (texShape[1] === 1) {\n        return \"\\n      int getOutputCoords() {\\n        return int(resultUV.y * \" + texShape[0] + \".0);\\n      }\\n    \";\n    }\n    return \"\\n    int getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\" + texShape[0] + \", \" + texShape[1] + \"));\\n      return resTexRC.x * \" + texShape[1] + \" + resTexRC.y;\\n    }\\n  \";\n}\nfunction getOutput3DCoords(shape, texShape) {\n    var stride0 = shape[1] * shape[2];\n    var stride1 = shape[2];\n    return \"\\n    ivec3 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\" + texShape[0] + \", \" + texShape[1] + \"));\\n      int index = resTexRC.x * \" + texShape[1] + \" + resTexRC.y;\\n      int r = index / \" + stride0 + \";\\n      index -= r * \" + stride0 + \";\\n      int c = index / \" + stride1 + \";\\n      int d = index - c * \" + stride1 + \";\\n      return ivec3(r, c, d);\\n    }\\n  \";\n}\nfunction getOutput4DCoords(shape, texShape) {\n    var stride2 = shape[3];\n    var stride1 = shape[2] * stride2;\n    var stride0 = shape[1] * stride1;\n    return \"\\n    ivec4 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n        vec2(\" + texShape[0] + \", \" + texShape[1] + \"));\\n      int index = resTexRC.x * \" + texShape[1] + \" + resTexRC.y;\\n\\n      int r = index / \" + stride0 + \";\\n      index -= r * \" + stride0 + \";\\n\\n      int c = index / \" + stride1 + \";\\n      index -= c * \" + stride1 + \";\\n\\n      int d = index / \" + stride2 + \";\\n      int d2 = index - d * \" + stride2 + \";\\n\\n      return ivec4(r, c, d, d2);\\n    }\\n  \";\n}\nfunction getOutput2DCoords(shape, texShape) {\n    if (util.arraysEqual(shape, texShape)) {\n        return \"\\n      ivec2 getOutputCoords() {\\n        return ivec2(resultUV.yx * vec2(\" + texShape[0] + \", \" + texShape[1] + \"));\\n      }\\n    \";\n    }\n    if (shape[1] === 1) {\n        return \"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(\" + texShape[0] + \", \" + texShape[1] + \"));\\n        int index = resTexRC.x * \" + texShape[1] + \" + resTexRC.y;\\n        return ivec2(index, 0);\\n      }\\n    \";\n    }\n    if (shape[0] === 1) {\n        return \"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(\" + texShape[0] + \", \" + texShape[1] + \"));\\n        int index = resTexRC.x * \" + texShape[1] + \" + resTexRC.y;\\n        return ivec2(0, index);\\n      }\\n    \";\n    }\n    return \"\\n    ivec2 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\" + texShape[0] + \", \" + texShape[1] + \"));\\n      int index = resTexRC.x * \" + texShape[1] + \" + resTexRC.y;\\n      int r = index / \" + shape[1] + \";\\n      int c = index - r * \" + shape[1] + \";\\n      return ivec2(r, c);\\n    }\\n  \";\n}\nfunction getSamplerScalar(inputInfo) {\n    var texName = inputInfo.name;\n    var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    return \"\\n    float \" + funcName + \"() {\\n      return sample(\" + texName + \", halfCR);\\n    }\\n  \";\n}\nfunction getSampler1D(inputInfo) {\n    var texName = inputInfo.name;\n    var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    return \"\\n    float \" + funcName + \"(int index) {\\n      return \" + funcName + \"Flat(index);\\n    }\\n  \";\n}\nfunction getSampler2D(inputInfo) {\n    var shape = inputInfo.shapeInfo.logicalShape;\n    var texShape = inputInfo.shapeInfo.texShape;\n    var texName = inputInfo.name;\n    var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    var texNumR = texShape[0];\n    var texNumC = texShape[1];\n    if (util.arraysEqual(shape, texShape)) {\n        return \"\\n    float \" + funcName + \"(int row, int col) {\\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(\" + texNumC + \".0, \" + texNumR + \".0);\\n      return sample(\" + texName + \", uv);\\n    }\\n  \";\n    }\n    var _a = util.squeezeShape(shape), newShape = _a.newShape, keptDims = _a.keptDims;\n    var squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n        var newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n        var params = ['row', 'col'];\n        return \"\\n      \" + getSamplerFromInInfo(newInputInfo) + \"\\n      float \" + funcName + \"(int row, int col) {\\n        return \" + funcName + \"(\" + getSqueezedParams(params, keptDims) + \");\\n      }\\n    \";\n    }\n    if (texNumC === 1) {\n        return \"\\n    float \" + funcName + \"(int row, int col) {\\n      int index = row * \" + shape[1] + \" + col;\\n      vec2 uv = vec2(0.5, (float(index) + 0.5) / \" + texNumR + \".0);\\n      return sample(\" + texName + \", uv);\\n    }\\n  \";\n    }\n    if (texNumR === 1) {\n        return \"\\n    float \" + funcName + \"(int row, int col) {\\n      int index = row * \" + shape[1] + \" + col;\\n      vec2 uv = vec2((float(index) + 0.5) / \" + texNumC + \".0, 0.5);\\n      return sample(\" + texName + \", uv);\\n    }\\n  \";\n    }\n    return \"\\n  float \" + funcName + \"(int row, int col) {\\n    vec2 uv = UVfrom2D(\" + texNumR + \", \" + texNumC + \", \" + shape[1] + \", row, col);\\n    return sample(\" + texName + \", uv);\\n  }\\n\";\n}\nfunction getSampler3D(inputInfo) {\n    var texShape = inputInfo.shapeInfo.texShape;\n    var shape = inputInfo.shapeInfo.logicalShape;\n    var texName = inputInfo.name;\n    var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    var texNumR = texShape[0];\n    var texNumC = texShape[1];\n    var stride0 = shape[1] * shape[2];\n    var stride1 = shape[2];\n    var _a = util.squeezeShape(shape), newShape = _a.newShape, keptDims = _a.keptDims;\n    var squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n        var newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n        var params = ['row', 'col', 'depth'];\n        return \"\\n        \" + getSamplerFromInInfo(newInputInfo) + \"\\n        float \" + funcName + \"(int row, int col, int depth) {\\n          return \" + funcName + \"(\" + getSqueezedParams(params, keptDims) + \");\\n        }\\n      \";\n    }\n    if (texNumC === stride0) {\n        return \"\\n        float \" + funcName + \"(int row, int col, int depth) {\\n          int texR = row;\\n          int texC = col * \" + stride1 + \" + depth;\\n          vec2 uv = (vec2(texC, texR) + halfCR) /\\n                     vec2(\" + texNumC + \".0, \" + texNumR + \".0);\\n          return sample(\" + texName + \", uv);\\n        }\\n      \";\n    }\n    if (texNumC === stride1) {\n        return \"\\n    float \" + funcName + \"(int row, int col, int depth) {\\n      int texR = row * \" + shape[1] + \" + col;\\n      int texC = depth;\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\" + texNumC + \".0, \" + texNumR + \".0);\\n      return sample(\" + texName + \", uv);\\n    }\\n  \";\n    }\n    return \"\\n      float \" + funcName + \"(int row, int col, int depth) {\\n        vec2 uv = UVfrom3D(\\n            \" + texNumR + \", \" + texNumC + \", \" + stride0 + \", \" + stride1 + \", row, col, depth);\\n        return sample(\" + texName + \", uv);\\n      }\\n  \";\n}\nfunction getSampler4D(inputInfo) {\n    var shape = inputInfo.shapeInfo.logicalShape;\n    var texShape = inputInfo.shapeInfo.texShape;\n    var texName = inputInfo.name;\n    var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    var texNumR = texShape[0];\n    var texNumC = texShape[1];\n    var stride2 = shape[3];\n    var stride1 = shape[2] * stride2;\n    var stride0 = shape[1] * stride1;\n    var _a = util.squeezeShape(shape), newShape = _a.newShape, keptDims = _a.keptDims;\n    if (newShape.length < shape.length) {\n        var newInputInfo = squeezeInputInfo(inputInfo, newShape);\n        var params = ['row', 'col', 'depth', 'depth2'];\n        return \"\\n      \" + getSamplerFromInInfo(newInputInfo) + \"\\n      float \" + funcName + \"(int row, int col, int depth, int depth2) {\\n        return \" + funcName + \"(\" + getSqueezedParams(params, keptDims) + \");\\n      }\\n    \";\n    }\n    if (texNumC === stride0) {\n        return \"\\n      float \" + funcName + \"(int row, int col, int depth, int depth2) {\\n        int texR = row;\\n        int texC = col * \" + stride1 + \" + depth * \" + stride2 + \" + depth2;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\" + texNumC + \".0, \" + texNumR + \".0);\\n        return sample(\" + texName + \", uv);\\n      }\\n    \";\n    }\n    if (texNumC === stride2) {\n        return \"\\n      float \" + funcName + \"(int row, int col, int depth, int depth2) {\\n        int texR = row * \" + shape[1] * shape[2] + \" + col * \" + shape[2] + \" + depth;\\n        int texC = depth2;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\" + texNumC + \".0, \" + texNumR + \".0);\\n        return sample(\" + texName + \", uv);\\n      }\\n    \";\n    }\n    return \"\\n    float \" + funcName + \"(int row, int col, int depth, int depth2) {\\n      vec2 uv = UVfrom4D(\" + texNumR + \", \" + texNumC + \", \" + stride0 + \", \" + stride1 + \",\\n          \" + stride2 + \", row, col, depth, depth2);\\n      return sample(\" + texName + \", uv);\\n    }\\n  \";\n}\nfunction getSamplerFlat(inputInfo) {\n    var texName = inputInfo.name;\n    var texShape = inputInfo.shapeInfo.texShape;\n    var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1) + 'Flat';\n    var tNumR = texShape[0];\n    var tNumC = texShape[1];\n    if (tNumC === 1 && tNumR === 1) {\n        return \"\\n      float \" + funcName + \"(int index) {\\n        return sample(\" + texName + \", halfCR);\\n      }\\n    \";\n    }\n    if (tNumC === 1) {\n        return \"\\n      float \" + funcName + \"(int index) {\\n        vec2 uv = vec2(0.5, (float(index) + 0.5) / \" + tNumR + \".0);\\n        return sample(\" + texName + \", uv);\\n      }\\n    \";\n    }\n    if (tNumR === 1) {\n        return \"\\n      float \" + funcName + \"(int index) {\\n        vec2 uv = vec2((float(index) + 0.5) / \" + tNumC + \".0, 0.5);\\n        return sample(\" + texName + \", uv);\\n      }\\n    \";\n    }\n    return \"\\n    float \" + funcName + \"(int index) {\\n      vec2 uv = UVfrom1D(\" + tNumR + \", \" + tNumC + \", index);\\n      return sample(\" + texName + \", uv);\\n    }\\n  \";\n}\nfunction getBroadcastOutputCoordsSampler(inputInfo, outShapeInfo, texFuncSnippet, funcName) {\n    var inRank = inputInfo.shapeInfo.logicalShape.length;\n    var outRank = outShapeInfo.logicalShape.length;\n    var type = 'int';\n    if (outRank === 2) {\n        type = 'ivec2';\n    }\n    else if (outRank === 3) {\n        type = 'ivec3';\n    }\n    else if (outRank === 4) {\n        type = 'ivec4';\n    }\n    var broadcastDims = broadcast_util.getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n    var rankDiff = outRank - inRank;\n    var coordsSnippet;\n    if (inRank === 0) {\n        coordsSnippet = '';\n    }\n    else if (outRank < 2 && broadcastDims.length >= 1) {\n        coordsSnippet = 'coords = 0;';\n    }\n    else {\n        coordsSnippet =\n            broadcastDims.map(function (d) { return \"coords[\" + (d + rankDiff) + \"] = 0;\"; }).join('\\n');\n    }\n    var unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n        unpackedCoordsSnippet = 'coords';\n    }\n    else {\n        unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n            .map(function (s, i) { return \"coords[\" + (i + rankDiff) + \"]\"; })\n            .join(', ');\n    }\n    return \"\\n    float \" + funcName + \"() {\\n      \" + type + \" coords = getOutputCoords();\\n      \" + coordsSnippet + \"\\n      return get\" + texFuncSnippet + \"(\" + unpackedCoordsSnippet + \");\\n    }\\n  \";\n}\nfunction getSamplerAtOutputCoords(inputInfo, outShapeInfo, supportsBroadcasting) {\n    var inTexShape = inputInfo.shapeInfo.texShape;\n    var texName = inputInfo.name;\n    var texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n    var funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n    var broadcastDims = broadcast_util.getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n    var inRank = inputInfo.shapeInfo.logicalShape.length;\n    var outRank = outShapeInfo.logicalShape.length;\n    var doBroadcast = supportsBroadcasting && ((outRank > inRank) || broadcastDims.length > 0);\n    var broadcastOverOuter = broadcast_util.broadcastDimsAreOuter(broadcastDims);\n    if (doBroadcast && !broadcastOverOuter) {\n        return getBroadcastOutputCoordsSampler(inputInfo, outShapeInfo, texFuncSnippet, funcName);\n    }\n    var outTexShape = outShapeInfo.texShape;\n    if (util.arraysEqual(inTexShape, outTexShape)) {\n        return \"\\n      float \" + funcName + \"() {\\n        return sample(\" + texName + \", resultUV);\\n      }\\n    \";\n    }\n    var inSize = util.sizeFromShape(inTexShape);\n    var broadcastSnippet = '';\n    if (doBroadcast && broadcastOverOuter) {\n        broadcastSnippet = \"\\n        int mainPart = index / \" + inSize + \";\\n        index -= mainPart * \" + inSize + \";\\n      \";\n    }\n    return \"\\n    float \" + funcName + \"() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\" + outTexShape[0] + \", \" + outTexShape[1] + \"));\\n      int index = resTexRC.x * \" + outTexShape[1] + \" + resTexRC.y;\\n      \" + broadcastSnippet + \"\\n      int texR = index / \" + inTexShape[1] + \";\\n      int texC = index - texR * \" + inTexShape[1] + \";\\n      vec2 uv = (vec2(texC, texR) + halfCR) /\\n                 vec2(\" + inTexShape[1] + \".0, \" + inTexShape[0] + \".0);\\n\\n      return sample(\" + texName + \", uv);\\n    }\\n  \";\n}\nfunction getCoordsDataType(rank) {\n    if (rank <= 1) {\n        return 'int';\n    }\n    else if (rank === 2) {\n        return 'ivec2';\n    }\n    else if (rank === 3) {\n        return 'ivec3';\n    }\n    else if (rank === 4) {\n        return 'ivec4';\n    }\n    else {\n        throw Error(\"GPU for rank \" + rank + \" is not yet supported\");\n    }\n}\nexports.getCoordsDataType = getCoordsDataType;\nfunction squeezeInputInfo(inInfo, squeezedShape) {\n    var newInputInfo = JSON.parse(JSON.stringify(inInfo));\n    newInputInfo.shapeInfo.logicalShape = squeezedShape;\n    return newInputInfo;\n}\nfunction getSqueezedParams(params, keptDims) {\n    return keptDims.map(function (d) { return params[d]; }).join(', ');\n}\n"},"lineCount":306}},"hash":"10ef451d270bd7224c0a84406a95808f","cacheData":{"env":{}}}