{"dependencies":[{"name":"/home/mishig/Desktop/viz/final/package.json","includedInParent":true,"mtime":1522648746056},{"name":"/home/mishig/Desktop/viz/final/node_modules/phaser/package.json","includedInParent":true,"mtime":1521632677000},{"name":"../utils/array/QuickSelect","loc":{"line":7,"column":26}}],"generated":{"js":"/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2018 Photon Storm Ltd.\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\n */\n\nvar quickselect = require('../utils/array/QuickSelect');\r\n\r\n/**\r\n * @classdesc\r\n * RBush is a high-performance JavaScript library for 2D spatial indexing of points and rectangles.\r\n * It's based on an optimized R-tree data structure with bulk insertion support.\r\n *\r\n * Spatial index is a special data structure for points and rectangles that allows you to perform queries like\r\n * \"all items within this bounding box\" very efficiently (e.g. hundreds of times faster than looping over all items).\r\n *\r\n * @class RTree\r\n * @memberOf Phaser.Structs\r\n * @constructor\r\n * @since 3.0.0\r\n */\r\n\r\nfunction rbush (maxEntries, format)\r\n{\r\n    if (!(this instanceof rbush)) return new rbush(maxEntries, format);\r\n\r\n    // max entries in a node is 9 by default; min node fill is 40% for best performance\r\n    this._maxEntries = Math.max(4, maxEntries || 9);\r\n    this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));\r\n\r\n    if (format)\r\n    {\r\n        this._initFormat(format);\r\n    }\r\n\r\n    this.clear();\r\n}\r\n\r\nrbush.prototype = {\r\n\r\n    all: function ()\r\n    {\r\n        return this._all(this.data, []);\r\n    },\r\n\r\n    search: function (bbox)\r\n    {\r\n        var node = this.data,\r\n            result = [],\r\n            toBBox = this.toBBox;\r\n\r\n        if (!intersects(bbox, node)) return result;\r\n\r\n        var nodesToSearch = [],\r\n            i, len, child, childBBox;\r\n\r\n        while (node) {\r\n            for (i = 0, len = node.children.length; i < len; i++) {\r\n\r\n                child = node.children[i];\r\n                childBBox = node.leaf ? toBBox(child) : child;\r\n\r\n                if (intersects(bbox, childBBox)) {\r\n                    if (node.leaf) result.push(child);\r\n                    else if (contains(bbox, childBBox)) this._all(child, result);\r\n                    else nodesToSearch.push(child);\r\n                }\r\n            }\r\n            node = nodesToSearch.pop();\r\n        }\r\n\r\n        return result;\r\n    },\r\n\r\n    collides: function (bbox)\r\n    {\r\n        var node = this.data,\r\n            toBBox = this.toBBox;\r\n\r\n        if (!intersects(bbox, node)) return false;\r\n\r\n        var nodesToSearch = [],\r\n            i, len, child, childBBox;\r\n\r\n        while (node) {\r\n            for (i = 0, len = node.children.length; i < len; i++) {\r\n\r\n                child = node.children[i];\r\n                childBBox = node.leaf ? toBBox(child) : child;\r\n\r\n                if (intersects(bbox, childBBox)) {\r\n                    if (node.leaf || contains(bbox, childBBox)) return true;\r\n                    nodesToSearch.push(child);\r\n                }\r\n            }\r\n            node = nodesToSearch.pop();\r\n        }\r\n\r\n        return false;\r\n    },\r\n\r\n    load: function (data)\r\n    {\r\n        if (!(data && data.length)) return this;\r\n\r\n        if (data.length < this._minEntries) {\r\n            for (var i = 0, len = data.length; i < len; i++) {\r\n                this.insert(data[i]);\r\n            }\r\n            return this;\r\n        }\r\n\r\n        // recursively build the tree with the given data from scratch using OMT algorithm\r\n        var node = this._build(data.slice(), 0, data.length - 1, 0);\r\n\r\n        if (!this.data.children.length) {\r\n            // save as is if tree is empty\r\n            this.data = node;\r\n\r\n        } else if (this.data.height === node.height) {\r\n            // split root if trees have the same height\r\n            this._splitRoot(this.data, node);\r\n\r\n        } else {\r\n            if (this.data.height < node.height) {\r\n                // swap trees if inserted one is bigger\r\n                var tmpNode = this.data;\r\n                this.data = node;\r\n                node = tmpNode;\r\n            }\r\n\r\n            // insert the small tree into the large tree at appropriate level\r\n            this._insert(node, this.data.height - node.height - 1, true);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    insert: function (item)\r\n    {\r\n        if (item) this._insert(item, this.data.height - 1);\r\n        return this;\r\n    },\r\n\r\n    clear: function ()\r\n    {\r\n        this.data = createNode([]);\r\n        return this;\r\n    },\r\n\r\n    remove: function (item, equalsFn)\r\n    {\r\n        if (!item) return this;\r\n\r\n        var node = this.data,\r\n            bbox = this.toBBox(item),\r\n            path = [],\r\n            indexes = [],\r\n            i, parent, index, goingUp;\r\n\r\n        // depth-first iterative tree traversal\r\n        while (node || path.length) {\r\n\r\n            if (!node) { // go up\r\n                node = path.pop();\r\n                parent = path[path.length - 1];\r\n                i = indexes.pop();\r\n                goingUp = true;\r\n            }\r\n\r\n            if (node.leaf) { // check current node\r\n                index = findItem(item, node.children, equalsFn);\r\n\r\n                if (index !== -1) {\r\n                    // item found, remove the item and condense tree upwards\r\n                    node.children.splice(index, 1);\r\n                    path.push(node);\r\n                    this._condense(path);\r\n                    return this;\r\n                }\r\n            }\r\n\r\n            if (!goingUp && !node.leaf && contains(node, bbox)) { // go down\r\n                path.push(node);\r\n                indexes.push(i);\r\n                i = 0;\r\n                parent = node;\r\n                node = node.children[0];\r\n\r\n            } else if (parent) { // go right\r\n                i++;\r\n                node = parent.children[i];\r\n                goingUp = false;\r\n\r\n            } else node = null; // nothing found\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    toBBox: function (item) { return item; },\r\n\r\n    compareMinX: compareNodeMinX,\r\n    compareMinY: compareNodeMinY,\r\n\r\n    toJSON: function () { return this.data; },\r\n\r\n    fromJSON: function (data)\r\n    {\r\n        this.data = data;\r\n        return this;\r\n    },\r\n\r\n    _all: function (node, result)\r\n    {\r\n        var nodesToSearch = [];\r\n        while (node) {\r\n            if (node.leaf) result.push.apply(result, node.children);\r\n            else nodesToSearch.push.apply(nodesToSearch, node.children);\r\n\r\n            node = nodesToSearch.pop();\r\n        }\r\n        return result;\r\n    },\r\n\r\n    _build: function (items, left, right, height)\r\n    {\r\n        var N = right - left + 1,\r\n            M = this._maxEntries,\r\n            node;\r\n\r\n        if (N <= M) {\r\n            // reached leaf level; return leaf\r\n            node = createNode(items.slice(left, right + 1));\r\n            calcBBox(node, this.toBBox);\r\n            return node;\r\n        }\r\n\r\n        if (!height) {\r\n            // target height of the bulk-loaded tree\r\n            height = Math.ceil(Math.log(N) / Math.log(M));\r\n\r\n            // target number of root entries to maximize storage utilization\r\n            M = Math.ceil(N / Math.pow(M, height - 1));\r\n        }\r\n\r\n        node = createNode([]);\r\n        node.leaf = false;\r\n        node.height = height;\r\n\r\n        // split the items into M mostly square tiles\r\n\r\n        var N2 = Math.ceil(N / M),\r\n            N1 = N2 * Math.ceil(Math.sqrt(M)),\r\n            i, j, right2, right3;\r\n\r\n        multiSelect(items, left, right, N1, this.compareMinX);\r\n\r\n        for (i = left; i <= right; i += N1) {\r\n\r\n            right2 = Math.min(i + N1 - 1, right);\r\n\r\n            multiSelect(items, i, right2, N2, this.compareMinY);\r\n\r\n            for (j = i; j <= right2; j += N2) {\r\n\r\n                right3 = Math.min(j + N2 - 1, right2);\r\n\r\n                // pack each entry recursively\r\n                node.children.push(this._build(items, j, right3, height - 1));\r\n            }\r\n        }\r\n\r\n        calcBBox(node, this.toBBox);\r\n\r\n        return node;\r\n    },\r\n\r\n    _chooseSubtree: function (bbox, node, level, path)\r\n    {\r\n        var i, len, child, targetNode, area, enlargement, minArea, minEnlargement;\r\n\r\n        while (true) {\r\n            path.push(node);\r\n\r\n            if (node.leaf || path.length - 1 === level) break;\r\n\r\n            minArea = minEnlargement = Infinity;\r\n\r\n            for (i = 0, len = node.children.length; i < len; i++) {\r\n                child = node.children[i];\r\n                area = bboxArea(child);\r\n                enlargement = enlargedArea(bbox, child) - area;\r\n\r\n                // choose entry with the least area enlargement\r\n                if (enlargement < minEnlargement) {\r\n                    minEnlargement = enlargement;\r\n                    minArea = area < minArea ? area : minArea;\r\n                    targetNode = child;\r\n\r\n                } else if (enlargement === minEnlargement) {\r\n                    // otherwise choose one with the smallest area\r\n                    if (area < minArea) {\r\n                        minArea = area;\r\n                        targetNode = child;\r\n                    }\r\n                }\r\n            }\r\n\r\n            node = targetNode || node.children[0];\r\n        }\r\n\r\n        return node;\r\n    },\r\n\r\n    _insert: function (item, level, isNode)\r\n    {\r\n        var toBBox = this.toBBox,\r\n            bbox = isNode ? item : toBBox(item),\r\n            insertPath = [];\r\n\r\n        // find the best node for accommodating the item, saving all nodes along the path too\r\n        var node = this._chooseSubtree(bbox, this.data, level, insertPath);\r\n\r\n        // put the item into the node\r\n        node.children.push(item);\r\n        extend(node, bbox);\r\n\r\n        // split on node overflow; propagate upwards if necessary\r\n        while (level >= 0) {\r\n            if (insertPath[level].children.length > this._maxEntries) {\r\n                this._split(insertPath, level);\r\n                level--;\r\n            } else break;\r\n        }\r\n\r\n        // adjust bboxes along the insertion path\r\n        this._adjustParentBBoxes(bbox, insertPath, level);\r\n    },\r\n\r\n    // split overflowed node into two\r\n    _split: function (insertPath, level)\r\n    {\r\n        var node = insertPath[level],\r\n            M = node.children.length,\r\n            m = this._minEntries;\r\n\r\n        this._chooseSplitAxis(node, m, M);\r\n\r\n        var splitIndex = this._chooseSplitIndex(node, m, M);\r\n\r\n        var newNode = createNode(node.children.splice(splitIndex, node.children.length - splitIndex));\r\n        newNode.height = node.height;\r\n        newNode.leaf = node.leaf;\r\n\r\n        calcBBox(node, this.toBBox);\r\n        calcBBox(newNode, this.toBBox);\r\n\r\n        if (level) insertPath[level - 1].children.push(newNode);\r\n        else this._splitRoot(node, newNode);\r\n    },\r\n\r\n    _splitRoot: function (node, newNode)\r\n    {\r\n        // split root node\r\n        this.data = createNode([node, newNode]);\r\n        this.data.height = node.height + 1;\r\n        this.data.leaf = false;\r\n        calcBBox(this.data, this.toBBox);\r\n    },\r\n\r\n    _chooseSplitIndex: function (node, m, M)\r\n    {\r\n        var i, bbox1, bbox2, overlap, area, minOverlap, minArea, index;\r\n\r\n        minOverlap = minArea = Infinity;\r\n\r\n        for (i = m; i <= M - m; i++) {\r\n            bbox1 = distBBox(node, 0, i, this.toBBox);\r\n            bbox2 = distBBox(node, i, M, this.toBBox);\r\n\r\n            overlap = intersectionArea(bbox1, bbox2);\r\n            area = bboxArea(bbox1) + bboxArea(bbox2);\r\n\r\n            // choose distribution with minimum overlap\r\n            if (overlap < minOverlap) {\r\n                minOverlap = overlap;\r\n                index = i;\r\n\r\n                minArea = area < minArea ? area : minArea;\r\n\r\n            } else if (overlap === minOverlap) {\r\n                // otherwise choose distribution with minimum area\r\n                if (area < minArea) {\r\n                    minArea = area;\r\n                    index = i;\r\n                }\r\n            }\r\n        }\r\n\r\n        return index;\r\n    },\r\n\r\n    // sorts node children by the best axis for split\r\n    _chooseSplitAxis: function (node, m, M)\r\n    {\r\n        var compareMinX = node.leaf ? this.compareMinX : compareNodeMinX,\r\n            compareMinY = node.leaf ? this.compareMinY : compareNodeMinY,\r\n            xMargin = this._allDistMargin(node, m, M, compareMinX),\r\n            yMargin = this._allDistMargin(node, m, M, compareMinY);\r\n\r\n        // if total distributions margin value is minimal for x, sort by minX,\r\n        // otherwise it's already sorted by minY\r\n        if (xMargin < yMargin) node.children.sort(compareMinX);\r\n    },\r\n\r\n    // total margin of all possible split distributions where each node is at least m full\r\n    _allDistMargin: function (node, m, M, compare)\r\n    {\r\n        node.children.sort(compare);\r\n\r\n        var toBBox = this.toBBox,\r\n            leftBBox = distBBox(node, 0, m, toBBox),\r\n            rightBBox = distBBox(node, M - m, M, toBBox),\r\n            margin = bboxMargin(leftBBox) + bboxMargin(rightBBox),\r\n            i, child;\r\n\r\n        for (i = m; i < M - m; i++) {\r\n            child = node.children[i];\r\n            extend(leftBBox, node.leaf ? toBBox(child) : child);\r\n            margin += bboxMargin(leftBBox);\r\n        }\r\n\r\n        for (i = M - m - 1; i >= m; i--) {\r\n            child = node.children[i];\r\n            extend(rightBBox, node.leaf ? toBBox(child) : child);\r\n            margin += bboxMargin(rightBBox);\r\n        }\r\n\r\n        return margin;\r\n    },\r\n\r\n    _adjustParentBBoxes: function (bbox, path, level)\r\n    {\r\n        // adjust bboxes along the given tree path\r\n        for (var i = level; i >= 0; i--) {\r\n            extend(path[i], bbox);\r\n        }\r\n    },\r\n\r\n    _condense: function (path)\r\n    {\r\n        // go through the path, removing empty nodes and updating bboxes\r\n        for (var i = path.length - 1, siblings; i >= 0; i--) {\r\n            if (path[i].children.length === 0) {\r\n                if (i > 0) {\r\n                    siblings = path[i - 1].children;\r\n                    siblings.splice(siblings.indexOf(path[i]), 1);\r\n\r\n                } else this.clear();\r\n\r\n            } else calcBBox(path[i], this.toBBox);\r\n        }\r\n    },\r\n\r\n    _initFormat: function (format)\r\n    {\r\n        // data format (minX, minY, maxX, maxY accessors)\r\n\r\n        // uses eval-type function compilation instead of just accepting a toBBox function\r\n        // because the algorithms are very sensitive to sorting functions performance,\r\n        // so they should be dead simple and without inner calls\r\n\r\n        var compareArr = ['return a', ' - b', ';'];\r\n\r\n        this.compareMinX = new Function('a', 'b', compareArr.join(format[0]));\r\n        this.compareMinY = new Function('a', 'b', compareArr.join(format[1]));\r\n\r\n        this.toBBox = new Function('a',\r\n            'return {minX: a' + format[0] +\r\n            ', minY: a' + format[1] +\r\n            ', maxX: a' + format[2] +\r\n            ', maxY: a' + format[3] + '};');\r\n    }\r\n};\r\n\r\nfunction findItem (item, items, equalsFn)\r\n{\r\n    if (!equalsFn) return items.indexOf(item);\r\n\r\n    for (var i = 0; i < items.length; i++) {\r\n        if (equalsFn(item, items[i])) return i;\r\n    }\r\n    return -1;\r\n}\r\n\r\n// calculate node's bbox from bboxes of its children\r\nfunction calcBBox (node, toBBox)\r\n{\r\n    distBBox(node, 0, node.children.length, toBBox, node);\r\n}\r\n\r\n// min bounding rectangle of node children from k to p-1\r\nfunction distBBox (node, k, p, toBBox, destNode)\r\n{\r\n    if (!destNode) destNode = createNode(null);\r\n    destNode.minX = Infinity;\r\n    destNode.minY = Infinity;\r\n    destNode.maxX = -Infinity;\r\n    destNode.maxY = -Infinity;\r\n\r\n    for (var i = k, child; i < p; i++) {\r\n        child = node.children[i];\r\n        extend(destNode, node.leaf ? toBBox(child) : child);\r\n    }\r\n\r\n    return destNode;\r\n}\r\n\r\nfunction extend (a, b)\r\n{\r\n    a.minX = Math.min(a.minX, b.minX);\r\n    a.minY = Math.min(a.minY, b.minY);\r\n    a.maxX = Math.max(a.maxX, b.maxX);\r\n    a.maxY = Math.max(a.maxY, b.maxY);\r\n    return a;\r\n}\r\n\r\nfunction compareNodeMinX (a, b) { return a.minX - b.minX; }\r\nfunction compareNodeMinY (a, b) { return a.minY - b.minY; }\r\n\r\nfunction bboxArea (a) { return (a.maxX - a.minX) * (a.maxY - a.minY); }\r\nfunction bboxMargin (a) { return (a.maxX - a.minX) + (a.maxY - a.minY); }\r\n\r\nfunction enlargedArea (a, b)\r\n{\r\n    return (Math.max(b.maxX, a.maxX) - Math.min(b.minX, a.minX)) *\r\n           (Math.max(b.maxY, a.maxY) - Math.min(b.minY, a.minY));\r\n}\r\n\r\nfunction intersectionArea (a, b)\r\n{\r\n    var minX = Math.max(a.minX, b.minX),\r\n        minY = Math.max(a.minY, b.minY),\r\n        maxX = Math.min(a.maxX, b.maxX),\r\n        maxY = Math.min(a.maxY, b.maxY);\r\n\r\n    return Math.max(0, maxX - minX) *\r\n           Math.max(0, maxY - minY);\r\n}\r\n\r\nfunction contains (a, b)\r\n{\r\n    return a.minX <= b.minX &&\r\n           a.minY <= b.minY &&\r\n           b.maxX <= a.maxX &&\r\n           b.maxY <= a.maxY;\r\n}\r\n\r\nfunction intersects (a, b)\r\n{\r\n    return b.minX <= a.maxX &&\r\n           b.minY <= a.maxY &&\r\n           b.maxX >= a.minX &&\r\n           b.maxY >= a.minY;\r\n}\r\n\r\nfunction createNode (children)\r\n{\r\n    return {\r\n        children: children,\r\n        height: 1,\r\n        leaf: true,\r\n        minX: Infinity,\r\n        minY: Infinity,\r\n        maxX: -Infinity,\r\n        maxY: -Infinity\r\n    };\r\n}\r\n\r\n// sort an array so that items come in groups of n unsorted items, with groups sorted between each other;\r\n// combines selection algorithm with binary divide & conquer approach\r\n\r\nfunction multiSelect (arr, left, right, n, compare)\r\n{\r\n    var stack = [left, right],\r\n        mid;\r\n\r\n    while (stack.length)\r\n    {\r\n        right = stack.pop();\r\n        left = stack.pop();\r\n\r\n        if (right - left <= n) continue;\r\n\r\n        mid = left + Math.ceil((right - left) / n / 2) * n;\r\n        quickselect(arr, mid, left, right, compare);\r\n\r\n        stack.push(left, mid, mid, right);\r\n    }\r\n}\r\n\r\nmodule.exports = rbush;\r\n","map":{"mappings":[{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"node_modules/phaser/src/structs/RTree.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}}],"sources":{"node_modules/phaser/src/structs/RTree.js":"/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2018 Photon Storm Ltd.\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\n */\n\nvar quickselect = require('../utils/array/QuickSelect');\r\n\r\n/**\r\n * @classdesc\r\n * RBush is a high-performance JavaScript library for 2D spatial indexing of points and rectangles.\r\n * It's based on an optimized R-tree data structure with bulk insertion support.\r\n *\r\n * Spatial index is a special data structure for points and rectangles that allows you to perform queries like\r\n * \"all items within this bounding box\" very efficiently (e.g. hundreds of times faster than looping over all items).\r\n *\r\n * @class RTree\r\n * @memberOf Phaser.Structs\r\n * @constructor\r\n * @since 3.0.0\r\n */\r\n\r\nfunction rbush (maxEntries, format)\r\n{\r\n    if (!(this instanceof rbush)) return new rbush(maxEntries, format);\r\n\r\n    // max entries in a node is 9 by default; min node fill is 40% for best performance\r\n    this._maxEntries = Math.max(4, maxEntries || 9);\r\n    this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));\r\n\r\n    if (format)\r\n    {\r\n        this._initFormat(format);\r\n    }\r\n\r\n    this.clear();\r\n}\r\n\r\nrbush.prototype = {\r\n\r\n    all: function ()\r\n    {\r\n        return this._all(this.data, []);\r\n    },\r\n\r\n    search: function (bbox)\r\n    {\r\n        var node = this.data,\r\n            result = [],\r\n            toBBox = this.toBBox;\r\n\r\n        if (!intersects(bbox, node)) return result;\r\n\r\n        var nodesToSearch = [],\r\n            i, len, child, childBBox;\r\n\r\n        while (node) {\r\n            for (i = 0, len = node.children.length; i < len; i++) {\r\n\r\n                child = node.children[i];\r\n                childBBox = node.leaf ? toBBox(child) : child;\r\n\r\n                if (intersects(bbox, childBBox)) {\r\n                    if (node.leaf) result.push(child);\r\n                    else if (contains(bbox, childBBox)) this._all(child, result);\r\n                    else nodesToSearch.push(child);\r\n                }\r\n            }\r\n            node = nodesToSearch.pop();\r\n        }\r\n\r\n        return result;\r\n    },\r\n\r\n    collides: function (bbox)\r\n    {\r\n        var node = this.data,\r\n            toBBox = this.toBBox;\r\n\r\n        if (!intersects(bbox, node)) return false;\r\n\r\n        var nodesToSearch = [],\r\n            i, len, child, childBBox;\r\n\r\n        while (node) {\r\n            for (i = 0, len = node.children.length; i < len; i++) {\r\n\r\n                child = node.children[i];\r\n                childBBox = node.leaf ? toBBox(child) : child;\r\n\r\n                if (intersects(bbox, childBBox)) {\r\n                    if (node.leaf || contains(bbox, childBBox)) return true;\r\n                    nodesToSearch.push(child);\r\n                }\r\n            }\r\n            node = nodesToSearch.pop();\r\n        }\r\n\r\n        return false;\r\n    },\r\n\r\n    load: function (data)\r\n    {\r\n        if (!(data && data.length)) return this;\r\n\r\n        if (data.length < this._minEntries) {\r\n            for (var i = 0, len = data.length; i < len; i++) {\r\n                this.insert(data[i]);\r\n            }\r\n            return this;\r\n        }\r\n\r\n        // recursively build the tree with the given data from scratch using OMT algorithm\r\n        var node = this._build(data.slice(), 0, data.length - 1, 0);\r\n\r\n        if (!this.data.children.length) {\r\n            // save as is if tree is empty\r\n            this.data = node;\r\n\r\n        } else if (this.data.height === node.height) {\r\n            // split root if trees have the same height\r\n            this._splitRoot(this.data, node);\r\n\r\n        } else {\r\n            if (this.data.height < node.height) {\r\n                // swap trees if inserted one is bigger\r\n                var tmpNode = this.data;\r\n                this.data = node;\r\n                node = tmpNode;\r\n            }\r\n\r\n            // insert the small tree into the large tree at appropriate level\r\n            this._insert(node, this.data.height - node.height - 1, true);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    insert: function (item)\r\n    {\r\n        if (item) this._insert(item, this.data.height - 1);\r\n        return this;\r\n    },\r\n\r\n    clear: function ()\r\n    {\r\n        this.data = createNode([]);\r\n        return this;\r\n    },\r\n\r\n    remove: function (item, equalsFn)\r\n    {\r\n        if (!item) return this;\r\n\r\n        var node = this.data,\r\n            bbox = this.toBBox(item),\r\n            path = [],\r\n            indexes = [],\r\n            i, parent, index, goingUp;\r\n\r\n        // depth-first iterative tree traversal\r\n        while (node || path.length) {\r\n\r\n            if (!node) { // go up\r\n                node = path.pop();\r\n                parent = path[path.length - 1];\r\n                i = indexes.pop();\r\n                goingUp = true;\r\n            }\r\n\r\n            if (node.leaf) { // check current node\r\n                index = findItem(item, node.children, equalsFn);\r\n\r\n                if (index !== -1) {\r\n                    // item found, remove the item and condense tree upwards\r\n                    node.children.splice(index, 1);\r\n                    path.push(node);\r\n                    this._condense(path);\r\n                    return this;\r\n                }\r\n            }\r\n\r\n            if (!goingUp && !node.leaf && contains(node, bbox)) { // go down\r\n                path.push(node);\r\n                indexes.push(i);\r\n                i = 0;\r\n                parent = node;\r\n                node = node.children[0];\r\n\r\n            } else if (parent) { // go right\r\n                i++;\r\n                node = parent.children[i];\r\n                goingUp = false;\r\n\r\n            } else node = null; // nothing found\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    toBBox: function (item) { return item; },\r\n\r\n    compareMinX: compareNodeMinX,\r\n    compareMinY: compareNodeMinY,\r\n\r\n    toJSON: function () { return this.data; },\r\n\r\n    fromJSON: function (data)\r\n    {\r\n        this.data = data;\r\n        return this;\r\n    },\r\n\r\n    _all: function (node, result)\r\n    {\r\n        var nodesToSearch = [];\r\n        while (node) {\r\n            if (node.leaf) result.push.apply(result, node.children);\r\n            else nodesToSearch.push.apply(nodesToSearch, node.children);\r\n\r\n            node = nodesToSearch.pop();\r\n        }\r\n        return result;\r\n    },\r\n\r\n    _build: function (items, left, right, height)\r\n    {\r\n        var N = right - left + 1,\r\n            M = this._maxEntries,\r\n            node;\r\n\r\n        if (N <= M) {\r\n            // reached leaf level; return leaf\r\n            node = createNode(items.slice(left, right + 1));\r\n            calcBBox(node, this.toBBox);\r\n            return node;\r\n        }\r\n\r\n        if (!height) {\r\n            // target height of the bulk-loaded tree\r\n            height = Math.ceil(Math.log(N) / Math.log(M));\r\n\r\n            // target number of root entries to maximize storage utilization\r\n            M = Math.ceil(N / Math.pow(M, height - 1));\r\n        }\r\n\r\n        node = createNode([]);\r\n        node.leaf = false;\r\n        node.height = height;\r\n\r\n        // split the items into M mostly square tiles\r\n\r\n        var N2 = Math.ceil(N / M),\r\n            N1 = N2 * Math.ceil(Math.sqrt(M)),\r\n            i, j, right2, right3;\r\n\r\n        multiSelect(items, left, right, N1, this.compareMinX);\r\n\r\n        for (i = left; i <= right; i += N1) {\r\n\r\n            right2 = Math.min(i + N1 - 1, right);\r\n\r\n            multiSelect(items, i, right2, N2, this.compareMinY);\r\n\r\n            for (j = i; j <= right2; j += N2) {\r\n\r\n                right3 = Math.min(j + N2 - 1, right2);\r\n\r\n                // pack each entry recursively\r\n                node.children.push(this._build(items, j, right3, height - 1));\r\n            }\r\n        }\r\n\r\n        calcBBox(node, this.toBBox);\r\n\r\n        return node;\r\n    },\r\n\r\n    _chooseSubtree: function (bbox, node, level, path)\r\n    {\r\n        var i, len, child, targetNode, area, enlargement, minArea, minEnlargement;\r\n\r\n        while (true) {\r\n            path.push(node);\r\n\r\n            if (node.leaf || path.length - 1 === level) break;\r\n\r\n            minArea = minEnlargement = Infinity;\r\n\r\n            for (i = 0, len = node.children.length; i < len; i++) {\r\n                child = node.children[i];\r\n                area = bboxArea(child);\r\n                enlargement = enlargedArea(bbox, child) - area;\r\n\r\n                // choose entry with the least area enlargement\r\n                if (enlargement < minEnlargement) {\r\n                    minEnlargement = enlargement;\r\n                    minArea = area < minArea ? area : minArea;\r\n                    targetNode = child;\r\n\r\n                } else if (enlargement === minEnlargement) {\r\n                    // otherwise choose one with the smallest area\r\n                    if (area < minArea) {\r\n                        minArea = area;\r\n                        targetNode = child;\r\n                    }\r\n                }\r\n            }\r\n\r\n            node = targetNode || node.children[0];\r\n        }\r\n\r\n        return node;\r\n    },\r\n\r\n    _insert: function (item, level, isNode)\r\n    {\r\n        var toBBox = this.toBBox,\r\n            bbox = isNode ? item : toBBox(item),\r\n            insertPath = [];\r\n\r\n        // find the best node for accommodating the item, saving all nodes along the path too\r\n        var node = this._chooseSubtree(bbox, this.data, level, insertPath);\r\n\r\n        // put the item into the node\r\n        node.children.push(item);\r\n        extend(node, bbox);\r\n\r\n        // split on node overflow; propagate upwards if necessary\r\n        while (level >= 0) {\r\n            if (insertPath[level].children.length > this._maxEntries) {\r\n                this._split(insertPath, level);\r\n                level--;\r\n            } else break;\r\n        }\r\n\r\n        // adjust bboxes along the insertion path\r\n        this._adjustParentBBoxes(bbox, insertPath, level);\r\n    },\r\n\r\n    // split overflowed node into two\r\n    _split: function (insertPath, level)\r\n    {\r\n        var node = insertPath[level],\r\n            M = node.children.length,\r\n            m = this._minEntries;\r\n\r\n        this._chooseSplitAxis(node, m, M);\r\n\r\n        var splitIndex = this._chooseSplitIndex(node, m, M);\r\n\r\n        var newNode = createNode(node.children.splice(splitIndex, node.children.length - splitIndex));\r\n        newNode.height = node.height;\r\n        newNode.leaf = node.leaf;\r\n\r\n        calcBBox(node, this.toBBox);\r\n        calcBBox(newNode, this.toBBox);\r\n\r\n        if (level) insertPath[level - 1].children.push(newNode);\r\n        else this._splitRoot(node, newNode);\r\n    },\r\n\r\n    _splitRoot: function (node, newNode)\r\n    {\r\n        // split root node\r\n        this.data = createNode([node, newNode]);\r\n        this.data.height = node.height + 1;\r\n        this.data.leaf = false;\r\n        calcBBox(this.data, this.toBBox);\r\n    },\r\n\r\n    _chooseSplitIndex: function (node, m, M)\r\n    {\r\n        var i, bbox1, bbox2, overlap, area, minOverlap, minArea, index;\r\n\r\n        minOverlap = minArea = Infinity;\r\n\r\n        for (i = m; i <= M - m; i++) {\r\n            bbox1 = distBBox(node, 0, i, this.toBBox);\r\n            bbox2 = distBBox(node, i, M, this.toBBox);\r\n\r\n            overlap = intersectionArea(bbox1, bbox2);\r\n            area = bboxArea(bbox1) + bboxArea(bbox2);\r\n\r\n            // choose distribution with minimum overlap\r\n            if (overlap < minOverlap) {\r\n                minOverlap = overlap;\r\n                index = i;\r\n\r\n                minArea = area < minArea ? area : minArea;\r\n\r\n            } else if (overlap === minOverlap) {\r\n                // otherwise choose distribution with minimum area\r\n                if (area < minArea) {\r\n                    minArea = area;\r\n                    index = i;\r\n                }\r\n            }\r\n        }\r\n\r\n        return index;\r\n    },\r\n\r\n    // sorts node children by the best axis for split\r\n    _chooseSplitAxis: function (node, m, M)\r\n    {\r\n        var compareMinX = node.leaf ? this.compareMinX : compareNodeMinX,\r\n            compareMinY = node.leaf ? this.compareMinY : compareNodeMinY,\r\n            xMargin = this._allDistMargin(node, m, M, compareMinX),\r\n            yMargin = this._allDistMargin(node, m, M, compareMinY);\r\n\r\n        // if total distributions margin value is minimal for x, sort by minX,\r\n        // otherwise it's already sorted by minY\r\n        if (xMargin < yMargin) node.children.sort(compareMinX);\r\n    },\r\n\r\n    // total margin of all possible split distributions where each node is at least m full\r\n    _allDistMargin: function (node, m, M, compare)\r\n    {\r\n        node.children.sort(compare);\r\n\r\n        var toBBox = this.toBBox,\r\n            leftBBox = distBBox(node, 0, m, toBBox),\r\n            rightBBox = distBBox(node, M - m, M, toBBox),\r\n            margin = bboxMargin(leftBBox) + bboxMargin(rightBBox),\r\n            i, child;\r\n\r\n        for (i = m; i < M - m; i++) {\r\n            child = node.children[i];\r\n            extend(leftBBox, node.leaf ? toBBox(child) : child);\r\n            margin += bboxMargin(leftBBox);\r\n        }\r\n\r\n        for (i = M - m - 1; i >= m; i--) {\r\n            child = node.children[i];\r\n            extend(rightBBox, node.leaf ? toBBox(child) : child);\r\n            margin += bboxMargin(rightBBox);\r\n        }\r\n\r\n        return margin;\r\n    },\r\n\r\n    _adjustParentBBoxes: function (bbox, path, level)\r\n    {\r\n        // adjust bboxes along the given tree path\r\n        for (var i = level; i >= 0; i--) {\r\n            extend(path[i], bbox);\r\n        }\r\n    },\r\n\r\n    _condense: function (path)\r\n    {\r\n        // go through the path, removing empty nodes and updating bboxes\r\n        for (var i = path.length - 1, siblings; i >= 0; i--) {\r\n            if (path[i].children.length === 0) {\r\n                if (i > 0) {\r\n                    siblings = path[i - 1].children;\r\n                    siblings.splice(siblings.indexOf(path[i]), 1);\r\n\r\n                } else this.clear();\r\n\r\n            } else calcBBox(path[i], this.toBBox);\r\n        }\r\n    },\r\n\r\n    _initFormat: function (format)\r\n    {\r\n        // data format (minX, minY, maxX, maxY accessors)\r\n\r\n        // uses eval-type function compilation instead of just accepting a toBBox function\r\n        // because the algorithms are very sensitive to sorting functions performance,\r\n        // so they should be dead simple and without inner calls\r\n\r\n        var compareArr = ['return a', ' - b', ';'];\r\n\r\n        this.compareMinX = new Function('a', 'b', compareArr.join(format[0]));\r\n        this.compareMinY = new Function('a', 'b', compareArr.join(format[1]));\r\n\r\n        this.toBBox = new Function('a',\r\n            'return {minX: a' + format[0] +\r\n            ', minY: a' + format[1] +\r\n            ', maxX: a' + format[2] +\r\n            ', maxY: a' + format[3] + '};');\r\n    }\r\n};\r\n\r\nfunction findItem (item, items, equalsFn)\r\n{\r\n    if (!equalsFn) return items.indexOf(item);\r\n\r\n    for (var i = 0; i < items.length; i++) {\r\n        if (equalsFn(item, items[i])) return i;\r\n    }\r\n    return -1;\r\n}\r\n\r\n// calculate node's bbox from bboxes of its children\r\nfunction calcBBox (node, toBBox)\r\n{\r\n    distBBox(node, 0, node.children.length, toBBox, node);\r\n}\r\n\r\n// min bounding rectangle of node children from k to p-1\r\nfunction distBBox (node, k, p, toBBox, destNode)\r\n{\r\n    if (!destNode) destNode = createNode(null);\r\n    destNode.minX = Infinity;\r\n    destNode.minY = Infinity;\r\n    destNode.maxX = -Infinity;\r\n    destNode.maxY = -Infinity;\r\n\r\n    for (var i = k, child; i < p; i++) {\r\n        child = node.children[i];\r\n        extend(destNode, node.leaf ? toBBox(child) : child);\r\n    }\r\n\r\n    return destNode;\r\n}\r\n\r\nfunction extend (a, b)\r\n{\r\n    a.minX = Math.min(a.minX, b.minX);\r\n    a.minY = Math.min(a.minY, b.minY);\r\n    a.maxX = Math.max(a.maxX, b.maxX);\r\n    a.maxY = Math.max(a.maxY, b.maxY);\r\n    return a;\r\n}\r\n\r\nfunction compareNodeMinX (a, b) { return a.minX - b.minX; }\r\nfunction compareNodeMinY (a, b) { return a.minY - b.minY; }\r\n\r\nfunction bboxArea (a) { return (a.maxX - a.minX) * (a.maxY - a.minY); }\r\nfunction bboxMargin (a) { return (a.maxX - a.minX) + (a.maxY - a.minY); }\r\n\r\nfunction enlargedArea (a, b)\r\n{\r\n    return (Math.max(b.maxX, a.maxX) - Math.min(b.minX, a.minX)) *\r\n           (Math.max(b.maxY, a.maxY) - Math.min(b.minY, a.minY));\r\n}\r\n\r\nfunction intersectionArea (a, b)\r\n{\r\n    var minX = Math.max(a.minX, b.minX),\r\n        minY = Math.max(a.minY, b.minY),\r\n        maxX = Math.min(a.maxX, b.maxX),\r\n        maxY = Math.min(a.maxY, b.maxY);\r\n\r\n    return Math.max(0, maxX - minX) *\r\n           Math.max(0, maxY - minY);\r\n}\r\n\r\nfunction contains (a, b)\r\n{\r\n    return a.minX <= b.minX &&\r\n           a.minY <= b.minY &&\r\n           b.maxX <= a.maxX &&\r\n           b.maxY <= a.maxY;\r\n}\r\n\r\nfunction intersects (a, b)\r\n{\r\n    return b.minX <= a.maxX &&\r\n           b.minY <= a.maxY &&\r\n           b.maxX >= a.minX &&\r\n           b.maxY >= a.minY;\r\n}\r\n\r\nfunction createNode (children)\r\n{\r\n    return {\r\n        children: children,\r\n        height: 1,\r\n        leaf: true,\r\n        minX: Infinity,\r\n        minY: Infinity,\r\n        maxX: -Infinity,\r\n        maxY: -Infinity\r\n    };\r\n}\r\n\r\n// sort an array so that items come in groups of n unsorted items, with groups sorted between each other;\r\n// combines selection algorithm with binary divide & conquer approach\r\n\r\nfunction multiSelect (arr, left, right, n, compare)\r\n{\r\n    var stack = [left, right],\r\n        mid;\r\n\r\n    while (stack.length)\r\n    {\r\n        right = stack.pop();\r\n        left = stack.pop();\r\n\r\n        if (right - left <= n) continue;\r\n\r\n        mid = left + Math.ceil((right - left) / n / 2) * n;\r\n        quickselect(arr, mid, left, right, compare);\r\n\r\n        stack.push(left, mid, mid, right);\r\n    }\r\n}\r\n\r\nmodule.exports = rbush;\r\n"},"lineCount":604}},"hash":"4ba043d701edda89e9893fc72595e1fa","cacheData":{"env":{}}}