{"dependencies":[{"name":"/home/mishig/Desktop/viz/final/package.json","includedInParent":true,"mtime":1522648746056},{"name":"/home/mishig/Desktop/viz/final/node_modules/phaser/package.json","includedInParent":true,"mtime":1521632677000},{"name":"../utils/Class","loc":{"line":7,"column":20}},{"name":"../math/DegToRad","loc":{"line":8,"column":23}},{"name":"./dynamiclayer/DynamicTilemapLayer.js","loc":{"line":9,"column":34}},{"name":"../utils/object/Extend","loc":{"line":10,"column":21}},{"name":"./Formats","loc":{"line":11,"column":22}},{"name":"./mapdata/LayerData","loc":{"line":12,"column":24}},{"name":"../math/Rotate","loc":{"line":13,"column":21}},{"name":"./staticlayer/StaticTilemapLayer.js","loc":{"line":14,"column":33}},{"name":"./Tile","loc":{"line":15,"column":19}},{"name":"./components","loc":{"line":16,"column":32}},{"name":"./Tileset","loc":{"line":17,"column":22}}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar DegToRad = require('../math/DegToRad');\r\nvar DynamicTilemapLayer = require('./dynamiclayer/DynamicTilemapLayer.js');\r\nvar Extend = require('../utils/object/Extend');\r\nvar Formats = require('./Formats');\r\nvar LayerData = require('./mapdata/LayerData');\r\nvar Rotate = require('../math/Rotate');\r\nvar StaticTilemapLayer = require('./staticlayer/StaticTilemapLayer.js');\r\nvar Tile = require('./Tile');\r\nvar TilemapComponents = require('./components');\r\nvar Tileset = require('./Tileset');\r\n\r\n/**\r\n * @callback TilemapFilterCallback\r\n *\r\n * @param {Phaser.GameObjects.GameObject} value - [description]\r\n * @param {number} index - [description]\r\n * @param {Phaser.GameObjects.GameObject[]} array - [description]\r\n *\r\n * @return {Phaser.GameObjects.GameObject} [description]\r\n */\r\n\r\n/**\r\n * @callback TilemapFindCallback\r\n *\r\n * @param {Phaser.GameObjects.GameObject} value - [description]\r\n * @param {number} index - [description]\r\n * @param {Phaser.GameObjects.GameObject[]} array - [description]\r\n *\r\n * @return {boolean} [description]\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A Tilemap is a container for Tilemap data. This isn't a display object, rather, it holds data\r\n * about the map and allows you to add tilesets and tilemap layers to it. A map can have one or\r\n * more tilemap layers (StaticTilemapLayer or DynamicTilemapLayer), which are the display\r\n * objects that actually render tiles.\r\n *\r\n * The Tilemap data be parsed from a Tiled JSON file, a CSV file or a 2D array. Tiled is a free\r\n * software package specifically for creating tile maps, and is available from:\r\n * http://www.mapeditor.org\r\n *\r\n * A Tilemap has handy methods for getting & manipulating the tiles within a layer. You can only\r\n * use the methods that change tiles (e.g. removeTileAt) on a DynamicTilemapLayer.\r\n *\r\n * Note that all Tilemaps use a base tile size to calculate dimensions from, but that a\r\n * StaticTilemapLayer or DynamicTilemapLayer may have its own unique tile size that overrides\r\n * it.\r\n *\r\n * @class Tilemap\r\n * @memberOf Phaser.Tilemaps\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Tilemap belongs.\r\n * @param {Phaser.Tilemaps.MapData} mapData - A MapData instance containing Tilemap data.\r\n */\r\nvar Tilemap = new Class({\r\n\r\n    initialize:\r\n\r\n    function Tilemap (scene, mapData)\r\n    {\r\n        /**\r\n         * @name Phaser.Tilemaps.Tilemap#scene\r\n         * @type {Phaser.Scene}\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = scene;\r\n\r\n        /**\r\n         * The base width of a tile in pixels. Note that individual layers may have a different tile\r\n         * width.\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#tileWidth\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.tileWidth = mapData.tileWidth;\r\n\r\n        /**\r\n         * The base height of a tile in pixels. Note that individual layers may have a different\r\n         * tile height.\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#tileHeight\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.tileHeight = mapData.tileHeight;\r\n\r\n        /**\r\n         * The width of the map (in tiles).\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#width\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.width = mapData.width;\r\n\r\n        /**\r\n         * The height of the map (in tiles).\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#height\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.height = mapData.height;\r\n\r\n        /**\r\n         * The orientation of the map data (as specified in Tiled), usually 'orthogonal'.\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#orientation\r\n         * @type {string}\r\n         * @since 3.0.0\r\n         */\r\n        this.orientation = mapData.orientation;\r\n\r\n        /**\r\n         * The format of the map data.\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#format\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.format = mapData.format;\r\n\r\n        /**\r\n         * The version of the map data (as specified in Tiled, usually 1).\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#version\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.version = mapData.version;\r\n\r\n        /**\r\n         * Map specific properties as specified in Tiled.\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#properties\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         */\r\n        this.properties = mapData.properties;\r\n\r\n        /**\r\n         * The width of the map in pixels based on width * tileWidth.\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#widthInPixels\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.widthInPixels = mapData.widthInPixels;\r\n\r\n        /**\r\n         * The height of the map in pixels based on height * tileHeight.\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#heightInPixels\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.heightInPixels = mapData.heightInPixels;\r\n\r\n        /**\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#imageCollections\r\n         * @type {Phaser.Tilemaps.ImageCollection[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.imageCollections = mapData.imageCollections;\r\n\r\n        /**\r\n         * An array of Tiled Image Layers.\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#images\r\n         * @type {array}\r\n         * @since 3.0.0\r\n         */\r\n        this.images = mapData.images;\r\n\r\n        /**\r\n         * An array of Tilemap layer data.\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#layers\r\n         * @type {Phaser.Tilemaps.LayerData[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.layers = mapData.layers;\r\n\r\n        /**\r\n         * An array of Tilesets used in the map.\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#tilesets\r\n         * @type {Phaser.Tilemaps.Tileset[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.tilesets = mapData.tilesets;\r\n\r\n        /**\r\n         * An array of ObjectLayer instances parsed from Tiled object layers.\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#objects\r\n         * @type {Phaser.Tilemaps.ObjectLayer[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.objects = mapData.objects;\r\n\r\n        /**\r\n         * The index of the currently selected LayerData object.\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#currentLayerIndex\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.currentLayerIndex = 0;\r\n    },\r\n\r\n    /**\r\n     * Adds an image to the map to be used as a tileset. A single map may use multiple tilesets.\r\n     * Note that the tileset name can be found in the JSON file exported from Tiled, or in the Tiled\r\n     * editor.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#addTilesetImage\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} tilesetName - The name of the tileset as specified in the map data.\r\n     * @param {string} [key] - The key of the Phaser.Cache image used for this tileset. If\r\n     * `undefined` or `null` it will look for an image with a key matching the tileset parameter.\r\n     * @param {integer} [tileWidth] - The width of the tile (in pixels) in the Tileset Image. If not\r\n     * given it will default to the map's tileWidth value, or the tileWidth specified in the Tiled\r\n     * JSON file.\r\n     * @param {integer} [tileHeight] - The height of the tiles (in pixels) in the Tileset Image. If\r\n     * not given it will default to the map's tileHeight value, or the tileHeight specified in the\r\n     * Tiled JSON file.\r\n     * @param {integer} [tileMargin] - The margin around the tiles in the sheet (in pixels). If not\r\n     * specified, it will default to 0 or the value specified in the Tiled JSON file.\r\n     * @param {integer} [tileSpacing] - The spacing between each the tile in the sheet (in pixels).\r\n     * If not specified, it will default to 0 or the value specified in the Tiled JSON file.\r\n     * @param {integer} [gid=0] - If adding multiple tilesets to a blank map, specify the starting\r\n     * GID this set will use here.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tileset} Returns the Tileset object that was created or updated, or null if it\r\n     * failed.\r\n     */\r\n    addTilesetImage: function (tilesetName, key, tileWidth, tileHeight, tileMargin, tileSpacing, gid)\r\n    {\r\n        if (tilesetName === undefined) { return null; }\r\n        if (key === undefined || key === null) { key = tilesetName; }\r\n\r\n        if (!this.scene.sys.textures.exists(key))\r\n        {\r\n            console.warn('Invalid image key given for tileset: \"' + key + '\"');\r\n            return null;\r\n        }\r\n\r\n        var texture = this.scene.sys.textures.get(key);\r\n\r\n        var index = this.getTilesetIndex(tilesetName);\r\n\r\n        if (index === null && this.format === Formats.TILED_JSON)\r\n        {\r\n            console.warn('No data found in the JSON tilemap from Tiled matching the tileset name: \"' + tilesetName + '\"');\r\n            return null;\r\n        }\r\n\r\n        if (this.tilesets[index])\r\n        {\r\n            this.tilesets[index].setTileSize(tileWidth, tileHeight);\r\n            this.tilesets[index].setSpacing(tileMargin, tileSpacing);\r\n            this.tilesets[index].setImage(texture);\r\n            return this.tilesets[index];\r\n        }\r\n\r\n        if (tileWidth === undefined) { tileWidth = this.tileWidth; }\r\n        if (tileHeight === undefined) { tileHeight = this.tileHeight; }\r\n        if (tileMargin === undefined) { tileMargin = 0; }\r\n        if (tileSpacing === undefined) { tileSpacing = 0; }\r\n        if (gid === undefined) { gid = 0; }\r\n\r\n        var tileset = new Tileset(tilesetName, gid, tileWidth, tileHeight, tileMargin, tileSpacing);\r\n        tileset.setImage(texture);\r\n        this.tilesets.push(tileset);\r\n\r\n        return tileset;\r\n    },\r\n\r\n    /**\r\n     * Turns the StaticTilemapLayer associated with the given layer into a DynamicTilemapLayer. If\r\n     * no layer specified, the map's current layer is used. This is useful if you want to manipulate\r\n     * a map at the start of a scene, but then make it non-manipulable and optimize it for speed.\r\n     * Note: the DynamicTilemapLayer passed in is destroyed, so make sure to store the value\r\n     * returned from this method if you want to manipulate the new StaticTilemapLayer.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#convertLayerToStatic\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer)} [layer] - The name of the layer from Tiled, the\r\n     * index of the layer in the map, or a DynamicTilemapLayer.\r\n     *\r\n     * @return {?Phaser.Tilemaps.StaticTilemapLayer} Returns the new layer that was created, or null if it\r\n     * failed.\r\n     */\r\n    convertLayerToStatic: function (layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        var dynamicLayer = layer.tilemapLayer;\r\n\r\n        if (!dynamicLayer || !(dynamicLayer instanceof DynamicTilemapLayer))\r\n        {\r\n            return null;\r\n        }\r\n\r\n        var staticLayer = new StaticTilemapLayer(\r\n            dynamicLayer.scene,\r\n            dynamicLayer.tilemap,\r\n            dynamicLayer.layerIndex,\r\n            dynamicLayer.tileset,\r\n            dynamicLayer.x,\r\n            dynamicLayer.y\r\n        );\r\n\r\n        this.scene.sys.displayList.add(staticLayer);\r\n\r\n        dynamicLayer.destroy();\r\n\r\n        return staticLayer;\r\n    },\r\n\r\n    /**\r\n     * See component documentation. If no layer specified, the map's current layer is used. This\r\n     * cannot be applied to StaticTilemapLayers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#copy\r\n     * @since 3.0.0\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Returns this, or null if the layer given was invalid.\r\n     */\r\n    copy: function (srcTileX, srcTileY, width, height, destTileX, destTileY, recalculateFaces, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (this._isStaticCall(layer, 'copy')) { return this; }\r\n\r\n        if (layer !== null)\r\n        {\r\n            TilemapComponents.Copy(\r\n                srcTileX, srcTileY,\r\n                width, height,\r\n                destTileX, destTileY,\r\n                recalculateFaces, layer\r\n            );\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Creates a new and empty DynamicTilemapLayer. The currently selected layer in the map is set\r\n     * to this new layer.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#createBlankDynamicLayer\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} name - The name of this layer. Must be unique within the map.\r\n     * @param {Phaser.Tilemaps.Tileset} tileset - The tileset the new layer will use.\r\n     * @param {integer} width - The width of the layer in tiles. If not specified, it will default\r\n     * to the map's width.\r\n     * @param {integer} height - The height of the layer in tiles. If not specified, it will default\r\n     * to the map's height.\r\n     * @param {integer} tileWidth - The width of the tiles the layer uses for calculations. If not\r\n     * specified, it will default to the map's tileWidth.\r\n     * @param {integer} tileHeight - The height of the tiles the layer uses for calculations. If not\r\n     * specified, it will default to the map's tileHeight.\r\n     * @return {?Phaser.Tilemaps.DynamicTilemapLayer} Returns the new layer was created, or null if it failed.\r\n     */\r\n    createBlankDynamicLayer: function (name, tileset, x, y, width, height, tileWidth, tileHeight)\r\n    {\r\n        if (tileWidth === undefined) { tileWidth = tileset.tileWidth; }\r\n        if (tileHeight === undefined) { tileHeight = tileset.tileHeight; }\r\n        if (width === undefined) { width = this.width; }\r\n        if (height === undefined) { height = this.height; }\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n\r\n        var index = this.getLayerIndex(name);\r\n\r\n        if (index !== null)\r\n        {\r\n            console.warn('Cannot create blank layer: layer with matching name already exists ' + name);\r\n            return null;\r\n        }\r\n\r\n        var layerData = new LayerData({\r\n            name: name,\r\n            tileWidth: tileWidth,\r\n            tileHeight: tileHeight,\r\n            width: width,\r\n            height: height\r\n        });\r\n\r\n        var row;\r\n\r\n        for (var tileY = 0; tileY < height; tileY++)\r\n        {\r\n            row = [];\r\n\r\n            for (var tileX = 0; tileX < width; tileX++)\r\n            {\r\n                row.push(new Tile(layerData, -1, tileX, tileY, tileWidth, tileHeight, this.tileWidth, this.tileHeight));\r\n            }\r\n\r\n            layerData.data.push(row);\r\n        }\r\n\r\n        this.layers.push(layerData);\r\n        this.currentLayerIndex = this.layers.length - 1;\r\n\r\n        var dynamicLayer = new DynamicTilemapLayer(this.scene, this, this.currentLayerIndex, tileset, x, y);\r\n        this.scene.sys.displayList.add(dynamicLayer);\r\n\r\n        return dynamicLayer;\r\n    },\r\n\r\n    /**\r\n     * Creates a new DynamicTilemapLayer that renders the LayerData associated with the given\r\n     * `layerID`. The currently selected layer in the map is set to this new layer.\r\n     *\r\n     * The `layerID` is important. If you've created your map in Tiled then you can get this by\r\n     * looking in Tiled and looking at the layer name. Or you can open the JSON file it exports and\r\n     * look at the layers[].name value. Either way it must match.\r\n     *\r\n     * Unlike a static layer, a dynamic layer can be modified. See DynamicTilemapLayer for more\r\n     * information.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#createDynamicLayer\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|string)} layerID - The layer array index value, or if a string is given, the\r\n     * layer name from Tiled.\r\n     * @param {Phaser.Tilemaps.Tileset} tileset - The tileset the new layer will use.\r\n     * @param {number} x - The x position to place the layer in the world. If not specified, it will\r\n     * default to the layer offset from Tiled or 0.\r\n     * @param {number} y - The y position to place the layer in the world. If not specified, it will\r\n     * default to the layer offset from Tiled or 0.\r\n     *\r\n     * @return {?Phaser.Tilemaps.DynamicTilemapLayer} Returns the new layer was created, or null if it failed.\r\n     */\r\n    createDynamicLayer: function (layerID, tileset, x, y)\r\n    {\r\n        var index = this.getLayerIndex(layerID);\r\n\r\n        if (index === null)\r\n        {\r\n            console.warn('Cannot create tilemap layer, invalid layer ID given: ' + layerID);\r\n            return null;\r\n        }\r\n\r\n        var layerData = this.layers[index];\r\n\r\n        // Check for an associated static or dynamic tilemap layer\r\n        if (layerData.tilemapLayer)\r\n        {\r\n            console.warn('Cannot create dynamic tilemap layer since a static or dynamic tilemap layer exists for layer ID:' + layerID);\r\n            return null;\r\n        }\r\n\r\n        this.currentLayerIndex = index;\r\n\r\n        // Make sure that all the LayerData & the tiles have the correct tile size. They usually\r\n        // are, but wouldn't match if you try to load a 2x or 4x res tileset when the map was made\r\n        // with a 1x res tileset.\r\n        if (layerData.tileWidth !== tileset.tileWidth || layerData.tileHeight !== tileset.tileHeight)\r\n        {\r\n            this.setLayerTileSize(tileset.tileWidth, tileset.tileHeight, index);\r\n        }\r\n\r\n        // Default the x/y position to match Tiled layer offset, if it exists.\r\n        if (x === undefined && this.layers[index].x) { x = this.layers[index].x; }\r\n        if (y === undefined && this.layers[index].y) { y = this.layers[index].y; }\r\n\r\n        var layer = new DynamicTilemapLayer(this.scene, this, index, tileset, x, y);\r\n        this.scene.sys.displayList.add(layer);\r\n\r\n        return layer;\r\n    },\r\n\r\n    /**\r\n     * Creates a Sprite for every object matching the given gid in the map data. All properties from\r\n     * the map data objectgroup are copied into the `spriteConfig`, so you can use this as an easy\r\n     * way to configure Sprite properties from within the map editor. For example giving an object a\r\n     * property of alpha: 0.5 in the map editor will duplicate that when the Sprite is created.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#createFromObjects\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} name - The name of the object layer (from Tiled) to create Sprites from.\r\n     * @param {(integer|string)} id - Either the id (object), gid (tile object) or name (object or\r\n     * tile object) from Tiled. Ids are unique in Tiled, but a gid is shared by all tile objects\r\n     * with the same graphic. The same name can be used on multiple objects.\r\n     * @param {object} spriteConfig - The config object to pass into the Sprite creator (i.e.\r\n     * scene.make.sprite).\r\n     * @param {Phaser.Scene} [scene=the scene the map is within] - The Scene to create the Sprites within.\r\n     *\r\n     * @return {Phaser.GameObjects.Sprite[]} An array of the Sprites that were created.\r\n     */\r\n    createFromObjects: function (name, id, spriteConfig, scene)\r\n    {\r\n        if (spriteConfig === undefined) { spriteConfig = {}; }\r\n        if (scene === undefined) { scene = this.scene; }\r\n\r\n        var objectLayer = this.getObjectLayer(name);\r\n        if (!objectLayer)\r\n        {\r\n            console.warn('Cannot create from object. Invalid objectgroup name given: ' + name);\r\n            return;\r\n        }\r\n\r\n        var objects = objectLayer.objects;\r\n        var sprites = [];\r\n\r\n        for (var i = 0; i < objects.length; i++)\r\n        {\r\n            var found = false;\r\n            var obj = objects[i];\r\n\r\n            if (obj.gid !== undefined && typeof id === 'number' && obj.gid === id ||\r\n                obj.id !== undefined && typeof id === 'number' && obj.id === id ||\r\n                obj.name !== undefined && typeof id === 'string' && obj.name === id)\r\n            {\r\n                found = true;\r\n            }\r\n\r\n            if (found)\r\n            {\r\n                var config = Extend({}, spriteConfig, obj.properties);\r\n\r\n                config.x = obj.x;\r\n                config.y = obj.y;\r\n\r\n                var sprite = this.scene.make.sprite(config);\r\n\r\n                sprite.name = obj.name;\r\n\r\n                if (obj.width) { sprite.displayWidth = obj.width; }\r\n                if (obj.height) { sprite.displayHeight = obj.height; }\r\n\r\n                // Origin is (0, 1) in Tiled, so find the offset that matches the Sprite's origin.\r\n                var offset = {\r\n                    x: sprite.originX * sprite.displayWidth,\r\n                    y: (sprite.originY - 1) * sprite.displayHeight\r\n                };\r\n\r\n                // If the object is rotated, then the origin offset also needs to be rotated.\r\n                if (obj.rotation)\r\n                {\r\n                    var angle = DegToRad(obj.rotation);\r\n                    Rotate(offset, angle);\r\n                    sprite.rotation = angle;\r\n                }\r\n\r\n                sprite.x += offset.x;\r\n                sprite.y += offset.y;\r\n\r\n                if (obj.flippedHorizontal !== undefined || obj.flippedVertical !== undefined)\r\n                {\r\n                    sprite.setFlip(obj.flippedHorizontal, obj.flippedVertical);\r\n                }\r\n\r\n                if (!obj.visible) { sprite.visible = false; }\r\n\r\n                sprites.push(sprite);\r\n            }\r\n        }\r\n\r\n        return sprites;\r\n    },\r\n\r\n    /**\r\n     * Creates a Sprite for every object matching the given tile indexes in the layer. You can\r\n     * optionally specify if each tile will be replaced with a new tile after the Sprite has been\r\n     * created. This is useful if you want to lay down special tiles in a level that are converted to\r\n     * Sprites, but want to replace the tile itself with a floor tile or similar once converted.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#createFromTiles\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|array)} indexes - The tile index, or array of indexes, to create Sprites from.\r\n     * @param {(integer|array)} replacements - The tile index, or array of indexes, to change a converted\r\n     * tile to. Set to `null` to leave the tiles unchanged. If an array is given, it is assumed to be a\r\n     * one-to-one mapping with the indexes array.\r\n     * @param {object} spriteConfig - The config object to pass into the Sprite creator (i.e.\r\n     * scene.make.sprite).\r\n     * @param {Phaser.Scene} [scene=scene the map is within] - The Scene to create the Sprites within.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when determining the world XY\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.GameObjects.Sprite[]} Returns an array of Tiles, or null if the layer given was invalid.\r\n     */\r\n    createFromTiles: function (indexes, replacements, spriteConfig, scene, camera, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.CreateFromTiles(indexes, replacements, spriteConfig, scene, camera, layer);\r\n    },\r\n\r\n    /**\r\n     * Creates a new StaticTilemapLayer that renders the LayerData associated with the given\r\n     * `layerID`. The currently selected layer in the map is set to this new layer.\r\n     *\r\n     * The `layerID` is important. If you've created your map in Tiled then you can get this by\r\n     * looking in Tiled and looking at the layer name. Or you can open the JSON file it exports and\r\n     * look at the layers[].name value. Either way it must match.\r\n     *\r\n     * It's important to remember that a static layer cannot be modified. See StaticTilemapLayer for\r\n     * more information.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#createStaticLayer\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|string)} layerID - The layer array index value, or if a string is given, the\r\n     * layer name from Tiled.\r\n     * @param {Phaser.Tilemaps.Tileset} tileset - The tileset the new layer will use.\r\n     * @param {number} x - The x position to place the layer in the world. If not specified, it will\r\n     * default to the layer offset from Tiled or 0.\r\n     * @param {number} y - The y position to place the layer in the world. If not specified, it will\r\n     * default to the layer offset from Tiled or 0.\r\n     *\r\n     * @return {?Phaser.Tilemaps.StaticTilemapLayer} Returns the new layer was created, or null if it failed.\r\n     */\r\n    createStaticLayer: function (layerID, tileset, x, y)\r\n    {\r\n        var index = this.getLayerIndex(layerID);\r\n\r\n        if (index === null)\r\n        {\r\n            console.warn('Cannot create tilemap layer, invalid layer ID given: ' + layerID);\r\n            return null;\r\n        }\r\n\r\n        var layerData = this.layers[index];\r\n\r\n        // Check for an associated static or dynamic tilemap layer\r\n        if (layerData.tilemapLayer)\r\n        {\r\n            console.warn('Cannot create static tilemap layer since a static or dynamic tilemap layer exists for layer ID:' + layerID);\r\n            return null;\r\n        }\r\n\r\n        this.currentLayerIndex = index;\r\n\r\n        // Make sure that all the LayerData & the tiles have the correct tile size. They usually\r\n        // are, but wouldn't match if you try to load a 2x or 4x res tileset when the map was made\r\n        // with a 1x res tileset.\r\n        if (layerData.tileWidth !== tileset.tileWidth || layerData.tileHeight !== tileset.tileHeight)\r\n        {\r\n            this.setLayerTileSize(tileset.tileWidth, tileset.tileHeight, index);\r\n        }\r\n\r\n        // Default the x/y position to match Tiled layer offset, if it exists.\r\n        if (x === undefined && this.layers[index].x) { x = this.layers[index].x; }\r\n        if (y === undefined && this.layers[index].y) { y = this.layers[index].y; }\r\n\r\n        var layer = new StaticTilemapLayer(this.scene, this, index, tileset, x, y);\r\n        this.scene.sys.displayList.add(layer);\r\n\r\n        return layer;\r\n    },\r\n\r\n    /**\r\n     * Removes all layer data from this Tilemap and nulls the scene reference. This will destroy any\r\n     * StaticTilemapLayers or DynamicTilemapLayers that have been linked to LayerData.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.removeAllLayers();\r\n        this.tilesets.length = 0;\r\n        this.objects.length = 0;\r\n        this.scene = undefined;\r\n    },\r\n\r\n    /**\r\n     * Sets the tiles in the given rectangular area (in tile coordinates) of the layer with the\r\n     * specified index. Tiles will be set to collide if the given index is a colliding index.\r\n     * Collision information in the region will be recalculated.\r\n     *\r\n     * If no layer specified, the map's current layer is used.\r\n     * This cannot be applied to StaticTilemapLayers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#fill\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} index - [description]\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {boolean} [recalculateFaces=true] - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Returns this, or null if the layer given was invalid.\r\n     */\r\n    fill: function (index, tileX, tileY, width, height, recalculateFaces, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (this._isStaticCall(layer, 'fill')) { return this; }\r\n\r\n        if (layer !== null)\r\n        {\r\n            TilemapComponents.Fill(index, tileX, tileY, width, height, recalculateFaces, layer);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * For each object in the given object layer, run the given filter callback function. Any\r\n     * objects that pass the filter test (i.e. where the callback returns true) will returned as a\r\n     * new array. Similar to Array.prototype.Filter in vanilla JS.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#filterObjects\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Tilemaps.ObjectLayer|string)} [objectLayer] - The name of an object layer (from Tiled) or an\r\n     * ObjectLayer instance.\r\n     * @param {TilemapFilterCallback} callback - The callback. Each object in the given area will be passed to\r\n     * this callback as the first and only parameter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     *\r\n     * @return {?Phaser.GameObjects.GameObject[]} An array of object that match the search, or null if the objectLayer\r\n     * given was invalid.\r\n     */\r\n    filterObjects: function (objectLayer, callback, context)\r\n    {\r\n        if (typeof objectLayer === 'string')\r\n        {\r\n            var name = objectLayer;\r\n\r\n            objectLayer = this.getObjectLayer(objectLayer);\r\n\r\n            if (!objectLayer)\r\n            {\r\n                console.warn('No object layer found with the name: ' + name);\r\n                return null;\r\n            }\r\n        }\r\n\r\n        return objectLayer.objects.filter(callback, context);\r\n    },\r\n\r\n    /**\r\n     * For each tile in the given rectangular area (in tile coordinates) of the layer, run the given\r\n     * filter callback function. Any tiles that pass the filter test (i.e. where the callback returns\r\n     * true) will returned as a new array. Similar to Array.prototype.Filter in vanilla JS.\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#filterTiles\r\n     * @since 3.0.0\r\n     *\r\n     * @param {function} callback - The callback. Each tile in the given area will be passed to this\r\n     * callback as the first and only parameter. The callback should return true for tiles that pass the\r\n     * filter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have\r\n     * -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide\r\n     * on at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that\r\n     * have at least one interesting face.\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile[]} Returns an array of Tiles, or null if the layer given was invalid.\r\n     */\r\n    filterTiles: function (callback, context, tileX, tileY, width, height, filteringOptions, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.FilterTiles(callback, context, tileX, tileY, width, height, filteringOptions, layer);\r\n    },\r\n\r\n    /**\r\n     * Searches the entire map layer for the first tile matching the given index, then returns that Tile\r\n     * object. If no match is found, it returns null. The search starts from the top-left tile and\r\n     * continues horizontally until it hits the end of the row, then it drops down to the next column.\r\n     * If the reverse boolean is true, it scans starting from the bottom-right corner traveling up to\r\n     * the top-left.\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#findByIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} index - The tile index value to search for.\r\n     * @param {integer} [skip=0] - The number of times to skip a matching tile before returning.\r\n     * @param {boolean} [reverse=false] - If true it will scan the layer in reverse, starting at the\r\n     * bottom-right. Otherwise it scans from the top-left.\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile} Returns a Tiles, or null if the layer given was invalid.\r\n     */\r\n    findByIndex: function (findIndex, skip, reverse, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.FindByIndex(findIndex, skip, reverse, layer);\r\n    },\r\n\r\n    /**\r\n     * Find the first object in the given object layer that satisfies the provided testing function.\r\n     * I.e. finds the first object for which `callback` returns true. Similar to\r\n     * Array.prototype.find in vanilla JS.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#findObject\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Tilemaps.ObjectLayer|string)} [objectLayer] - The name of an object layer (from Tiled) or an\r\n     * ObjectLayer instance.\r\n     * @param {TilemapFindCallback} callback - The callback. Each object in the given area will be passed to\r\n     * this callback as the first and only parameter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     *\r\n     * @return {?Phaser.GameObjects.GameObject} An object that matches the search, or null if no object found\r\n     */\r\n    findObject: function (objectLayer, callback, context)\r\n    {\r\n        if (typeof objectLayer === 'string')\r\n        {\r\n            var name = objectLayer;\r\n\r\n            objectLayer = this.getObjectLayer(objectLayer);\r\n\r\n            if (!objectLayer)\r\n            {\r\n                console.warn('No object layer found with the name: ' + name);\r\n                return null;\r\n            }\r\n        }\r\n\r\n        return objectLayer.objects.find(callback, context) || null;\r\n    },\r\n\r\n    /**\r\n     * Find the first tile in the given rectangular area (in tile coordinates) of the layer that\r\n     * satisfies the provided testing function. I.e. finds the first tile for which `callback` returns\r\n     * true. Similar to Array.prototype.find in vanilla JS.\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#findTile\r\n     * @since 3.0.0\r\n     *\r\n     * @param {FindTileCallback} callback - The callback. Each tile in the given area will be passed to this\r\n     * callback as the first and only parameter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have\r\n     * -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide\r\n     * on at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that\r\n     * have at least one interesting face.\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile} Returns a Tiles, or null if the layer given was invalid.\r\n     */\r\n    findTile: function (callback, context, tileX, tileY, width, height, filteringOptions, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.FindTile(callback, context, tileX, tileY, width, height, filteringOptions, layer);\r\n    },\r\n\r\n    /**\r\n     * For each tile in the given rectangular area (in tile coordinates) of the layer, run the given\r\n     * callback. Similar to Array.prototype.forEach in vanilla JS.\r\n     *\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#forEachTile\r\n     * @since 3.0.0\r\n     *\r\n     * @param {EachTileCallback} callback - The callback. Each tile in the given area will be passed to this\r\n     * callback as the first and only parameter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have\r\n     * -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide\r\n     * on at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that\r\n     * have at least one interesting face.\r\n     * @param {LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Returns this, or null if the layer given was invalid.\r\n     */\r\n    forEachTile: function (callback, context, tileX, tileY, width, height, filteringOptions, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer !== null)\r\n        {\r\n            TilemapComponents.ForEachTile(callback, context, tileX, tileY, width, height, filteringOptions, layer);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Gets the image layer index based on its name.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#getImageIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} name - The name of the image to get.\r\n     *\r\n     * @return {integer} The index of the image in this tilemap, or null if not found.\r\n     */\r\n    getImageIndex: function (name)\r\n    {\r\n        return this.getIndex(this.images, name);\r\n    },\r\n\r\n    /**\r\n     * Internally used. Returns the index of the object in one of the Tilemaps arrays whose name\r\n     * property matches the given `name`.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#getIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {array} location - The Tilemap array to search.\r\n     * @param {string} name - The name of the array element to get.\r\n     *\r\n     * @return {number} The index of the element in the array, or null if not found.\r\n     */\r\n    getIndex: function (location, name)\r\n    {\r\n        for (var i = 0; i < location.length; i++)\r\n        {\r\n            if (location[i].name === name)\r\n            {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    },\r\n\r\n    /**\r\n     * Gets the LayerData from this.layers that is associated with `layer`, or null if an invalid\r\n     * `layer` is given.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#getLayer\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The name of the\r\n     * layer from Tiled, the index of the layer in the map, a DynamicTilemapLayer or a\r\n     * StaticTilemapLayer. If not given will default to the maps current layer index.\r\n     *\r\n     * @return {Phaser.Tilemaps.LayerData} The corresponding LayerData within this.layers.\r\n     */\r\n    getLayer: function (layer)\r\n    {\r\n        var index = this.getLayerIndex(layer);\r\n\r\n        return index !== null ? this.layers[index] : null;\r\n    },\r\n\r\n    /**\r\n     * Gets the ObjectLayer from this.objects that has the given `name`, or null if no ObjectLayer\r\n     * is found with that name.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#getObjectLayer\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} [name] - The name of the object layer from Tiled.\r\n     *\r\n     * @return {?Phaser.Tilemaps.ObjectLayer} The corresponding ObjectLayer within this.objects or null.\r\n     */\r\n    getObjectLayer: function (name)\r\n    {\r\n        var index = this.getIndex(this.objects, name);\r\n\r\n        return index !== null ? this.objects[index] : null;\r\n    },\r\n\r\n    /**\r\n     * Gets the LayerData index of the given `layer` within this.layers, or null if an invalid\r\n     * `layer` is given.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#getLayerIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The name of the\r\n     * layer from Tiled, the index of the layer in the map, a DynamicTilemapLayer or a\r\n     * StaticTilemapLayer. If not given will default to the map's current layer index.\r\n     *\r\n     * @return {integer} The LayerData index within this.layers.\r\n     */\r\n    getLayerIndex: function (layer)\r\n    {\r\n        if (layer === undefined)\r\n        {\r\n            return this.currentLayerIndex;\r\n        }\r\n        else if (typeof layer === 'string')\r\n        {\r\n            return this.getLayerIndexByName(layer);\r\n        }\r\n        else if (typeof layer === 'number' && layer < this.layers.length)\r\n        {\r\n            return layer;\r\n        }\r\n        else if (layer instanceof StaticTilemapLayer || layer instanceof DynamicTilemapLayer)\r\n        {\r\n            return layer.layerIndex;\r\n        }\r\n        else\r\n        {\r\n            return null;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Gets the index of the LayerData within this.layers that has the given `name`, or null if an\r\n     * invalid `name` is given.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#getLayerIndexByName\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} name - The name of the layer to get.\r\n     *\r\n     * @return {integer} The LayerData index within this.layers.\r\n     */\r\n    getLayerIndexByName: function (name)\r\n    {\r\n        return this.getIndex(this.layers, name);\r\n    },\r\n\r\n    /**\r\n     * Gets a tile at the given tile coordinates from the given layer.\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#getTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - X position to get the tile from (given in tile units, not pixels).\r\n     * @param {integer} tileY - Y position to get the tile from (given in tile units, not pixels).\r\n     * @param {boolean} [nonNull=false] - If true getTile won't return null for empty tiles, but a Tile\r\n     * object with an index of -1.\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile} Returns a Tile, or null if the layer given was invalid.\r\n     */\r\n    getTileAt: function (tileX, tileY, nonNull, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.GetTileAt(tileX, tileY, nonNull, layer);\r\n    },\r\n\r\n    /**\r\n     * Gets a tile at the given world coordinates from the given layer.\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#getTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - X position to get the tile from (given in pixels)\r\n     * @param {number} worldY - Y position to get the tile from (given in pixels)\r\n     * @param {boolean} [nonNull=false] - If true, function won't return null for empty tiles, but a Tile\r\n     * object with an index of -1.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile} Returns a Tile, or null if the layer given was invalid.\r\n     */\r\n    getTileAtWorldXY: function (worldX, worldY, nonNull, camera, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.GetTileAtWorldXY(worldX, worldY, nonNull, camera, layer);\r\n    },\r\n\r\n    /**\r\n     * Gets the tiles in the given rectangular area (in tile coordinates) of the layer.\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#getTilesWithin\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have\r\n     * -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on\r\n     * at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that\r\n     * have at least one interesting face.\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile[]} Returns an array of Tiles, or null if the layer given was invalid.\r\n     */\r\n    getTilesWithin: function (tileX, tileY, width, height, filteringOptions, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.GetTilesWithin(tileX, tileY, width, height, filteringOptions, layer);\r\n    },\r\n\r\n    /**\r\n     * Gets the tiles that overlap with the given shape in the given layer. The shape must be a Circle,\r\n     * Line, Rectangle or Triangle. The shape should be in world coordinates.\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#getTilesWithinShape\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Geom.Circle|Phaser.Geom.Line|Phaser.Geom.Rectangle|Phaser.Geom.Triangle)} shape - A shape in world (pixel) coordinates\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have\r\n     * -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on\r\n     * at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that\r\n     * have at least one interesting face.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile[]} Returns an array of Tiles, or null if the layer given was invalid.\r\n     */\r\n    getTilesWithinShape: function (shape, filteringOptions, camera, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.GetTilesWithinShape(shape, filteringOptions, camera, layer);\r\n    },\r\n\r\n    /**\r\n     * Gets the tiles in the given rectangular area (in world coordinates) of the layer.\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#getTilesWithinWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - [description]\r\n     * @param {number} worldY - [description]\r\n     * @param {number} width - [description]\r\n     * @param {number} height - [description]\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have\r\n     * -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on\r\n     * at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that\r\n     * have at least one interesting face.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile[]} Returns an array of Tiles, or null if the layer given was invalid.\r\n     */\r\n    getTilesWithinWorldXY: function (worldX, worldY, width, height, filteringOptions, camera, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.GetTilesWithinWorldXY(worldX, worldY, width, height, filteringOptions, camera, layer);\r\n    },\r\n\r\n    /**\r\n     * Gets the index of the Tileset within this.tilesets that has the given `name`, or null if an\r\n     * invalid `name` is given.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#getTilesetIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} name - The name of the Tileset to get.\r\n     *\r\n     * @return {integer} The Tileset index within this.tilesets.\r\n     */\r\n    getTilesetIndex: function (name)\r\n    {\r\n        return this.getIndex(this.tilesets, name);\r\n    },\r\n\r\n    /**\r\n     * Checks if there is a tile at the given location (in tile coordinates) in the given layer. Returns\r\n     * false if there is no tile or if the tile at that location has an index of -1.\r\n     *\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#hasTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - [description]\r\n     * @param {integer} tileY - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?boolean} Returns a boolean, or null if the layer given was invalid.\r\n     */\r\n    hasTileAt: function (tileX, tileY, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.HasTileAt(tileX, tileY, layer);\r\n    },\r\n\r\n    /**\r\n     * Checks if there is a tile at the given location (in world coordinates) in the given layer. Returns\r\n     * false if there is no tile or if the tile at that location has an index of -1.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#hasTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - [description]\r\n     * @param {number} worldY - [description]\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?boolean} Returns a boolean, or null if the layer given was invalid.\r\n     */\r\n    hasTileAtWorldXY: function (worldX, worldY, camera, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.HasTileAtWorldXY(worldX, worldY, camera, layer);\r\n    },\r\n\r\n    /**\r\n     * The LayerData object that is currently selected in the map. You can set this property using\r\n     * any type supported by setLayer.\r\n     *\r\n     * @name Phaser.Tilemaps.Tilemap#layer\r\n     * @type {Phaser.Tilemaps.LayerData}\r\n     * @since 3.0.0\r\n     */\r\n    layer: {\r\n        get: function ()\r\n        {\r\n            return this.layers[this.currentLayerIndex];\r\n        },\r\n\r\n        set: function (layer)\r\n        {\r\n            this.setLayer(layer);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Puts a tile at the given tile coordinates in the specified layer. You can pass in either an index\r\n     * or a Tile object. If you pass in a Tile, all attributes will be copied over to the specified\r\n     * location. If you pass in an index, only the index at the specified location will be changed.\r\n     * Collision information will be recalculated at the specified location.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * This cannot be applied to StaticTilemapLayers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#putTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|Phaser.Tilemaps.Tile)} tile - The index of this tile to set or a Tile object.\r\n     * @param {integer} tileX - [description]\r\n     * @param {integer} tileY - [description]\r\n     * @param {boolean} [recalculateFaces=true] - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile} Returns a Tile, or null if the layer given was invalid.\r\n     */\r\n    putTileAt: function (tile, tileX, tileY, recalculateFaces, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (this._isStaticCall(layer, 'putTileAt')) { return null; }\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.PutTileAt(tile, tileX, tileY, recalculateFaces, layer);\r\n    },\r\n\r\n    /**\r\n     * Puts a tile at the given world coordinates (pixels) in the specified layer. You can pass in either\r\n     * an index or a Tile object. If you pass in a Tile, all attributes will be copied over to the\r\n     * specified location. If you pass in an index, only the index at the specified location will be\r\n     * changed. Collision information will be recalculated at the specified location.\r\n     *\r\n     * If no layer specified, the maps current layer is used. This\r\n     * cannot be applied to StaticTilemapLayers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#putTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|Phaser.Tilemaps.Tile)} tile - The index of this tile to set or a Tile object.\r\n     * @param {integer} worldX - [description]\r\n     * @param {integer} worldY - [description]\r\n     * @param {boolean} [recalculateFaces=true] - [description]\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile} Returns a Tile, or null if the layer given was invalid.\r\n     */\r\n    putTileAtWorldXY: function (tile, worldX, worldY, recalculateFaces, camera, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (this._isStaticCall(layer, 'putTileAtWorldXY')) { return null; }\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.PutTileAtWorldXY(tile, worldX, worldY, recalculateFaces, camera, layer);\r\n    },\r\n\r\n    /**\r\n     * Puts an array of tiles or a 2D array of tiles at the given tile coordinates in the specified\r\n     * layer. The array can be composed of either tile indexes or Tile objects. If you pass in a Tile,\r\n     * all attributes will be copied over to the specified location. If you pass in an index, only the\r\n     * index at the specified location will be changed. Collision information will be recalculated\r\n     * within the region tiles were changed.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     * This cannot be applied to StaticTilemapLayers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#putTilesAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer[]|integer[][]|Phaser.Tilemaps.Tile[]|Phaser.Tilemaps.Tile[][])} tile - A row (array) or grid (2D array) of Tiles\r\n     * or tile indexes to place.\r\n     * @param {integer} tileX - [description]\r\n     * @param {integer} tileY - [description]\r\n     * @param {boolean} [recalculateFaces=true] - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Returns this, or null if the layer given was invalid.\r\n     */\r\n    putTilesAt: function (tilesArray, tileX, tileY, recalculateFaces, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (this._isStaticCall(layer, 'putTilesAt')) { return this; }\r\n\r\n        if (layer !== null)\r\n        {\r\n            TilemapComponents.PutTilesAt(tilesArray, tileX, tileY, recalculateFaces, layer);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Randomizes the indexes of a rectangular region of tiles (in tile coordinates) within the\r\n     * specified layer. Each tile will recieve a new index. If an array of indexes is passed in, then\r\n     * those will be used for randomly assigning new tile indexes. If an array is not provided, the\r\n     * indexes found within the region (excluding -1) will be used for randomly assigning new tile\r\n     * indexes. This method only modifies tile indexes and does not change collision information.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     * This cannot be applied to StaticTilemapLayers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#randomize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {integer[]} [indexes] - An array of indexes to randomly draw from during randomization.\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Returns this, or null if the layer given was invalid.\r\n     */\r\n    randomize: function (tileX, tileY, width, height, indexes, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (this._isStaticCall(layer, 'randomize')) { return this; }\r\n\r\n        if (layer !== null)\r\n        {\r\n            TilemapComponents.Randomize(tileX, tileY, width, height, indexes, layer);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculates interesting faces at the given tile coordinates of the specified layer. Interesting\r\n     * faces are used internally for optimizing collisions against tiles. This method is mostly used\r\n     * internally to optimize recalculating faces when only one tile has been changed.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#calculateFacesAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - [description]\r\n     * @param {integer} tileY - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Returns this, or null if the layer given was invalid.\r\n     */\r\n    calculateFacesAt: function (tileX, tileY, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return this; }\r\n\r\n        TilemapComponents.CalculateFacesAt(tileX, tileY, layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculates interesting faces within the rectangular area specified (in tile coordinates) of the\r\n     * layer. Interesting faces are used internally for optimizing collisions against tiles. This method\r\n     * is mostly used internally.\r\n     *\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#calculateFacesWithin\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Returns this, or null if the layer given was invalid.\r\n     */\r\n    calculateFacesWithin: function (tileX, tileY, width, height, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return this; }\r\n\r\n        TilemapComponents.CalculateFacesWithin(tileX, tileY, width, height, layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Removes all layers from this Tilemap and destroys any associated StaticTilemapLayers or\r\n     * DynamicTilemapLayers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#removeAllLayers\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Tilemaps.Tilemap} This Tilemap object.\r\n     */\r\n    removeAllLayers: function ()\r\n    {\r\n        // Destroy any StaticTilemapLayers or DynamicTilemapLayers that are stored in LayerData\r\n        for (var i = 0; i < this.layers.length; i++)\r\n        {\r\n            if (this.layers[i].tilemapLayer)\r\n            {\r\n                this.layers[i].tilemapLayer.destroy();\r\n            }\r\n        }\r\n\r\n        this.layers.length = 0;\r\n        this.currentLayerIndex = 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Removes the tile at the given tile coordinates in the specified layer and updates the layer's\r\n     * collision information.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     * This cannot be applied to StaticTilemapLayers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#removeTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|Phaser.Tilemaps.Tile)} tile - The index of this tile to set or a Tile object.\r\n     * @param {integer} tileX - [description]\r\n     * @param {integer} tileY - [description]\r\n     * @param {boolean} [replaceWithNull=true] - If true, this will replace the tile at the specified\r\n     * location with null instead of a Tile with an index of -1.\r\n     * @param {boolean} [recalculateFaces=true] - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile} Returns a Tile, or null if the layer given was invalid.\r\n     */\r\n    removeTileAt: function (tileX, tileY, replaceWithNull, recalculateFaces, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (this._isStaticCall(layer, 'removeTileAt')) { return null; }\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.RemoveTileAt(tileX, tileY, replaceWithNull, recalculateFaces, layer);\r\n    },\r\n\r\n    /**\r\n     * Removes the tile at the given world coordinates in the specified layer and updates the layer's\r\n     * collision information.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     * This cannot be applied to StaticTilemapLayers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#removeTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|Phaser.Tilemaps.Tile)} tile - The index of this tile to set or a Tile object.\r\n     * @param {number} worldX - [description]\r\n     * @param {number} worldY - [description]\r\n     * @param {boolean} [replaceWithNull=true] - If true, this will replace the tile at the specified\r\n     * location with null instead of a Tile with an index of -1.\r\n     * @param {boolean} [recalculateFaces=true] - [description]\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile} Returns a Tile, or null if the layer given was invalid.\r\n     */\r\n    removeTileAtWorldXY: function (worldX, worldY, replaceWithNull, recalculateFaces, camera, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (this._isStaticCall(layer, 'removeTileAtWorldXY')) { return null; }\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.RemoveTileAtWorldXY(worldX, worldY, replaceWithNull, recalculateFaces, camera, layer);\r\n    },\r\n\r\n    /**\r\n     * Draws a debug representation of the layer to the given Graphics. This is helpful when you want to\r\n     * get a quick idea of which of your tiles are colliding and which have interesting faces. The tiles\r\n     * are drawn starting at (0, 0) in the Graphics, allowing you to place the debug representation\r\n     * wherever you want on the screen.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#renderDebug\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Graphics} graphics - The target Graphics object to draw upon.\r\n     * @param {object} styleConfig - An object specifying the colors to use for the debug drawing.\r\n     * @param {?Color} [styleConfig.tileColor=blue] - Color to use for drawing a filled rectangle at\r\n     * non-colliding tile locations. If set to null, non-colliding tiles will not be drawn.\r\n     * @param {?Color} [styleConfig.collidingTileColor=orange] - Color to use for drawing a filled\r\n     * rectangle at colliding tile locations. If set to null, colliding tiles will not be drawn.\r\n     * @param {?Color} [styleConfig.faceColor=grey] - Color to use for drawing a line at interesting\r\n     * tile faces. If set to null, interesting tile faces will not be drawn.\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n     */\r\n    renderDebug: function (graphics, styleConfig, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return this; }\r\n\r\n        TilemapComponents.RenderDebug(graphics, styleConfig, layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Scans the given rectangular area (given in tile coordinates) for tiles with an index matching\r\n     * `findIndex` and updates their index to match `newIndex`. This only modifies the index and does\r\n     * not change collision information.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     * This cannot be applied to StaticTilemapLayers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#replaceByIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} findIndex - [description]\r\n     * @param {integer} newIndex - [description]\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n     */\r\n    replaceByIndex: function (findIndex, newIndex, tileX, tileY, width, height, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (this._isStaticCall(layer, 'replaceByIndex')) { return this; }\r\n\r\n        if (layer !== null)\r\n        {\r\n            TilemapComponents.ReplaceByIndex(findIndex, newIndex, tileX, tileY, width, height, layer);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on the given tile or tiles within a layer by index. You can pass in either a\r\n     * single numeric index or an array of indexes: [2, 3, 15, 20]. The `collides` parameter controls if\r\n     * collision will be enabled (true) or disabled (false).\r\n     *\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#setCollision\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|array)} indexes - Either a single tile index, or an array of tile indexes.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n     */\r\n    setCollision: function (indexes, collides, recalculateFaces, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return this; }\r\n\r\n        TilemapComponents.SetCollision(indexes, collides, recalculateFaces, layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on a range of tiles in a layer whose index is between the specified `start` and\r\n     * `stop` (inclusive). Calling this with a start value of 10 and a stop value of 14 would set\r\n     * collision for tiles 10, 11, 12, 13 and 14. The `collides` parameter controls if collision will be\r\n     * enabled (true) or disabled (false).\r\n     *\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#setCollisionBetween\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} start - The first index of the tile to be set for collision.\r\n     * @param {integer} stop - The last index of the tile to be set for collision.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n     */\r\n    setCollisionBetween: function (start, stop, collides, recalculateFaces, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return this; }\r\n\r\n        TilemapComponents.SetCollisionBetween(start, stop, collides, recalculateFaces, layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on the tiles within a layer by checking tile properties. If a tile has a property\r\n     * that matches the given properties object, its collision flag will be set. The `collides`\r\n     * parameter controls if collision will be enabled (true) or disabled (false). Passing in\r\n     * `{ collides: true }` would update the collision flag on any tiles with a \"collides\" property that\r\n     * has a value of true. Any tile that doesn't have \"collides\" set to true will be ignored. You can\r\n     * also use an array of values, e.g. `{ types: [\"stone\", \"lava\", \"sand\" ] }`. If a tile has a\r\n     * \"types\" property that matches any of those values, its collision flag will be updated.\r\n     *\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#setCollisionByProperty\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} properties - An object with tile properties and corresponding values that should\r\n     * be checked.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n     */\r\n    setCollisionByProperty: function (properties, collides, recalculateFaces, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return this; }\r\n\r\n        TilemapComponents.SetCollisionByProperty(properties, collides, recalculateFaces, layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on all tiles in the given layer, except for tiles that have an index specified in\r\n     * the given array. The `collides` parameter controls if collision will be enabled (true) or\r\n     * disabled (false).\r\n     *\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#setCollisionByExclusion\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer[]} indexes - An array of the tile indexes to not be counted for collision.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n     */\r\n    setCollisionByExclusion: function (indexes, collides, recalculateFaces, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return this; }\r\n\r\n        TilemapComponents.SetCollisionByExclusion(indexes, collides, recalculateFaces, layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on the tiles within a layer by checking each tile's collision group data\r\n     * (typically defined in Tiled within the tileset collision editor). If any objects are found within\r\n     * a tile's collision group, the tile's colliding information will be set. The `collides` parameter\r\n     * controls if collision will be enabled (true) or disabled (false).\r\n     *\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#setCollisionFromCollisionGroup\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n     */\r\n    setCollisionFromCollisionGroup: function (collides, recalculateFaces, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return this; }\r\n\r\n        TilemapComponents.SetCollisionFromCollisionGroup(collides, recalculateFaces, layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets a global collision callback for the given tile index within the layer. This will affect all\r\n     * tiles on this layer that have the same index. If a callback is already set for the tile index it\r\n     * will be replaced. Set the callback to null to remove it. If you want to set a callback for a tile\r\n     * at a specific location on the map then see setTileLocationCallback.\r\n     *\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#setTileIndexCallback\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|array)} indexes - Either a single tile index, or an array of tile indexes to have a\r\n     * collision callback set for.\r\n     * @param {function} callback - The callback that will be invoked when the tile is collided with.\r\n     * @param {object} callbackContext - The context under which the callback is called.\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n     */\r\n    setTileIndexCallback: function (indexes, callback, callbackContext, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return this; }\r\n\r\n        TilemapComponents.SetTileIndexCallback(indexes, callback, callbackContext, layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets a collision callback for the given rectangular area (in tile coordindates) within the layer.\r\n     * If a callback is already set for the tile index it will be replaced. Set the callback to null to\r\n     * remove it.\r\n     *\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#setTileLocationCallback\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {function} callback - The callback that will be invoked when the tile is collided with.\r\n     * @param {object} callbackContext - The context under which the callback is called.\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n     */\r\n    setTileLocationCallback: function (tileX, tileY, width, height, callback, callbackContext, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return this; }\r\n\r\n        TilemapComponents.SetTileLocationCallback(tileX, tileY, width, height, callback, callbackContext, layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the current layer to the LayerData associated with `layer`.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#setLayer\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The name of the\r\n     * layer from Tiled, the index of the layer in the map, a DynamicTilemapLayer or a\r\n     * StaticTilemapLayer. If not given will default to the map's current layer index.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tilemap} This Tilemap object.\r\n     */\r\n    setLayer: function (layer)\r\n    {\r\n        var index = this.getLayerIndex(layer);\r\n\r\n        if (index !== null)\r\n        {\r\n            this.currentLayerIndex = index;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the base tile size for the map. Note: this does not necessarily match the tileWidth and\r\n     * tileHeight for all layers. This also updates the base size on all tiles across all layers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#setBaseTileSize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileWidth - The width of the tiles the map uses for calculations.\r\n     * @param {integer} tileHeight - The height of the tiles the map uses for calculations.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tilemap} This Tilemap object.\r\n     */\r\n    setBaseTileSize: function (tileWidth, tileHeight)\r\n    {\r\n        this.tileWidth = tileWidth;\r\n        this.tileHeight = tileHeight;\r\n        this.widthInPixels = this.width * tileWidth;\r\n        this.heightInPixels = this.height * tileHeight;\r\n\r\n        // Update the base tile size on all layers & tiles\r\n        for (var i = 0; i < this.layers.length; i++)\r\n        {\r\n            this.layers[i].baseWidth = tileWidth;\r\n            this.layers[i].baseHeight = tileHeight;\r\n\r\n            var mapData = this.layers[i].data;\r\n            var mapWidth = this.layers[i].width;\r\n            var mapHeight = this.layers[i].height;\r\n\r\n            for (var row = 0; row < mapHeight; ++row)\r\n            {\r\n                for (var col = 0; col < mapWidth; ++col)\r\n                {\r\n                    var tile = mapData[row][col];\r\n\r\n                    if (tile !== null)\r\n                    {\r\n                        tile.setSize(undefined, undefined, tileWidth, tileHeight);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the tile size for a specific `layer`. Note: this does not necessarily match the map's\r\n     * tileWidth and tileHeight for all layers. This will set the tile size for the layer and any\r\n     * tiles the layer has.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#setLayerTileSize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileWidth - The width of the tiles (in pixels) in the layer.\r\n     * @param {integer} tileHeight - The height of the tiles (in pixels) in the layer.\r\n     * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The name of the\r\n     * layer from Tiled, the index of the layer in the map, a DynamicTilemapLayer or a\r\n     * StaticTilemapLayer. If not given will default to the map's current layer index.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tilemap} This Tilemap object.\r\n     */\r\n    setLayerTileSize: function (tileWidth, tileHeight, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return this; }\r\n\r\n        layer.tileWidth = tileWidth;\r\n        layer.tileHeight = tileHeight;\r\n\r\n        var mapData = layer.data;\r\n        var mapWidth = layer.width;\r\n        var mapHeight = layer.height;\r\n\r\n        for (var row = 0; row < mapHeight; ++row)\r\n        {\r\n            for (var col = 0; col < mapWidth; ++col)\r\n            {\r\n                var tile = mapData[row][col];\r\n\r\n                if (tile !== null) { tile.setSize(tileWidth, tileHeight); }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Shuffles the tiles in a rectangular region (specified in tile coordinates) within the given\r\n     * layer. It will only randomize the tiles in that area, so if they're all the same nothing will\r\n     * appear to have changed! This method only modifies tile indexes and does not change collision\r\n     * information.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     * This cannot be applied to StaticTilemapLayers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#shuffle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n     */\r\n    shuffle: function (tileX, tileY, width, height, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (this._isStaticCall(layer, 'shuffle')) { return this; }\r\n\r\n        if (layer !== null)\r\n        {\r\n            TilemapComponents.Shuffle(tileX, tileY, width, height, layer);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Scans the given rectangular area (given in tile coordinates) for tiles with an index matching\r\n     * `indexA` and swaps then with `indexB`. This only modifies the index and does not change collision\r\n     * information.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     * This cannot be applied to StaticTilemapLayers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#swapByIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileA - First tile index.\r\n     * @param {integer} tileB - Second tile index.\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n     */\r\n    swapByIndex: function (indexA, indexB, tileX, tileY, width, height, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (this._isStaticCall(layer, 'swapByIndex')) { return this; }\r\n\r\n        if (layer !== null)\r\n        {\r\n            TilemapComponents.SwapByIndex(indexA, indexB, tileX, tileY, width, height, layer);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Converts from tile X coordinates (tile units) to world X coordinates (pixels), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#tileToWorldX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - [description]\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?number} Returns a number, or null if the layer given was invalid.\r\n     */\r\n    tileToWorldX: function (tileX, camera, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.TileToWorldX(tileX, camera, layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from tile Y coordinates (tile units) to world Y coordinates (pixels), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#tileToWorldY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileY - [description]\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?number} Returns a number, or null if the layer given was invalid.\r\n     */\r\n    tileToWorldY: function (tileX, camera, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.TileToWorldY(tileX, camera, layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from tile XY coordinates (tile units) to world XY coordinates (pixels), factoring in the\r\n     * layers position, scale and scroll. This will return a new Vector2 object or update the given\r\n     * `point` object.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#tileToWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - [description]\r\n     * @param {integer} tileY - [description]\r\n     * @param {Phaser.Math.Vector2} [point] - [description]\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Math.Vector2} Returns a point, or null if the layer given was invalid.\r\n     */\r\n    tileToWorldXY: function (tileX, tileY, point, camera, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.TileToWorldXY(tileX, tileY, point, camera, layer);\r\n    },\r\n\r\n    /**\r\n     * Randomizes the indexes of a rectangular region of tiles (in tile coordinates) within the\r\n     * specified layer. Each tile will receive a new index. New indexes are drawn from the given\r\n     * weightedIndexes array. An example weighted array:\r\n     *\r\n     * [\r\n     *  { index: 6, weight: 4 },    // Probability of index 6 is 4 / 8\r\n     *  { index: 7, weight: 2 },    // Probability of index 7 would be 2 / 8\r\n     *  { index: 8, weight: 1.5 },  // Probability of index 8 would be 1.5 / 8\r\n     *  { index: 26, weight: 0.5 }  // Probability of index 27 would be 0.5 / 8\r\n     * ]\r\n     *\r\n     * The probability of any index being choose is (the index's weight) / (sum of all weights). This\r\n     * method only modifies tile indexes and does not change collision information.\r\n     *\r\n     * If no layer specified, the map's current layer is used. This\r\n     * cannot be applied to StaticTilemapLayers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#weightedRandomize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {object[]} [weightedIndexes] - An array of objects to randomly draw from during\r\n     * randomization. They should be in the form: { index: 0, weight: 4 } or\r\n     * { index: [0, 1], weight: 4 } if you wish to draw from multiple tile indexes.\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n     */\r\n    weightedRandomize: function (tileX, tileY, width, height, weightedIndexes, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (this._isStaticCall(layer, 'weightedRandomize')) { return this; }\r\n\r\n        if (layer !== null)\r\n        {\r\n            TilemapComponents.WeightedRandomize(tileX, tileY, width, height, weightedIndexes, layer);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Converts from world X coordinates (pixels) to tile X coordinates (tile units), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#worldToTileX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - [description]\r\n     * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the\r\n     * nearest integer.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?number} Returns a number, or null if the layer given was invalid.\r\n     */\r\n    worldToTileX: function (worldX, snapToFloor, camera, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.WorldToTileX(worldX, snapToFloor, camera, layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from world Y coordinates (pixels) to tile Y coordinates (tile units), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#worldToTileY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldY - [description]\r\n     * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the\r\n     * nearest integer.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?number} Returns a number, or null if the layer given was invalid.\r\n     */\r\n    worldToTileY: function (worldY, snapToFloor, camera, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.WorldToTileY(worldY, snapToFloor, camera, layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from world XY coordinates (pixels) to tile XY coordinates (tile units), factoring in the\r\n     * layers position, scale and scroll. This will return a new Vector2 object or update the given\r\n     * `point` object.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#worldToTileXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - [description]\r\n     * @param {number} worldY - [description]\r\n     * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the\r\n     * nearest integer.\r\n     * @param {Phaser.Math.Vector2} [point] - [description]\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Math.Vector2} Returns a point, or null if the layer given was invalid.\r\n     */\r\n    worldToTileXY: function (worldX, worldY, snapToFloor, point, camera, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.WorldToTileXY(worldX, worldY, snapToFloor, point, camera, layer);\r\n    },\r\n\r\n    /**\r\n     * Used internally to check if a layer is static and prints out a warning.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#_isStaticCall\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean}\r\n     */\r\n    _isStaticCall: function (layer, functionName)\r\n    {\r\n        if (layer.tilemapLayer instanceof StaticTilemapLayer)\r\n        {\r\n            console.warn(functionName + ': You cannot change the tiles in a static tilemap layer');\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Tilemap;\r\n","map":{"mappings":[{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":607,"column":0},"generated":{"line":607,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":608,"column":0},"generated":{"line":608,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":609,"column":0},"generated":{"line":609,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":610,"column":0},"generated":{"line":610,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":611,"column":0},"generated":{"line":611,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":612,"column":0},"generated":{"line":612,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":613,"column":0},"generated":{"line":613,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":614,"column":0},"generated":{"line":614,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":615,"column":0},"generated":{"line":615,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":616,"column":0},"generated":{"line":616,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":617,"column":0},"generated":{"line":617,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":618,"column":0},"generated":{"line":618,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":619,"column":0},"generated":{"line":619,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":620,"column":0},"generated":{"line":620,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":621,"column":0},"generated":{"line":621,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":622,"column":0},"generated":{"line":622,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":623,"column":0},"generated":{"line":623,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":624,"column":0},"generated":{"line":624,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":625,"column":0},"generated":{"line":625,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":626,"column":0},"generated":{"line":626,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":627,"column":0},"generated":{"line":627,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":628,"column":0},"generated":{"line":628,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":629,"column":0},"generated":{"line":629,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":630,"column":0},"generated":{"line":630,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":631,"column":0},"generated":{"line":631,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":632,"column":0},"generated":{"line":632,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":633,"column":0},"generated":{"line":633,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":634,"column":0},"generated":{"line":634,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":635,"column":0},"generated":{"line":635,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":636,"column":0},"generated":{"line":636,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":637,"column":0},"generated":{"line":637,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":638,"column":0},"generated":{"line":638,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":639,"column":0},"generated":{"line":639,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":640,"column":0},"generated":{"line":640,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":641,"column":0},"generated":{"line":641,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":642,"column":0},"generated":{"line":642,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":643,"column":0},"generated":{"line":643,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":644,"column":0},"generated":{"line":644,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":645,"column":0},"generated":{"line":645,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":646,"column":0},"generated":{"line":646,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":647,"column":0},"generated":{"line":647,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":648,"column":0},"generated":{"line":648,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":649,"column":0},"generated":{"line":649,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":650,"column":0},"generated":{"line":650,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":651,"column":0},"generated":{"line":651,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":652,"column":0},"generated":{"line":652,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":653,"column":0},"generated":{"line":653,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":654,"column":0},"generated":{"line":654,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":655,"column":0},"generated":{"line":655,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":656,"column":0},"generated":{"line":656,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":657,"column":0},"generated":{"line":657,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":658,"column":0},"generated":{"line":658,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":659,"column":0},"generated":{"line":659,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":660,"column":0},"generated":{"line":660,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":661,"column":0},"generated":{"line":661,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":662,"column":0},"generated":{"line":662,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":663,"column":0},"generated":{"line":663,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":664,"column":0},"generated":{"line":664,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":665,"column":0},"generated":{"line":665,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":666,"column":0},"generated":{"line":666,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":667,"column":0},"generated":{"line":667,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":668,"column":0},"generated":{"line":668,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":669,"column":0},"generated":{"line":669,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":670,"column":0},"generated":{"line":670,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":671,"column":0},"generated":{"line":671,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":672,"column":0},"generated":{"line":672,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":673,"column":0},"generated":{"line":673,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":674,"column":0},"generated":{"line":674,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":675,"column":0},"generated":{"line":675,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":676,"column":0},"generated":{"line":676,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":677,"column":0},"generated":{"line":677,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":678,"column":0},"generated":{"line":678,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":679,"column":0},"generated":{"line":679,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":680,"column":0},"generated":{"line":680,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":681,"column":0},"generated":{"line":681,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":682,"column":0},"generated":{"line":682,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":683,"column":0},"generated":{"line":683,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":684,"column":0},"generated":{"line":684,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":685,"column":0},"generated":{"line":685,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":686,"column":0},"generated":{"line":686,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":687,"column":0},"generated":{"line":687,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":688,"column":0},"generated":{"line":688,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":689,"column":0},"generated":{"line":689,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":690,"column":0},"generated":{"line":690,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":691,"column":0},"generated":{"line":691,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":692,"column":0},"generated":{"line":692,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":693,"column":0},"generated":{"line":693,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":694,"column":0},"generated":{"line":694,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":695,"column":0},"generated":{"line":695,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":696,"column":0},"generated":{"line":696,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":697,"column":0},"generated":{"line":697,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":698,"column":0},"generated":{"line":698,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":699,"column":0},"generated":{"line":699,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":700,"column":0},"generated":{"line":700,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":701,"column":0},"generated":{"line":701,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":702,"column":0},"generated":{"line":702,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":703,"column":0},"generated":{"line":703,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":704,"column":0},"generated":{"line":704,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":705,"column":0},"generated":{"line":705,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":706,"column":0},"generated":{"line":706,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":707,"column":0},"generated":{"line":707,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":708,"column":0},"generated":{"line":708,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":709,"column":0},"generated":{"line":709,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":710,"column":0},"generated":{"line":710,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":711,"column":0},"generated":{"line":711,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":712,"column":0},"generated":{"line":712,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":713,"column":0},"generated":{"line":713,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":714,"column":0},"generated":{"line":714,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":715,"column":0},"generated":{"line":715,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":716,"column":0},"generated":{"line":716,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":717,"column":0},"generated":{"line":717,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":718,"column":0},"generated":{"line":718,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":719,"column":0},"generated":{"line":719,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":720,"column":0},"generated":{"line":720,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":721,"column":0},"generated":{"line":721,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":722,"column":0},"generated":{"line":722,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":723,"column":0},"generated":{"line":723,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":724,"column":0},"generated":{"line":724,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":725,"column":0},"generated":{"line":725,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":726,"column":0},"generated":{"line":726,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":727,"column":0},"generated":{"line":727,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":728,"column":0},"generated":{"line":728,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":729,"column":0},"generated":{"line":729,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":730,"column":0},"generated":{"line":730,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":731,"column":0},"generated":{"line":731,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":732,"column":0},"generated":{"line":732,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":733,"column":0},"generated":{"line":733,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":734,"column":0},"generated":{"line":734,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":735,"column":0},"generated":{"line":735,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":736,"column":0},"generated":{"line":736,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":737,"column":0},"generated":{"line":737,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":738,"column":0},"generated":{"line":738,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":739,"column":0},"generated":{"line":739,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":740,"column":0},"generated":{"line":740,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":741,"column":0},"generated":{"line":741,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":742,"column":0},"generated":{"line":742,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":743,"column":0},"generated":{"line":743,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":744,"column":0},"generated":{"line":744,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":745,"column":0},"generated":{"line":745,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":746,"column":0},"generated":{"line":746,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":747,"column":0},"generated":{"line":747,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":748,"column":0},"generated":{"line":748,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":749,"column":0},"generated":{"line":749,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":750,"column":0},"generated":{"line":750,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":751,"column":0},"generated":{"line":751,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":752,"column":0},"generated":{"line":752,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":753,"column":0},"generated":{"line":753,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":754,"column":0},"generated":{"line":754,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":755,"column":0},"generated":{"line":755,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":756,"column":0},"generated":{"line":756,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":757,"column":0},"generated":{"line":757,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":758,"column":0},"generated":{"line":758,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":759,"column":0},"generated":{"line":759,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":760,"column":0},"generated":{"line":760,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":761,"column":0},"generated":{"line":761,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":762,"column":0},"generated":{"line":762,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":763,"column":0},"generated":{"line":763,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":764,"column":0},"generated":{"line":764,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":765,"column":0},"generated":{"line":765,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":766,"column":0},"generated":{"line":766,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":767,"column":0},"generated":{"line":767,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":768,"column":0},"generated":{"line":768,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":769,"column":0},"generated":{"line":769,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":770,"column":0},"generated":{"line":770,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":771,"column":0},"generated":{"line":771,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":772,"column":0},"generated":{"line":772,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":773,"column":0},"generated":{"line":773,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":774,"column":0},"generated":{"line":774,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":775,"column":0},"generated":{"line":775,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":776,"column":0},"generated":{"line":776,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":777,"column":0},"generated":{"line":777,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":778,"column":0},"generated":{"line":778,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":779,"column":0},"generated":{"line":779,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":780,"column":0},"generated":{"line":780,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":781,"column":0},"generated":{"line":781,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":782,"column":0},"generated":{"line":782,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":783,"column":0},"generated":{"line":783,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":784,"column":0},"generated":{"line":784,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":785,"column":0},"generated":{"line":785,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":786,"column":0},"generated":{"line":786,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":787,"column":0},"generated":{"line":787,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":788,"column":0},"generated":{"line":788,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":789,"column":0},"generated":{"line":789,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":790,"column":0},"generated":{"line":790,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":791,"column":0},"generated":{"line":791,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":792,"column":0},"generated":{"line":792,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":793,"column":0},"generated":{"line":793,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":794,"column":0},"generated":{"line":794,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":795,"column":0},"generated":{"line":795,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":796,"column":0},"generated":{"line":796,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":797,"column":0},"generated":{"line":797,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":798,"column":0},"generated":{"line":798,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":799,"column":0},"generated":{"line":799,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":800,"column":0},"generated":{"line":800,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":801,"column":0},"generated":{"line":801,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":802,"column":0},"generated":{"line":802,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":803,"column":0},"generated":{"line":803,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":804,"column":0},"generated":{"line":804,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":805,"column":0},"generated":{"line":805,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":806,"column":0},"generated":{"line":806,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":807,"column":0},"generated":{"line":807,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":808,"column":0},"generated":{"line":808,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":809,"column":0},"generated":{"line":809,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":810,"column":0},"generated":{"line":810,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":811,"column":0},"generated":{"line":811,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":812,"column":0},"generated":{"line":812,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":813,"column":0},"generated":{"line":813,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":814,"column":0},"generated":{"line":814,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":815,"column":0},"generated":{"line":815,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":816,"column":0},"generated":{"line":816,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":817,"column":0},"generated":{"line":817,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":818,"column":0},"generated":{"line":818,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":819,"column":0},"generated":{"line":819,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":820,"column":0},"generated":{"line":820,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":821,"column":0},"generated":{"line":821,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":822,"column":0},"generated":{"line":822,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":823,"column":0},"generated":{"line":823,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":824,"column":0},"generated":{"line":824,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":825,"column":0},"generated":{"line":825,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":826,"column":0},"generated":{"line":826,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":827,"column":0},"generated":{"line":827,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":828,"column":0},"generated":{"line":828,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":829,"column":0},"generated":{"line":829,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":830,"column":0},"generated":{"line":830,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":831,"column":0},"generated":{"line":831,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":832,"column":0},"generated":{"line":832,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":833,"column":0},"generated":{"line":833,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":834,"column":0},"generated":{"line":834,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":835,"column":0},"generated":{"line":835,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":836,"column":0},"generated":{"line":836,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":837,"column":0},"generated":{"line":837,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":838,"column":0},"generated":{"line":838,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":839,"column":0},"generated":{"line":839,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":840,"column":0},"generated":{"line":840,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":841,"column":0},"generated":{"line":841,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":842,"column":0},"generated":{"line":842,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":843,"column":0},"generated":{"line":843,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":844,"column":0},"generated":{"line":844,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":845,"column":0},"generated":{"line":845,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":846,"column":0},"generated":{"line":846,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":847,"column":0},"generated":{"line":847,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":848,"column":0},"generated":{"line":848,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":849,"column":0},"generated":{"line":849,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":850,"column":0},"generated":{"line":850,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":851,"column":0},"generated":{"line":851,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":852,"column":0},"generated":{"line":852,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":853,"column":0},"generated":{"line":853,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":854,"column":0},"generated":{"line":854,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":855,"column":0},"generated":{"line":855,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":856,"column":0},"generated":{"line":856,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":857,"column":0},"generated":{"line":857,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":858,"column":0},"generated":{"line":858,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":859,"column":0},"generated":{"line":859,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":860,"column":0},"generated":{"line":860,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":861,"column":0},"generated":{"line":861,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":862,"column":0},"generated":{"line":862,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":863,"column":0},"generated":{"line":863,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":864,"column":0},"generated":{"line":864,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":865,"column":0},"generated":{"line":865,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":866,"column":0},"generated":{"line":866,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":867,"column":0},"generated":{"line":867,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":868,"column":0},"generated":{"line":868,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":869,"column":0},"generated":{"line":869,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":870,"column":0},"generated":{"line":870,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":871,"column":0},"generated":{"line":871,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":872,"column":0},"generated":{"line":872,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":873,"column":0},"generated":{"line":873,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":874,"column":0},"generated":{"line":874,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":875,"column":0},"generated":{"line":875,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":876,"column":0},"generated":{"line":876,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":877,"column":0},"generated":{"line":877,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":878,"column":0},"generated":{"line":878,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":879,"column":0},"generated":{"line":879,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":880,"column":0},"generated":{"line":880,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":881,"column":0},"generated":{"line":881,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":882,"column":0},"generated":{"line":882,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":883,"column":0},"generated":{"line":883,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":884,"column":0},"generated":{"line":884,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":885,"column":0},"generated":{"line":885,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":886,"column":0},"generated":{"line":886,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":887,"column":0},"generated":{"line":887,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":888,"column":0},"generated":{"line":888,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":889,"column":0},"generated":{"line":889,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":890,"column":0},"generated":{"line":890,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":891,"column":0},"generated":{"line":891,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":892,"column":0},"generated":{"line":892,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":893,"column":0},"generated":{"line":893,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":894,"column":0},"generated":{"line":894,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":895,"column":0},"generated":{"line":895,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":896,"column":0},"generated":{"line":896,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":897,"column":0},"generated":{"line":897,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":898,"column":0},"generated":{"line":898,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":899,"column":0},"generated":{"line":899,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":900,"column":0},"generated":{"line":900,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":901,"column":0},"generated":{"line":901,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":902,"column":0},"generated":{"line":902,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":903,"column":0},"generated":{"line":903,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":904,"column":0},"generated":{"line":904,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":905,"column":0},"generated":{"line":905,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":906,"column":0},"generated":{"line":906,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":907,"column":0},"generated":{"line":907,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":908,"column":0},"generated":{"line":908,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":909,"column":0},"generated":{"line":909,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":910,"column":0},"generated":{"line":910,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":911,"column":0},"generated":{"line":911,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":912,"column":0},"generated":{"line":912,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":913,"column":0},"generated":{"line":913,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":914,"column":0},"generated":{"line":914,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":915,"column":0},"generated":{"line":915,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":916,"column":0},"generated":{"line":916,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":917,"column":0},"generated":{"line":917,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":918,"column":0},"generated":{"line":918,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":919,"column":0},"generated":{"line":919,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":920,"column":0},"generated":{"line":920,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":921,"column":0},"generated":{"line":921,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":922,"column":0},"generated":{"line":922,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":923,"column":0},"generated":{"line":923,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":924,"column":0},"generated":{"line":924,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":925,"column":0},"generated":{"line":925,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":926,"column":0},"generated":{"line":926,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":927,"column":0},"generated":{"line":927,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":928,"column":0},"generated":{"line":928,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":929,"column":0},"generated":{"line":929,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":930,"column":0},"generated":{"line":930,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":931,"column":0},"generated":{"line":931,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":932,"column":0},"generated":{"line":932,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":933,"column":0},"generated":{"line":933,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":934,"column":0},"generated":{"line":934,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":935,"column":0},"generated":{"line":935,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":936,"column":0},"generated":{"line":936,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":937,"column":0},"generated":{"line":937,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":938,"column":0},"generated":{"line":938,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":939,"column":0},"generated":{"line":939,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":940,"column":0},"generated":{"line":940,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":941,"column":0},"generated":{"line":941,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":942,"column":0},"generated":{"line":942,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":943,"column":0},"generated":{"line":943,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":944,"column":0},"generated":{"line":944,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":945,"column":0},"generated":{"line":945,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":946,"column":0},"generated":{"line":946,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":947,"column":0},"generated":{"line":947,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":948,"column":0},"generated":{"line":948,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":949,"column":0},"generated":{"line":949,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":950,"column":0},"generated":{"line":950,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":951,"column":0},"generated":{"line":951,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":952,"column":0},"generated":{"line":952,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":953,"column":0},"generated":{"line":953,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":954,"column":0},"generated":{"line":954,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":955,"column":0},"generated":{"line":955,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":956,"column":0},"generated":{"line":956,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":957,"column":0},"generated":{"line":957,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":958,"column":0},"generated":{"line":958,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":959,"column":0},"generated":{"line":959,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":960,"column":0},"generated":{"line":960,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":961,"column":0},"generated":{"line":961,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":962,"column":0},"generated":{"line":962,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":963,"column":0},"generated":{"line":963,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":964,"column":0},"generated":{"line":964,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":965,"column":0},"generated":{"line":965,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":966,"column":0},"generated":{"line":966,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":967,"column":0},"generated":{"line":967,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":968,"column":0},"generated":{"line":968,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":969,"column":0},"generated":{"line":969,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":970,"column":0},"generated":{"line":970,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":971,"column":0},"generated":{"line":971,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":972,"column":0},"generated":{"line":972,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":973,"column":0},"generated":{"line":973,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":974,"column":0},"generated":{"line":974,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":975,"column":0},"generated":{"line":975,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":976,"column":0},"generated":{"line":976,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":977,"column":0},"generated":{"line":977,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":978,"column":0},"generated":{"line":978,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":979,"column":0},"generated":{"line":979,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":980,"column":0},"generated":{"line":980,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":981,"column":0},"generated":{"line":981,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":982,"column":0},"generated":{"line":982,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":983,"column":0},"generated":{"line":983,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":984,"column":0},"generated":{"line":984,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":985,"column":0},"generated":{"line":985,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":986,"column":0},"generated":{"line":986,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":987,"column":0},"generated":{"line":987,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":988,"column":0},"generated":{"line":988,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":989,"column":0},"generated":{"line":989,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":990,"column":0},"generated":{"line":990,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":991,"column":0},"generated":{"line":991,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":992,"column":0},"generated":{"line":992,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":993,"column":0},"generated":{"line":993,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":994,"column":0},"generated":{"line":994,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":995,"column":0},"generated":{"line":995,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":996,"column":0},"generated":{"line":996,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":997,"column":0},"generated":{"line":997,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":998,"column":0},"generated":{"line":998,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":999,"column":0},"generated":{"line":999,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1000,"column":0},"generated":{"line":1000,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1001,"column":0},"generated":{"line":1001,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1002,"column":0},"generated":{"line":1002,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1003,"column":0},"generated":{"line":1003,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1004,"column":0},"generated":{"line":1004,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1005,"column":0},"generated":{"line":1005,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1006,"column":0},"generated":{"line":1006,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1007,"column":0},"generated":{"line":1007,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1008,"column":0},"generated":{"line":1008,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1009,"column":0},"generated":{"line":1009,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1010,"column":0},"generated":{"line":1010,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1011,"column":0},"generated":{"line":1011,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1012,"column":0},"generated":{"line":1012,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1013,"column":0},"generated":{"line":1013,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1014,"column":0},"generated":{"line":1014,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1015,"column":0},"generated":{"line":1015,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1016,"column":0},"generated":{"line":1016,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1017,"column":0},"generated":{"line":1017,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1018,"column":0},"generated":{"line":1018,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1019,"column":0},"generated":{"line":1019,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1020,"column":0},"generated":{"line":1020,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1021,"column":0},"generated":{"line":1021,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1022,"column":0},"generated":{"line":1022,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1023,"column":0},"generated":{"line":1023,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1024,"column":0},"generated":{"line":1024,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1025,"column":0},"generated":{"line":1025,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1026,"column":0},"generated":{"line":1026,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1027,"column":0},"generated":{"line":1027,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1028,"column":0},"generated":{"line":1028,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1029,"column":0},"generated":{"line":1029,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1030,"column":0},"generated":{"line":1030,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1031,"column":0},"generated":{"line":1031,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1032,"column":0},"generated":{"line":1032,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1033,"column":0},"generated":{"line":1033,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1034,"column":0},"generated":{"line":1034,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1035,"column":0},"generated":{"line":1035,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1036,"column":0},"generated":{"line":1036,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1037,"column":0},"generated":{"line":1037,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1038,"column":0},"generated":{"line":1038,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1039,"column":0},"generated":{"line":1039,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1040,"column":0},"generated":{"line":1040,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1041,"column":0},"generated":{"line":1041,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1042,"column":0},"generated":{"line":1042,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1043,"column":0},"generated":{"line":1043,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1044,"column":0},"generated":{"line":1044,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1045,"column":0},"generated":{"line":1045,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1046,"column":0},"generated":{"line":1046,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1047,"column":0},"generated":{"line":1047,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1048,"column":0},"generated":{"line":1048,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1049,"column":0},"generated":{"line":1049,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1050,"column":0},"generated":{"line":1050,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1051,"column":0},"generated":{"line":1051,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1052,"column":0},"generated":{"line":1052,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1053,"column":0},"generated":{"line":1053,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1054,"column":0},"generated":{"line":1054,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1055,"column":0},"generated":{"line":1055,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1056,"column":0},"generated":{"line":1056,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1057,"column":0},"generated":{"line":1057,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1058,"column":0},"generated":{"line":1058,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1059,"column":0},"generated":{"line":1059,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1060,"column":0},"generated":{"line":1060,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1061,"column":0},"generated":{"line":1061,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1062,"column":0},"generated":{"line":1062,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1063,"column":0},"generated":{"line":1063,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1064,"column":0},"generated":{"line":1064,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1065,"column":0},"generated":{"line":1065,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1066,"column":0},"generated":{"line":1066,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1067,"column":0},"generated":{"line":1067,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1068,"column":0},"generated":{"line":1068,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1069,"column":0},"generated":{"line":1069,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1070,"column":0},"generated":{"line":1070,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1071,"column":0},"generated":{"line":1071,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1072,"column":0},"generated":{"line":1072,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1073,"column":0},"generated":{"line":1073,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1074,"column":0},"generated":{"line":1074,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1075,"column":0},"generated":{"line":1075,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1076,"column":0},"generated":{"line":1076,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1077,"column":0},"generated":{"line":1077,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1078,"column":0},"generated":{"line":1078,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1079,"column":0},"generated":{"line":1079,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1080,"column":0},"generated":{"line":1080,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1081,"column":0},"generated":{"line":1081,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1082,"column":0},"generated":{"line":1082,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1083,"column":0},"generated":{"line":1083,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1084,"column":0},"generated":{"line":1084,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1085,"column":0},"generated":{"line":1085,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1086,"column":0},"generated":{"line":1086,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1087,"column":0},"generated":{"line":1087,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1088,"column":0},"generated":{"line":1088,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1089,"column":0},"generated":{"line":1089,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1090,"column":0},"generated":{"line":1090,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1091,"column":0},"generated":{"line":1091,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1092,"column":0},"generated":{"line":1092,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1093,"column":0},"generated":{"line":1093,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1094,"column":0},"generated":{"line":1094,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1095,"column":0},"generated":{"line":1095,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1096,"column":0},"generated":{"line":1096,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1097,"column":0},"generated":{"line":1097,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1098,"column":0},"generated":{"line":1098,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1099,"column":0},"generated":{"line":1099,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1100,"column":0},"generated":{"line":1100,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1101,"column":0},"generated":{"line":1101,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1102,"column":0},"generated":{"line":1102,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1103,"column":0},"generated":{"line":1103,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1104,"column":0},"generated":{"line":1104,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1105,"column":0},"generated":{"line":1105,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1106,"column":0},"generated":{"line":1106,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1107,"column":0},"generated":{"line":1107,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1108,"column":0},"generated":{"line":1108,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1109,"column":0},"generated":{"line":1109,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1110,"column":0},"generated":{"line":1110,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1111,"column":0},"generated":{"line":1111,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1112,"column":0},"generated":{"line":1112,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1113,"column":0},"generated":{"line":1113,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1114,"column":0},"generated":{"line":1114,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1115,"column":0},"generated":{"line":1115,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1116,"column":0},"generated":{"line":1116,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1117,"column":0},"generated":{"line":1117,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1118,"column":0},"generated":{"line":1118,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1119,"column":0},"generated":{"line":1119,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1120,"column":0},"generated":{"line":1120,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1121,"column":0},"generated":{"line":1121,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1122,"column":0},"generated":{"line":1122,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1123,"column":0},"generated":{"line":1123,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1124,"column":0},"generated":{"line":1124,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1125,"column":0},"generated":{"line":1125,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1126,"column":0},"generated":{"line":1126,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1127,"column":0},"generated":{"line":1127,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1128,"column":0},"generated":{"line":1128,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1129,"column":0},"generated":{"line":1129,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1130,"column":0},"generated":{"line":1130,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1131,"column":0},"generated":{"line":1131,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1132,"column":0},"generated":{"line":1132,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1133,"column":0},"generated":{"line":1133,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1134,"column":0},"generated":{"line":1134,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1135,"column":0},"generated":{"line":1135,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1136,"column":0},"generated":{"line":1136,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1137,"column":0},"generated":{"line":1137,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1138,"column":0},"generated":{"line":1138,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1139,"column":0},"generated":{"line":1139,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1140,"column":0},"generated":{"line":1140,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1141,"column":0},"generated":{"line":1141,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1142,"column":0},"generated":{"line":1142,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1143,"column":0},"generated":{"line":1143,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1144,"column":0},"generated":{"line":1144,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1145,"column":0},"generated":{"line":1145,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1146,"column":0},"generated":{"line":1146,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1147,"column":0},"generated":{"line":1147,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1148,"column":0},"generated":{"line":1148,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1149,"column":0},"generated":{"line":1149,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1150,"column":0},"generated":{"line":1150,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1151,"column":0},"generated":{"line":1151,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1152,"column":0},"generated":{"line":1152,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1153,"column":0},"generated":{"line":1153,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1154,"column":0},"generated":{"line":1154,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1155,"column":0},"generated":{"line":1155,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1156,"column":0},"generated":{"line":1156,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1157,"column":0},"generated":{"line":1157,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1158,"column":0},"generated":{"line":1158,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1159,"column":0},"generated":{"line":1159,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1160,"column":0},"generated":{"line":1160,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1161,"column":0},"generated":{"line":1161,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1162,"column":0},"generated":{"line":1162,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1163,"column":0},"generated":{"line":1163,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1164,"column":0},"generated":{"line":1164,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1165,"column":0},"generated":{"line":1165,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1166,"column":0},"generated":{"line":1166,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1167,"column":0},"generated":{"line":1167,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1168,"column":0},"generated":{"line":1168,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1169,"column":0},"generated":{"line":1169,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1170,"column":0},"generated":{"line":1170,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1171,"column":0},"generated":{"line":1171,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1172,"column":0},"generated":{"line":1172,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1173,"column":0},"generated":{"line":1173,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1174,"column":0},"generated":{"line":1174,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1175,"column":0},"generated":{"line":1175,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1176,"column":0},"generated":{"line":1176,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1177,"column":0},"generated":{"line":1177,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1178,"column":0},"generated":{"line":1178,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1179,"column":0},"generated":{"line":1179,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1180,"column":0},"generated":{"line":1180,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1181,"column":0},"generated":{"line":1181,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1182,"column":0},"generated":{"line":1182,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1183,"column":0},"generated":{"line":1183,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1184,"column":0},"generated":{"line":1184,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1185,"column":0},"generated":{"line":1185,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1186,"column":0},"generated":{"line":1186,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1187,"column":0},"generated":{"line":1187,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1188,"column":0},"generated":{"line":1188,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1189,"column":0},"generated":{"line":1189,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1190,"column":0},"generated":{"line":1190,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1191,"column":0},"generated":{"line":1191,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1192,"column":0},"generated":{"line":1192,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1193,"column":0},"generated":{"line":1193,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1194,"column":0},"generated":{"line":1194,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1195,"column":0},"generated":{"line":1195,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1196,"column":0},"generated":{"line":1196,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1197,"column":0},"generated":{"line":1197,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1198,"column":0},"generated":{"line":1198,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1199,"column":0},"generated":{"line":1199,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1200,"column":0},"generated":{"line":1200,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1201,"column":0},"generated":{"line":1201,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1202,"column":0},"generated":{"line":1202,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1203,"column":0},"generated":{"line":1203,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1204,"column":0},"generated":{"line":1204,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1205,"column":0},"generated":{"line":1205,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1206,"column":0},"generated":{"line":1206,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1207,"column":0},"generated":{"line":1207,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1208,"column":0},"generated":{"line":1208,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1209,"column":0},"generated":{"line":1209,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1210,"column":0},"generated":{"line":1210,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1211,"column":0},"generated":{"line":1211,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1212,"column":0},"generated":{"line":1212,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1213,"column":0},"generated":{"line":1213,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1214,"column":0},"generated":{"line":1214,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1215,"column":0},"generated":{"line":1215,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1216,"column":0},"generated":{"line":1216,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1217,"column":0},"generated":{"line":1217,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1218,"column":0},"generated":{"line":1218,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1219,"column":0},"generated":{"line":1219,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1220,"column":0},"generated":{"line":1220,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1221,"column":0},"generated":{"line":1221,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1222,"column":0},"generated":{"line":1222,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1223,"column":0},"generated":{"line":1223,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1224,"column":0},"generated":{"line":1224,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1225,"column":0},"generated":{"line":1225,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1226,"column":0},"generated":{"line":1226,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1227,"column":0},"generated":{"line":1227,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1228,"column":0},"generated":{"line":1228,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1229,"column":0},"generated":{"line":1229,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1230,"column":0},"generated":{"line":1230,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1231,"column":0},"generated":{"line":1231,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1232,"column":0},"generated":{"line":1232,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1233,"column":0},"generated":{"line":1233,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1234,"column":0},"generated":{"line":1234,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1235,"column":0},"generated":{"line":1235,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1236,"column":0},"generated":{"line":1236,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1237,"column":0},"generated":{"line":1237,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1238,"column":0},"generated":{"line":1238,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1239,"column":0},"generated":{"line":1239,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1240,"column":0},"generated":{"line":1240,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1241,"column":0},"generated":{"line":1241,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1242,"column":0},"generated":{"line":1242,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1243,"column":0},"generated":{"line":1243,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1244,"column":0},"generated":{"line":1244,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1245,"column":0},"generated":{"line":1245,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1246,"column":0},"generated":{"line":1246,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1247,"column":0},"generated":{"line":1247,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1248,"column":0},"generated":{"line":1248,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1249,"column":0},"generated":{"line":1249,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1250,"column":0},"generated":{"line":1250,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1251,"column":0},"generated":{"line":1251,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1252,"column":0},"generated":{"line":1252,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1253,"column":0},"generated":{"line":1253,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1254,"column":0},"generated":{"line":1254,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1255,"column":0},"generated":{"line":1255,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1256,"column":0},"generated":{"line":1256,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1257,"column":0},"generated":{"line":1257,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1258,"column":0},"generated":{"line":1258,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1259,"column":0},"generated":{"line":1259,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1260,"column":0},"generated":{"line":1260,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1261,"column":0},"generated":{"line":1261,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1262,"column":0},"generated":{"line":1262,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1263,"column":0},"generated":{"line":1263,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1264,"column":0},"generated":{"line":1264,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1265,"column":0},"generated":{"line":1265,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1266,"column":0},"generated":{"line":1266,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1267,"column":0},"generated":{"line":1267,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1268,"column":0},"generated":{"line":1268,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1269,"column":0},"generated":{"line":1269,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1270,"column":0},"generated":{"line":1270,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1271,"column":0},"generated":{"line":1271,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1272,"column":0},"generated":{"line":1272,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1273,"column":0},"generated":{"line":1273,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1274,"column":0},"generated":{"line":1274,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1275,"column":0},"generated":{"line":1275,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1276,"column":0},"generated":{"line":1276,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1277,"column":0},"generated":{"line":1277,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1278,"column":0},"generated":{"line":1278,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1279,"column":0},"generated":{"line":1279,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1280,"column":0},"generated":{"line":1280,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1281,"column":0},"generated":{"line":1281,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1282,"column":0},"generated":{"line":1282,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1283,"column":0},"generated":{"line":1283,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1284,"column":0},"generated":{"line":1284,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1285,"column":0},"generated":{"line":1285,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1286,"column":0},"generated":{"line":1286,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1287,"column":0},"generated":{"line":1287,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1288,"column":0},"generated":{"line":1288,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1289,"column":0},"generated":{"line":1289,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1290,"column":0},"generated":{"line":1290,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1291,"column":0},"generated":{"line":1291,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1292,"column":0},"generated":{"line":1292,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1293,"column":0},"generated":{"line":1293,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1294,"column":0},"generated":{"line":1294,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1295,"column":0},"generated":{"line":1295,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1296,"column":0},"generated":{"line":1296,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1297,"column":0},"generated":{"line":1297,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1298,"column":0},"generated":{"line":1298,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1299,"column":0},"generated":{"line":1299,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1300,"column":0},"generated":{"line":1300,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1301,"column":0},"generated":{"line":1301,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1302,"column":0},"generated":{"line":1302,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1303,"column":0},"generated":{"line":1303,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1304,"column":0},"generated":{"line":1304,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1305,"column":0},"generated":{"line":1305,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1306,"column":0},"generated":{"line":1306,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1307,"column":0},"generated":{"line":1307,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1308,"column":0},"generated":{"line":1308,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1309,"column":0},"generated":{"line":1309,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1310,"column":0},"generated":{"line":1310,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1311,"column":0},"generated":{"line":1311,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1312,"column":0},"generated":{"line":1312,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1313,"column":0},"generated":{"line":1313,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1314,"column":0},"generated":{"line":1314,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1315,"column":0},"generated":{"line":1315,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1316,"column":0},"generated":{"line":1316,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1317,"column":0},"generated":{"line":1317,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1318,"column":0},"generated":{"line":1318,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1319,"column":0},"generated":{"line":1319,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1320,"column":0},"generated":{"line":1320,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1321,"column":0},"generated":{"line":1321,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1322,"column":0},"generated":{"line":1322,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1323,"column":0},"generated":{"line":1323,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1324,"column":0},"generated":{"line":1324,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1325,"column":0},"generated":{"line":1325,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1326,"column":0},"generated":{"line":1326,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1327,"column":0},"generated":{"line":1327,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1328,"column":0},"generated":{"line":1328,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1329,"column":0},"generated":{"line":1329,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1330,"column":0},"generated":{"line":1330,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1331,"column":0},"generated":{"line":1331,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1332,"column":0},"generated":{"line":1332,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1333,"column":0},"generated":{"line":1333,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1334,"column":0},"generated":{"line":1334,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1335,"column":0},"generated":{"line":1335,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1336,"column":0},"generated":{"line":1336,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1337,"column":0},"generated":{"line":1337,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1338,"column":0},"generated":{"line":1338,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1339,"column":0},"generated":{"line":1339,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1340,"column":0},"generated":{"line":1340,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1341,"column":0},"generated":{"line":1341,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1342,"column":0},"generated":{"line":1342,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1343,"column":0},"generated":{"line":1343,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1344,"column":0},"generated":{"line":1344,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1345,"column":0},"generated":{"line":1345,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1346,"column":0},"generated":{"line":1346,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1347,"column":0},"generated":{"line":1347,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1348,"column":0},"generated":{"line":1348,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1349,"column":0},"generated":{"line":1349,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1350,"column":0},"generated":{"line":1350,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1351,"column":0},"generated":{"line":1351,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1352,"column":0},"generated":{"line":1352,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1353,"column":0},"generated":{"line":1353,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1354,"column":0},"generated":{"line":1354,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1355,"column":0},"generated":{"line":1355,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1356,"column":0},"generated":{"line":1356,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1357,"column":0},"generated":{"line":1357,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1358,"column":0},"generated":{"line":1358,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1359,"column":0},"generated":{"line":1359,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1360,"column":0},"generated":{"line":1360,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1361,"column":0},"generated":{"line":1361,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1362,"column":0},"generated":{"line":1362,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1363,"column":0},"generated":{"line":1363,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1364,"column":0},"generated":{"line":1364,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1365,"column":0},"generated":{"line":1365,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1366,"column":0},"generated":{"line":1366,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1367,"column":0},"generated":{"line":1367,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1368,"column":0},"generated":{"line":1368,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1369,"column":0},"generated":{"line":1369,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1370,"column":0},"generated":{"line":1370,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1371,"column":0},"generated":{"line":1371,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1372,"column":0},"generated":{"line":1372,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1373,"column":0},"generated":{"line":1373,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1374,"column":0},"generated":{"line":1374,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1375,"column":0},"generated":{"line":1375,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1376,"column":0},"generated":{"line":1376,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1377,"column":0},"generated":{"line":1377,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1378,"column":0},"generated":{"line":1378,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1379,"column":0},"generated":{"line":1379,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1380,"column":0},"generated":{"line":1380,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1381,"column":0},"generated":{"line":1381,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1382,"column":0},"generated":{"line":1382,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1383,"column":0},"generated":{"line":1383,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1384,"column":0},"generated":{"line":1384,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1385,"column":0},"generated":{"line":1385,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1386,"column":0},"generated":{"line":1386,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1387,"column":0},"generated":{"line":1387,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1388,"column":0},"generated":{"line":1388,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1389,"column":0},"generated":{"line":1389,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1390,"column":0},"generated":{"line":1390,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1391,"column":0},"generated":{"line":1391,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1392,"column":0},"generated":{"line":1392,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1393,"column":0},"generated":{"line":1393,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1394,"column":0},"generated":{"line":1394,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1395,"column":0},"generated":{"line":1395,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1396,"column":0},"generated":{"line":1396,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1397,"column":0},"generated":{"line":1397,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1398,"column":0},"generated":{"line":1398,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1399,"column":0},"generated":{"line":1399,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1400,"column":0},"generated":{"line":1400,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1401,"column":0},"generated":{"line":1401,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1402,"column":0},"generated":{"line":1402,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1403,"column":0},"generated":{"line":1403,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1404,"column":0},"generated":{"line":1404,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1405,"column":0},"generated":{"line":1405,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1406,"column":0},"generated":{"line":1406,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1407,"column":0},"generated":{"line":1407,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1408,"column":0},"generated":{"line":1408,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1409,"column":0},"generated":{"line":1409,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1410,"column":0},"generated":{"line":1410,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1411,"column":0},"generated":{"line":1411,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1412,"column":0},"generated":{"line":1412,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1413,"column":0},"generated":{"line":1413,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1414,"column":0},"generated":{"line":1414,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1415,"column":0},"generated":{"line":1415,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1416,"column":0},"generated":{"line":1416,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1417,"column":0},"generated":{"line":1417,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1418,"column":0},"generated":{"line":1418,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1419,"column":0},"generated":{"line":1419,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1420,"column":0},"generated":{"line":1420,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1421,"column":0},"generated":{"line":1421,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1422,"column":0},"generated":{"line":1422,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1423,"column":0},"generated":{"line":1423,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1424,"column":0},"generated":{"line":1424,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1425,"column":0},"generated":{"line":1425,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1426,"column":0},"generated":{"line":1426,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1427,"column":0},"generated":{"line":1427,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1428,"column":0},"generated":{"line":1428,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1429,"column":0},"generated":{"line":1429,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1430,"column":0},"generated":{"line":1430,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1431,"column":0},"generated":{"line":1431,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1432,"column":0},"generated":{"line":1432,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1433,"column":0},"generated":{"line":1433,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1434,"column":0},"generated":{"line":1434,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1435,"column":0},"generated":{"line":1435,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1436,"column":0},"generated":{"line":1436,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1437,"column":0},"generated":{"line":1437,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1438,"column":0},"generated":{"line":1438,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1439,"column":0},"generated":{"line":1439,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1440,"column":0},"generated":{"line":1440,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1441,"column":0},"generated":{"line":1441,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1442,"column":0},"generated":{"line":1442,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1443,"column":0},"generated":{"line":1443,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1444,"column":0},"generated":{"line":1444,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1445,"column":0},"generated":{"line":1445,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1446,"column":0},"generated":{"line":1446,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1447,"column":0},"generated":{"line":1447,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1448,"column":0},"generated":{"line":1448,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1449,"column":0},"generated":{"line":1449,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1450,"column":0},"generated":{"line":1450,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1451,"column":0},"generated":{"line":1451,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1452,"column":0},"generated":{"line":1452,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1453,"column":0},"generated":{"line":1453,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1454,"column":0},"generated":{"line":1454,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1455,"column":0},"generated":{"line":1455,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1456,"column":0},"generated":{"line":1456,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1457,"column":0},"generated":{"line":1457,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1458,"column":0},"generated":{"line":1458,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1459,"column":0},"generated":{"line":1459,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1460,"column":0},"generated":{"line":1460,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1461,"column":0},"generated":{"line":1461,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1462,"column":0},"generated":{"line":1462,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1463,"column":0},"generated":{"line":1463,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1464,"column":0},"generated":{"line":1464,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1465,"column":0},"generated":{"line":1465,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1466,"column":0},"generated":{"line":1466,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1467,"column":0},"generated":{"line":1467,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1468,"column":0},"generated":{"line":1468,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1469,"column":0},"generated":{"line":1469,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1470,"column":0},"generated":{"line":1470,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1471,"column":0},"generated":{"line":1471,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1472,"column":0},"generated":{"line":1472,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1473,"column":0},"generated":{"line":1473,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1474,"column":0},"generated":{"line":1474,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1475,"column":0},"generated":{"line":1475,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1476,"column":0},"generated":{"line":1476,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1477,"column":0},"generated":{"line":1477,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1478,"column":0},"generated":{"line":1478,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1479,"column":0},"generated":{"line":1479,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1480,"column":0},"generated":{"line":1480,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1481,"column":0},"generated":{"line":1481,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1482,"column":0},"generated":{"line":1482,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1483,"column":0},"generated":{"line":1483,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1484,"column":0},"generated":{"line":1484,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1485,"column":0},"generated":{"line":1485,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1486,"column":0},"generated":{"line":1486,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1487,"column":0},"generated":{"line":1487,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1488,"column":0},"generated":{"line":1488,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1489,"column":0},"generated":{"line":1489,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1490,"column":0},"generated":{"line":1490,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1491,"column":0},"generated":{"line":1491,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1492,"column":0},"generated":{"line":1492,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1493,"column":0},"generated":{"line":1493,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1494,"column":0},"generated":{"line":1494,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1495,"column":0},"generated":{"line":1495,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1496,"column":0},"generated":{"line":1496,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1497,"column":0},"generated":{"line":1497,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1498,"column":0},"generated":{"line":1498,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1499,"column":0},"generated":{"line":1499,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1500,"column":0},"generated":{"line":1500,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1501,"column":0},"generated":{"line":1501,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1502,"column":0},"generated":{"line":1502,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1503,"column":0},"generated":{"line":1503,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1504,"column":0},"generated":{"line":1504,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1505,"column":0},"generated":{"line":1505,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1506,"column":0},"generated":{"line":1506,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1507,"column":0},"generated":{"line":1507,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1508,"column":0},"generated":{"line":1508,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1509,"column":0},"generated":{"line":1509,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1510,"column":0},"generated":{"line":1510,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1511,"column":0},"generated":{"line":1511,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1512,"column":0},"generated":{"line":1512,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1513,"column":0},"generated":{"line":1513,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1514,"column":0},"generated":{"line":1514,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1515,"column":0},"generated":{"line":1515,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1516,"column":0},"generated":{"line":1516,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1517,"column":0},"generated":{"line":1517,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1518,"column":0},"generated":{"line":1518,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1519,"column":0},"generated":{"line":1519,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1520,"column":0},"generated":{"line":1520,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1521,"column":0},"generated":{"line":1521,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1522,"column":0},"generated":{"line":1522,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1523,"column":0},"generated":{"line":1523,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1524,"column":0},"generated":{"line":1524,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1525,"column":0},"generated":{"line":1525,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1526,"column":0},"generated":{"line":1526,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1527,"column":0},"generated":{"line":1527,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1528,"column":0},"generated":{"line":1528,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1529,"column":0},"generated":{"line":1529,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1530,"column":0},"generated":{"line":1530,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1531,"column":0},"generated":{"line":1531,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1532,"column":0},"generated":{"line":1532,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1533,"column":0},"generated":{"line":1533,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1534,"column":0},"generated":{"line":1534,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1535,"column":0},"generated":{"line":1535,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1536,"column":0},"generated":{"line":1536,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1537,"column":0},"generated":{"line":1537,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1538,"column":0},"generated":{"line":1538,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1539,"column":0},"generated":{"line":1539,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1540,"column":0},"generated":{"line":1540,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1541,"column":0},"generated":{"line":1541,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1542,"column":0},"generated":{"line":1542,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1543,"column":0},"generated":{"line":1543,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1544,"column":0},"generated":{"line":1544,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1545,"column":0},"generated":{"line":1545,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1546,"column":0},"generated":{"line":1546,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1547,"column":0},"generated":{"line":1547,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1548,"column":0},"generated":{"line":1548,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1549,"column":0},"generated":{"line":1549,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1550,"column":0},"generated":{"line":1550,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1551,"column":0},"generated":{"line":1551,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1552,"column":0},"generated":{"line":1552,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1553,"column":0},"generated":{"line":1553,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1554,"column":0},"generated":{"line":1554,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1555,"column":0},"generated":{"line":1555,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1556,"column":0},"generated":{"line":1556,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1557,"column":0},"generated":{"line":1557,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1558,"column":0},"generated":{"line":1558,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1559,"column":0},"generated":{"line":1559,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1560,"column":0},"generated":{"line":1560,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1561,"column":0},"generated":{"line":1561,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1562,"column":0},"generated":{"line":1562,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1563,"column":0},"generated":{"line":1563,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1564,"column":0},"generated":{"line":1564,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1565,"column":0},"generated":{"line":1565,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1566,"column":0},"generated":{"line":1566,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1567,"column":0},"generated":{"line":1567,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1568,"column":0},"generated":{"line":1568,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1569,"column":0},"generated":{"line":1569,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1570,"column":0},"generated":{"line":1570,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1571,"column":0},"generated":{"line":1571,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1572,"column":0},"generated":{"line":1572,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1573,"column":0},"generated":{"line":1573,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1574,"column":0},"generated":{"line":1574,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1575,"column":0},"generated":{"line":1575,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1576,"column":0},"generated":{"line":1576,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1577,"column":0},"generated":{"line":1577,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1578,"column":0},"generated":{"line":1578,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1579,"column":0},"generated":{"line":1579,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1580,"column":0},"generated":{"line":1580,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1581,"column":0},"generated":{"line":1581,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1582,"column":0},"generated":{"line":1582,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1583,"column":0},"generated":{"line":1583,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1584,"column":0},"generated":{"line":1584,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1585,"column":0},"generated":{"line":1585,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1586,"column":0},"generated":{"line":1586,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1587,"column":0},"generated":{"line":1587,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1588,"column":0},"generated":{"line":1588,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1589,"column":0},"generated":{"line":1589,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1590,"column":0},"generated":{"line":1590,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1591,"column":0},"generated":{"line":1591,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1592,"column":0},"generated":{"line":1592,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1593,"column":0},"generated":{"line":1593,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1594,"column":0},"generated":{"line":1594,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1595,"column":0},"generated":{"line":1595,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1596,"column":0},"generated":{"line":1596,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1597,"column":0},"generated":{"line":1597,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1598,"column":0},"generated":{"line":1598,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1599,"column":0},"generated":{"line":1599,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1600,"column":0},"generated":{"line":1600,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1601,"column":0},"generated":{"line":1601,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1602,"column":0},"generated":{"line":1602,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1603,"column":0},"generated":{"line":1603,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1604,"column":0},"generated":{"line":1604,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1605,"column":0},"generated":{"line":1605,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1606,"column":0},"generated":{"line":1606,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1607,"column":0},"generated":{"line":1607,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1608,"column":0},"generated":{"line":1608,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1609,"column":0},"generated":{"line":1609,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1610,"column":0},"generated":{"line":1610,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1611,"column":0},"generated":{"line":1611,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1612,"column":0},"generated":{"line":1612,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1613,"column":0},"generated":{"line":1613,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1614,"column":0},"generated":{"line":1614,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1615,"column":0},"generated":{"line":1615,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1616,"column":0},"generated":{"line":1616,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1617,"column":0},"generated":{"line":1617,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1618,"column":0},"generated":{"line":1618,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1619,"column":0},"generated":{"line":1619,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1620,"column":0},"generated":{"line":1620,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1621,"column":0},"generated":{"line":1621,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1622,"column":0},"generated":{"line":1622,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1623,"column":0},"generated":{"line":1623,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1624,"column":0},"generated":{"line":1624,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1625,"column":0},"generated":{"line":1625,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1626,"column":0},"generated":{"line":1626,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1627,"column":0},"generated":{"line":1627,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1628,"column":0},"generated":{"line":1628,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1629,"column":0},"generated":{"line":1629,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1630,"column":0},"generated":{"line":1630,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1631,"column":0},"generated":{"line":1631,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1632,"column":0},"generated":{"line":1632,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1633,"column":0},"generated":{"line":1633,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1634,"column":0},"generated":{"line":1634,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1635,"column":0},"generated":{"line":1635,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1636,"column":0},"generated":{"line":1636,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1637,"column":0},"generated":{"line":1637,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1638,"column":0},"generated":{"line":1638,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1639,"column":0},"generated":{"line":1639,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1640,"column":0},"generated":{"line":1640,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1641,"column":0},"generated":{"line":1641,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1642,"column":0},"generated":{"line":1642,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1643,"column":0},"generated":{"line":1643,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1644,"column":0},"generated":{"line":1644,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1645,"column":0},"generated":{"line":1645,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1646,"column":0},"generated":{"line":1646,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1647,"column":0},"generated":{"line":1647,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1648,"column":0},"generated":{"line":1648,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1649,"column":0},"generated":{"line":1649,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1650,"column":0},"generated":{"line":1650,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1651,"column":0},"generated":{"line":1651,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1652,"column":0},"generated":{"line":1652,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1653,"column":0},"generated":{"line":1653,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1654,"column":0},"generated":{"line":1654,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1655,"column":0},"generated":{"line":1655,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1656,"column":0},"generated":{"line":1656,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1657,"column":0},"generated":{"line":1657,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1658,"column":0},"generated":{"line":1658,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1659,"column":0},"generated":{"line":1659,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1660,"column":0},"generated":{"line":1660,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1661,"column":0},"generated":{"line":1661,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1662,"column":0},"generated":{"line":1662,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1663,"column":0},"generated":{"line":1663,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1664,"column":0},"generated":{"line":1664,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1665,"column":0},"generated":{"line":1665,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1666,"column":0},"generated":{"line":1666,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1667,"column":0},"generated":{"line":1667,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1668,"column":0},"generated":{"line":1668,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1669,"column":0},"generated":{"line":1669,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1670,"column":0},"generated":{"line":1670,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1671,"column":0},"generated":{"line":1671,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1672,"column":0},"generated":{"line":1672,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1673,"column":0},"generated":{"line":1673,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1674,"column":0},"generated":{"line":1674,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1675,"column":0},"generated":{"line":1675,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1676,"column":0},"generated":{"line":1676,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1677,"column":0},"generated":{"line":1677,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1678,"column":0},"generated":{"line":1678,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1679,"column":0},"generated":{"line":1679,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1680,"column":0},"generated":{"line":1680,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1681,"column":0},"generated":{"line":1681,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1682,"column":0},"generated":{"line":1682,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1683,"column":0},"generated":{"line":1683,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1684,"column":0},"generated":{"line":1684,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1685,"column":0},"generated":{"line":1685,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1686,"column":0},"generated":{"line":1686,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1687,"column":0},"generated":{"line":1687,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1688,"column":0},"generated":{"line":1688,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1689,"column":0},"generated":{"line":1689,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1690,"column":0},"generated":{"line":1690,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1691,"column":0},"generated":{"line":1691,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1692,"column":0},"generated":{"line":1692,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1693,"column":0},"generated":{"line":1693,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1694,"column":0},"generated":{"line":1694,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1695,"column":0},"generated":{"line":1695,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1696,"column":0},"generated":{"line":1696,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1697,"column":0},"generated":{"line":1697,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1698,"column":0},"generated":{"line":1698,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1699,"column":0},"generated":{"line":1699,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1700,"column":0},"generated":{"line":1700,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1701,"column":0},"generated":{"line":1701,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1702,"column":0},"generated":{"line":1702,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1703,"column":0},"generated":{"line":1703,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1704,"column":0},"generated":{"line":1704,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1705,"column":0},"generated":{"line":1705,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1706,"column":0},"generated":{"line":1706,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1707,"column":0},"generated":{"line":1707,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1708,"column":0},"generated":{"line":1708,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1709,"column":0},"generated":{"line":1709,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1710,"column":0},"generated":{"line":1710,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1711,"column":0},"generated":{"line":1711,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1712,"column":0},"generated":{"line":1712,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1713,"column":0},"generated":{"line":1713,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1714,"column":0},"generated":{"line":1714,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1715,"column":0},"generated":{"line":1715,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1716,"column":0},"generated":{"line":1716,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1717,"column":0},"generated":{"line":1717,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1718,"column":0},"generated":{"line":1718,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1719,"column":0},"generated":{"line":1719,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1720,"column":0},"generated":{"line":1720,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1721,"column":0},"generated":{"line":1721,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1722,"column":0},"generated":{"line":1722,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1723,"column":0},"generated":{"line":1723,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1724,"column":0},"generated":{"line":1724,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1725,"column":0},"generated":{"line":1725,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1726,"column":0},"generated":{"line":1726,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1727,"column":0},"generated":{"line":1727,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1728,"column":0},"generated":{"line":1728,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1729,"column":0},"generated":{"line":1729,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1730,"column":0},"generated":{"line":1730,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1731,"column":0},"generated":{"line":1731,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1732,"column":0},"generated":{"line":1732,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1733,"column":0},"generated":{"line":1733,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1734,"column":0},"generated":{"line":1734,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1735,"column":0},"generated":{"line":1735,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1736,"column":0},"generated":{"line":1736,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1737,"column":0},"generated":{"line":1737,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1738,"column":0},"generated":{"line":1738,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1739,"column":0},"generated":{"line":1739,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1740,"column":0},"generated":{"line":1740,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1741,"column":0},"generated":{"line":1741,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1742,"column":0},"generated":{"line":1742,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1743,"column":0},"generated":{"line":1743,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1744,"column":0},"generated":{"line":1744,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1745,"column":0},"generated":{"line":1745,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1746,"column":0},"generated":{"line":1746,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1747,"column":0},"generated":{"line":1747,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1748,"column":0},"generated":{"line":1748,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1749,"column":0},"generated":{"line":1749,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1750,"column":0},"generated":{"line":1750,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1751,"column":0},"generated":{"line":1751,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1752,"column":0},"generated":{"line":1752,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1753,"column":0},"generated":{"line":1753,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1754,"column":0},"generated":{"line":1754,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1755,"column":0},"generated":{"line":1755,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1756,"column":0},"generated":{"line":1756,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1757,"column":0},"generated":{"line":1757,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1758,"column":0},"generated":{"line":1758,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1759,"column":0},"generated":{"line":1759,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1760,"column":0},"generated":{"line":1760,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1761,"column":0},"generated":{"line":1761,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1762,"column":0},"generated":{"line":1762,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1763,"column":0},"generated":{"line":1763,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1764,"column":0},"generated":{"line":1764,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1765,"column":0},"generated":{"line":1765,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1766,"column":0},"generated":{"line":1766,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1767,"column":0},"generated":{"line":1767,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1768,"column":0},"generated":{"line":1768,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1769,"column":0},"generated":{"line":1769,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1770,"column":0},"generated":{"line":1770,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1771,"column":0},"generated":{"line":1771,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1772,"column":0},"generated":{"line":1772,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1773,"column":0},"generated":{"line":1773,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1774,"column":0},"generated":{"line":1774,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1775,"column":0},"generated":{"line":1775,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1776,"column":0},"generated":{"line":1776,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1777,"column":0},"generated":{"line":1777,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1778,"column":0},"generated":{"line":1778,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1779,"column":0},"generated":{"line":1779,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1780,"column":0},"generated":{"line":1780,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1781,"column":0},"generated":{"line":1781,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1782,"column":0},"generated":{"line":1782,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1783,"column":0},"generated":{"line":1783,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1784,"column":0},"generated":{"line":1784,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1785,"column":0},"generated":{"line":1785,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1786,"column":0},"generated":{"line":1786,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1787,"column":0},"generated":{"line":1787,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1788,"column":0},"generated":{"line":1788,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1789,"column":0},"generated":{"line":1789,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1790,"column":0},"generated":{"line":1790,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1791,"column":0},"generated":{"line":1791,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1792,"column":0},"generated":{"line":1792,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1793,"column":0},"generated":{"line":1793,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1794,"column":0},"generated":{"line":1794,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1795,"column":0},"generated":{"line":1795,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1796,"column":0},"generated":{"line":1796,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1797,"column":0},"generated":{"line":1797,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1798,"column":0},"generated":{"line":1798,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1799,"column":0},"generated":{"line":1799,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1800,"column":0},"generated":{"line":1800,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1801,"column":0},"generated":{"line":1801,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1802,"column":0},"generated":{"line":1802,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1803,"column":0},"generated":{"line":1803,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1804,"column":0},"generated":{"line":1804,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1805,"column":0},"generated":{"line":1805,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1806,"column":0},"generated":{"line":1806,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1807,"column":0},"generated":{"line":1807,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1808,"column":0},"generated":{"line":1808,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1809,"column":0},"generated":{"line":1809,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1810,"column":0},"generated":{"line":1810,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1811,"column":0},"generated":{"line":1811,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1812,"column":0},"generated":{"line":1812,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1813,"column":0},"generated":{"line":1813,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1814,"column":0},"generated":{"line":1814,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1815,"column":0},"generated":{"line":1815,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1816,"column":0},"generated":{"line":1816,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1817,"column":0},"generated":{"line":1817,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1818,"column":0},"generated":{"line":1818,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1819,"column":0},"generated":{"line":1819,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1820,"column":0},"generated":{"line":1820,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1821,"column":0},"generated":{"line":1821,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1822,"column":0},"generated":{"line":1822,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1823,"column":0},"generated":{"line":1823,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1824,"column":0},"generated":{"line":1824,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1825,"column":0},"generated":{"line":1825,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1826,"column":0},"generated":{"line":1826,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1827,"column":0},"generated":{"line":1827,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1828,"column":0},"generated":{"line":1828,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1829,"column":0},"generated":{"line":1829,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1830,"column":0},"generated":{"line":1830,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1831,"column":0},"generated":{"line":1831,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1832,"column":0},"generated":{"line":1832,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1833,"column":0},"generated":{"line":1833,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1834,"column":0},"generated":{"line":1834,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1835,"column":0},"generated":{"line":1835,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1836,"column":0},"generated":{"line":1836,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1837,"column":0},"generated":{"line":1837,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1838,"column":0},"generated":{"line":1838,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1839,"column":0},"generated":{"line":1839,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1840,"column":0},"generated":{"line":1840,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1841,"column":0},"generated":{"line":1841,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1842,"column":0},"generated":{"line":1842,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1843,"column":0},"generated":{"line":1843,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1844,"column":0},"generated":{"line":1844,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1845,"column":0},"generated":{"line":1845,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1846,"column":0},"generated":{"line":1846,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1847,"column":0},"generated":{"line":1847,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1848,"column":0},"generated":{"line":1848,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1849,"column":0},"generated":{"line":1849,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1850,"column":0},"generated":{"line":1850,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1851,"column":0},"generated":{"line":1851,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1852,"column":0},"generated":{"line":1852,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1853,"column":0},"generated":{"line":1853,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1854,"column":0},"generated":{"line":1854,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1855,"column":0},"generated":{"line":1855,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1856,"column":0},"generated":{"line":1856,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1857,"column":0},"generated":{"line":1857,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1858,"column":0},"generated":{"line":1858,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1859,"column":0},"generated":{"line":1859,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1860,"column":0},"generated":{"line":1860,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1861,"column":0},"generated":{"line":1861,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1862,"column":0},"generated":{"line":1862,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1863,"column":0},"generated":{"line":1863,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1864,"column":0},"generated":{"line":1864,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1865,"column":0},"generated":{"line":1865,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1866,"column":0},"generated":{"line":1866,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1867,"column":0},"generated":{"line":1867,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1868,"column":0},"generated":{"line":1868,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1869,"column":0},"generated":{"line":1869,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1870,"column":0},"generated":{"line":1870,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1871,"column":0},"generated":{"line":1871,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1872,"column":0},"generated":{"line":1872,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1873,"column":0},"generated":{"line":1873,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1874,"column":0},"generated":{"line":1874,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1875,"column":0},"generated":{"line":1875,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1876,"column":0},"generated":{"line":1876,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1877,"column":0},"generated":{"line":1877,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1878,"column":0},"generated":{"line":1878,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1879,"column":0},"generated":{"line":1879,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1880,"column":0},"generated":{"line":1880,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1881,"column":0},"generated":{"line":1881,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1882,"column":0},"generated":{"line":1882,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1883,"column":0},"generated":{"line":1883,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1884,"column":0},"generated":{"line":1884,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1885,"column":0},"generated":{"line":1885,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1886,"column":0},"generated":{"line":1886,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1887,"column":0},"generated":{"line":1887,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1888,"column":0},"generated":{"line":1888,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1889,"column":0},"generated":{"line":1889,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1890,"column":0},"generated":{"line":1890,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1891,"column":0},"generated":{"line":1891,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1892,"column":0},"generated":{"line":1892,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1893,"column":0},"generated":{"line":1893,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1894,"column":0},"generated":{"line":1894,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1895,"column":0},"generated":{"line":1895,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1896,"column":0},"generated":{"line":1896,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1897,"column":0},"generated":{"line":1897,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1898,"column":0},"generated":{"line":1898,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1899,"column":0},"generated":{"line":1899,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1900,"column":0},"generated":{"line":1900,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1901,"column":0},"generated":{"line":1901,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1902,"column":0},"generated":{"line":1902,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1903,"column":0},"generated":{"line":1903,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1904,"column":0},"generated":{"line":1904,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1905,"column":0},"generated":{"line":1905,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1906,"column":0},"generated":{"line":1906,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1907,"column":0},"generated":{"line":1907,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1908,"column":0},"generated":{"line":1908,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1909,"column":0},"generated":{"line":1909,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1910,"column":0},"generated":{"line":1910,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1911,"column":0},"generated":{"line":1911,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1912,"column":0},"generated":{"line":1912,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1913,"column":0},"generated":{"line":1913,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1914,"column":0},"generated":{"line":1914,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1915,"column":0},"generated":{"line":1915,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1916,"column":0},"generated":{"line":1916,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1917,"column":0},"generated":{"line":1917,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1918,"column":0},"generated":{"line":1918,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1919,"column":0},"generated":{"line":1919,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1920,"column":0},"generated":{"line":1920,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1921,"column":0},"generated":{"line":1921,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1922,"column":0},"generated":{"line":1922,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1923,"column":0},"generated":{"line":1923,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1924,"column":0},"generated":{"line":1924,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1925,"column":0},"generated":{"line":1925,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1926,"column":0},"generated":{"line":1926,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1927,"column":0},"generated":{"line":1927,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1928,"column":0},"generated":{"line":1928,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1929,"column":0},"generated":{"line":1929,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1930,"column":0},"generated":{"line":1930,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1931,"column":0},"generated":{"line":1931,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1932,"column":0},"generated":{"line":1932,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1933,"column":0},"generated":{"line":1933,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1934,"column":0},"generated":{"line":1934,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1935,"column":0},"generated":{"line":1935,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1936,"column":0},"generated":{"line":1936,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1937,"column":0},"generated":{"line":1937,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1938,"column":0},"generated":{"line":1938,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1939,"column":0},"generated":{"line":1939,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1940,"column":0},"generated":{"line":1940,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1941,"column":0},"generated":{"line":1941,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1942,"column":0},"generated":{"line":1942,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1943,"column":0},"generated":{"line":1943,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1944,"column":0},"generated":{"line":1944,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1945,"column":0},"generated":{"line":1945,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1946,"column":0},"generated":{"line":1946,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1947,"column":0},"generated":{"line":1947,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1948,"column":0},"generated":{"line":1948,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1949,"column":0},"generated":{"line":1949,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1950,"column":0},"generated":{"line":1950,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1951,"column":0},"generated":{"line":1951,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1952,"column":0},"generated":{"line":1952,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1953,"column":0},"generated":{"line":1953,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1954,"column":0},"generated":{"line":1954,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1955,"column":0},"generated":{"line":1955,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1956,"column":0},"generated":{"line":1956,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1957,"column":0},"generated":{"line":1957,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1958,"column":0},"generated":{"line":1958,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1959,"column":0},"generated":{"line":1959,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1960,"column":0},"generated":{"line":1960,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1961,"column":0},"generated":{"line":1961,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1962,"column":0},"generated":{"line":1962,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1963,"column":0},"generated":{"line":1963,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1964,"column":0},"generated":{"line":1964,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1965,"column":0},"generated":{"line":1965,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1966,"column":0},"generated":{"line":1966,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1967,"column":0},"generated":{"line":1967,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1968,"column":0},"generated":{"line":1968,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1969,"column":0},"generated":{"line":1969,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1970,"column":0},"generated":{"line":1970,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1971,"column":0},"generated":{"line":1971,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1972,"column":0},"generated":{"line":1972,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1973,"column":0},"generated":{"line":1973,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1974,"column":0},"generated":{"line":1974,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1975,"column":0},"generated":{"line":1975,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1976,"column":0},"generated":{"line":1976,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1977,"column":0},"generated":{"line":1977,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1978,"column":0},"generated":{"line":1978,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1979,"column":0},"generated":{"line":1979,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1980,"column":0},"generated":{"line":1980,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1981,"column":0},"generated":{"line":1981,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1982,"column":0},"generated":{"line":1982,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1983,"column":0},"generated":{"line":1983,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1984,"column":0},"generated":{"line":1984,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1985,"column":0},"generated":{"line":1985,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1986,"column":0},"generated":{"line":1986,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1987,"column":0},"generated":{"line":1987,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1988,"column":0},"generated":{"line":1988,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1989,"column":0},"generated":{"line":1989,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1990,"column":0},"generated":{"line":1990,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1991,"column":0},"generated":{"line":1991,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1992,"column":0},"generated":{"line":1992,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1993,"column":0},"generated":{"line":1993,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1994,"column":0},"generated":{"line":1994,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1995,"column":0},"generated":{"line":1995,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1996,"column":0},"generated":{"line":1996,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1997,"column":0},"generated":{"line":1997,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1998,"column":0},"generated":{"line":1998,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":1999,"column":0},"generated":{"line":1999,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2000,"column":0},"generated":{"line":2000,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2001,"column":0},"generated":{"line":2001,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2002,"column":0},"generated":{"line":2002,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2003,"column":0},"generated":{"line":2003,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2004,"column":0},"generated":{"line":2004,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2005,"column":0},"generated":{"line":2005,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2006,"column":0},"generated":{"line":2006,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2007,"column":0},"generated":{"line":2007,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2008,"column":0},"generated":{"line":2008,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2009,"column":0},"generated":{"line":2009,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2010,"column":0},"generated":{"line":2010,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2011,"column":0},"generated":{"line":2011,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2012,"column":0},"generated":{"line":2012,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2013,"column":0},"generated":{"line":2013,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2014,"column":0},"generated":{"line":2014,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2015,"column":0},"generated":{"line":2015,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2016,"column":0},"generated":{"line":2016,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2017,"column":0},"generated":{"line":2017,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2018,"column":0},"generated":{"line":2018,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2019,"column":0},"generated":{"line":2019,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2020,"column":0},"generated":{"line":2020,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2021,"column":0},"generated":{"line":2021,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2022,"column":0},"generated":{"line":2022,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2023,"column":0},"generated":{"line":2023,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2024,"column":0},"generated":{"line":2024,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2025,"column":0},"generated":{"line":2025,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2026,"column":0},"generated":{"line":2026,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2027,"column":0},"generated":{"line":2027,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2028,"column":0},"generated":{"line":2028,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2029,"column":0},"generated":{"line":2029,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2030,"column":0},"generated":{"line":2030,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2031,"column":0},"generated":{"line":2031,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2032,"column":0},"generated":{"line":2032,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2033,"column":0},"generated":{"line":2033,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2034,"column":0},"generated":{"line":2034,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2035,"column":0},"generated":{"line":2035,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2036,"column":0},"generated":{"line":2036,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2037,"column":0},"generated":{"line":2037,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2038,"column":0},"generated":{"line":2038,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2039,"column":0},"generated":{"line":2039,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2040,"column":0},"generated":{"line":2040,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2041,"column":0},"generated":{"line":2041,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2042,"column":0},"generated":{"line":2042,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2043,"column":0},"generated":{"line":2043,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2044,"column":0},"generated":{"line":2044,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2045,"column":0},"generated":{"line":2045,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2046,"column":0},"generated":{"line":2046,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2047,"column":0},"generated":{"line":2047,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2048,"column":0},"generated":{"line":2048,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2049,"column":0},"generated":{"line":2049,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2050,"column":0},"generated":{"line":2050,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2051,"column":0},"generated":{"line":2051,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2052,"column":0},"generated":{"line":2052,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2053,"column":0},"generated":{"line":2053,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2054,"column":0},"generated":{"line":2054,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2055,"column":0},"generated":{"line":2055,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2056,"column":0},"generated":{"line":2056,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2057,"column":0},"generated":{"line":2057,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2058,"column":0},"generated":{"line":2058,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2059,"column":0},"generated":{"line":2059,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2060,"column":0},"generated":{"line":2060,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2061,"column":0},"generated":{"line":2061,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2062,"column":0},"generated":{"line":2062,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2063,"column":0},"generated":{"line":2063,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2064,"column":0},"generated":{"line":2064,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2065,"column":0},"generated":{"line":2065,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2066,"column":0},"generated":{"line":2066,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2067,"column":0},"generated":{"line":2067,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2068,"column":0},"generated":{"line":2068,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2069,"column":0},"generated":{"line":2069,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2070,"column":0},"generated":{"line":2070,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2071,"column":0},"generated":{"line":2071,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2072,"column":0},"generated":{"line":2072,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2073,"column":0},"generated":{"line":2073,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2074,"column":0},"generated":{"line":2074,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2075,"column":0},"generated":{"line":2075,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2076,"column":0},"generated":{"line":2076,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2077,"column":0},"generated":{"line":2077,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2078,"column":0},"generated":{"line":2078,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2079,"column":0},"generated":{"line":2079,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2080,"column":0},"generated":{"line":2080,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2081,"column":0},"generated":{"line":2081,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2082,"column":0},"generated":{"line":2082,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2083,"column":0},"generated":{"line":2083,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2084,"column":0},"generated":{"line":2084,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2085,"column":0},"generated":{"line":2085,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2086,"column":0},"generated":{"line":2086,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2087,"column":0},"generated":{"line":2087,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2088,"column":0},"generated":{"line":2088,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2089,"column":0},"generated":{"line":2089,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2090,"column":0},"generated":{"line":2090,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2091,"column":0},"generated":{"line":2091,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2092,"column":0},"generated":{"line":2092,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2093,"column":0},"generated":{"line":2093,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2094,"column":0},"generated":{"line":2094,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2095,"column":0},"generated":{"line":2095,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2096,"column":0},"generated":{"line":2096,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2097,"column":0},"generated":{"line":2097,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2098,"column":0},"generated":{"line":2098,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2099,"column":0},"generated":{"line":2099,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2100,"column":0},"generated":{"line":2100,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2101,"column":0},"generated":{"line":2101,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2102,"column":0},"generated":{"line":2102,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2103,"column":0},"generated":{"line":2103,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2104,"column":0},"generated":{"line":2104,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2105,"column":0},"generated":{"line":2105,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2106,"column":0},"generated":{"line":2106,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2107,"column":0},"generated":{"line":2107,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2108,"column":0},"generated":{"line":2108,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2109,"column":0},"generated":{"line":2109,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2110,"column":0},"generated":{"line":2110,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2111,"column":0},"generated":{"line":2111,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2112,"column":0},"generated":{"line":2112,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2113,"column":0},"generated":{"line":2113,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2114,"column":0},"generated":{"line":2114,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2115,"column":0},"generated":{"line":2115,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2116,"column":0},"generated":{"line":2116,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2117,"column":0},"generated":{"line":2117,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2118,"column":0},"generated":{"line":2118,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2119,"column":0},"generated":{"line":2119,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2120,"column":0},"generated":{"line":2120,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2121,"column":0},"generated":{"line":2121,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2122,"column":0},"generated":{"line":2122,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2123,"column":0},"generated":{"line":2123,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2124,"column":0},"generated":{"line":2124,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2125,"column":0},"generated":{"line":2125,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2126,"column":0},"generated":{"line":2126,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2127,"column":0},"generated":{"line":2127,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2128,"column":0},"generated":{"line":2128,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2129,"column":0},"generated":{"line":2129,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2130,"column":0},"generated":{"line":2130,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2131,"column":0},"generated":{"line":2131,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2132,"column":0},"generated":{"line":2132,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2133,"column":0},"generated":{"line":2133,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2134,"column":0},"generated":{"line":2134,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2135,"column":0},"generated":{"line":2135,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2136,"column":0},"generated":{"line":2136,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2137,"column":0},"generated":{"line":2137,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2138,"column":0},"generated":{"line":2138,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2139,"column":0},"generated":{"line":2139,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2140,"column":0},"generated":{"line":2140,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2141,"column":0},"generated":{"line":2141,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2142,"column":0},"generated":{"line":2142,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2143,"column":0},"generated":{"line":2143,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2144,"column":0},"generated":{"line":2144,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2145,"column":0},"generated":{"line":2145,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2146,"column":0},"generated":{"line":2146,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2147,"column":0},"generated":{"line":2147,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2148,"column":0},"generated":{"line":2148,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2149,"column":0},"generated":{"line":2149,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2150,"column":0},"generated":{"line":2150,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2151,"column":0},"generated":{"line":2151,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2152,"column":0},"generated":{"line":2152,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2153,"column":0},"generated":{"line":2153,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2154,"column":0},"generated":{"line":2154,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2155,"column":0},"generated":{"line":2155,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2156,"column":0},"generated":{"line":2156,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2157,"column":0},"generated":{"line":2157,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2158,"column":0},"generated":{"line":2158,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2159,"column":0},"generated":{"line":2159,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2160,"column":0},"generated":{"line":2160,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2161,"column":0},"generated":{"line":2161,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2162,"column":0},"generated":{"line":2162,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2163,"column":0},"generated":{"line":2163,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2164,"column":0},"generated":{"line":2164,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2165,"column":0},"generated":{"line":2165,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2166,"column":0},"generated":{"line":2166,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2167,"column":0},"generated":{"line":2167,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2168,"column":0},"generated":{"line":2168,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2169,"column":0},"generated":{"line":2169,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2170,"column":0},"generated":{"line":2170,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2171,"column":0},"generated":{"line":2171,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2172,"column":0},"generated":{"line":2172,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2173,"column":0},"generated":{"line":2173,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2174,"column":0},"generated":{"line":2174,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2175,"column":0},"generated":{"line":2175,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2176,"column":0},"generated":{"line":2176,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2177,"column":0},"generated":{"line":2177,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2178,"column":0},"generated":{"line":2178,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2179,"column":0},"generated":{"line":2179,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2180,"column":0},"generated":{"line":2180,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2181,"column":0},"generated":{"line":2181,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2182,"column":0},"generated":{"line":2182,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2183,"column":0},"generated":{"line":2183,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2184,"column":0},"generated":{"line":2184,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2185,"column":0},"generated":{"line":2185,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2186,"column":0},"generated":{"line":2186,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2187,"column":0},"generated":{"line":2187,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2188,"column":0},"generated":{"line":2188,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2189,"column":0},"generated":{"line":2189,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2190,"column":0},"generated":{"line":2190,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2191,"column":0},"generated":{"line":2191,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2192,"column":0},"generated":{"line":2192,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2193,"column":0},"generated":{"line":2193,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2194,"column":0},"generated":{"line":2194,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2195,"column":0},"generated":{"line":2195,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2196,"column":0},"generated":{"line":2196,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2197,"column":0},"generated":{"line":2197,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2198,"column":0},"generated":{"line":2198,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2199,"column":0},"generated":{"line":2199,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2200,"column":0},"generated":{"line":2200,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2201,"column":0},"generated":{"line":2201,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2202,"column":0},"generated":{"line":2202,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2203,"column":0},"generated":{"line":2203,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2204,"column":0},"generated":{"line":2204,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2205,"column":0},"generated":{"line":2205,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2206,"column":0},"generated":{"line":2206,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2207,"column":0},"generated":{"line":2207,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2208,"column":0},"generated":{"line":2208,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2209,"column":0},"generated":{"line":2209,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2210,"column":0},"generated":{"line":2210,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2211,"column":0},"generated":{"line":2211,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2212,"column":0},"generated":{"line":2212,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2213,"column":0},"generated":{"line":2213,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2214,"column":0},"generated":{"line":2214,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2215,"column":0},"generated":{"line":2215,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2216,"column":0},"generated":{"line":2216,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2217,"column":0},"generated":{"line":2217,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2218,"column":0},"generated":{"line":2218,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2219,"column":0},"generated":{"line":2219,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2220,"column":0},"generated":{"line":2220,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2221,"column":0},"generated":{"line":2221,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2222,"column":0},"generated":{"line":2222,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2223,"column":0},"generated":{"line":2223,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2224,"column":0},"generated":{"line":2224,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2225,"column":0},"generated":{"line":2225,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2226,"column":0},"generated":{"line":2226,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2227,"column":0},"generated":{"line":2227,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2228,"column":0},"generated":{"line":2228,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2229,"column":0},"generated":{"line":2229,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2230,"column":0},"generated":{"line":2230,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2231,"column":0},"generated":{"line":2231,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2232,"column":0},"generated":{"line":2232,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2233,"column":0},"generated":{"line":2233,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2234,"column":0},"generated":{"line":2234,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2235,"column":0},"generated":{"line":2235,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2236,"column":0},"generated":{"line":2236,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2237,"column":0},"generated":{"line":2237,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2238,"column":0},"generated":{"line":2238,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2239,"column":0},"generated":{"line":2239,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2240,"column":0},"generated":{"line":2240,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2241,"column":0},"generated":{"line":2241,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2242,"column":0},"generated":{"line":2242,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2243,"column":0},"generated":{"line":2243,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2244,"column":0},"generated":{"line":2244,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2245,"column":0},"generated":{"line":2245,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2246,"column":0},"generated":{"line":2246,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2247,"column":0},"generated":{"line":2247,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2248,"column":0},"generated":{"line":2248,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2249,"column":0},"generated":{"line":2249,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2250,"column":0},"generated":{"line":2250,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2251,"column":0},"generated":{"line":2251,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2252,"column":0},"generated":{"line":2252,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2253,"column":0},"generated":{"line":2253,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2254,"column":0},"generated":{"line":2254,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2255,"column":0},"generated":{"line":2255,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2256,"column":0},"generated":{"line":2256,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2257,"column":0},"generated":{"line":2257,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2258,"column":0},"generated":{"line":2258,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2259,"column":0},"generated":{"line":2259,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2260,"column":0},"generated":{"line":2260,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2261,"column":0},"generated":{"line":2261,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2262,"column":0},"generated":{"line":2262,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2263,"column":0},"generated":{"line":2263,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2264,"column":0},"generated":{"line":2264,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2265,"column":0},"generated":{"line":2265,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2266,"column":0},"generated":{"line":2266,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2267,"column":0},"generated":{"line":2267,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2268,"column":0},"generated":{"line":2268,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2269,"column":0},"generated":{"line":2269,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2270,"column":0},"generated":{"line":2270,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2271,"column":0},"generated":{"line":2271,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2272,"column":0},"generated":{"line":2272,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2273,"column":0},"generated":{"line":2273,"column":0}},{"source":"node_modules/phaser/src/tilemaps/Tilemap.js","original":{"line":2274,"column":0},"generated":{"line":2274,"column":0}}],"sources":{"node_modules/phaser/src/tilemaps/Tilemap.js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar DegToRad = require('../math/DegToRad');\r\nvar DynamicTilemapLayer = require('./dynamiclayer/DynamicTilemapLayer.js');\r\nvar Extend = require('../utils/object/Extend');\r\nvar Formats = require('./Formats');\r\nvar LayerData = require('./mapdata/LayerData');\r\nvar Rotate = require('../math/Rotate');\r\nvar StaticTilemapLayer = require('./staticlayer/StaticTilemapLayer.js');\r\nvar Tile = require('./Tile');\r\nvar TilemapComponents = require('./components');\r\nvar Tileset = require('./Tileset');\r\n\r\n/**\r\n * @callback TilemapFilterCallback\r\n *\r\n * @param {Phaser.GameObjects.GameObject} value - [description]\r\n * @param {number} index - [description]\r\n * @param {Phaser.GameObjects.GameObject[]} array - [description]\r\n *\r\n * @return {Phaser.GameObjects.GameObject} [description]\r\n */\r\n\r\n/**\r\n * @callback TilemapFindCallback\r\n *\r\n * @param {Phaser.GameObjects.GameObject} value - [description]\r\n * @param {number} index - [description]\r\n * @param {Phaser.GameObjects.GameObject[]} array - [description]\r\n *\r\n * @return {boolean} [description]\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A Tilemap is a container for Tilemap data. This isn't a display object, rather, it holds data\r\n * about the map and allows you to add tilesets and tilemap layers to it. A map can have one or\r\n * more tilemap layers (StaticTilemapLayer or DynamicTilemapLayer), which are the display\r\n * objects that actually render tiles.\r\n *\r\n * The Tilemap data be parsed from a Tiled JSON file, a CSV file or a 2D array. Tiled is a free\r\n * software package specifically for creating tile maps, and is available from:\r\n * http://www.mapeditor.org\r\n *\r\n * A Tilemap has handy methods for getting & manipulating the tiles within a layer. You can only\r\n * use the methods that change tiles (e.g. removeTileAt) on a DynamicTilemapLayer.\r\n *\r\n * Note that all Tilemaps use a base tile size to calculate dimensions from, but that a\r\n * StaticTilemapLayer or DynamicTilemapLayer may have its own unique tile size that overrides\r\n * it.\r\n *\r\n * @class Tilemap\r\n * @memberOf Phaser.Tilemaps\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Tilemap belongs.\r\n * @param {Phaser.Tilemaps.MapData} mapData - A MapData instance containing Tilemap data.\r\n */\r\nvar Tilemap = new Class({\r\n\r\n    initialize:\r\n\r\n    function Tilemap (scene, mapData)\r\n    {\r\n        /**\r\n         * @name Phaser.Tilemaps.Tilemap#scene\r\n         * @type {Phaser.Scene}\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = scene;\r\n\r\n        /**\r\n         * The base width of a tile in pixels. Note that individual layers may have a different tile\r\n         * width.\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#tileWidth\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.tileWidth = mapData.tileWidth;\r\n\r\n        /**\r\n         * The base height of a tile in pixels. Note that individual layers may have a different\r\n         * tile height.\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#tileHeight\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.tileHeight = mapData.tileHeight;\r\n\r\n        /**\r\n         * The width of the map (in tiles).\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#width\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.width = mapData.width;\r\n\r\n        /**\r\n         * The height of the map (in tiles).\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#height\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.height = mapData.height;\r\n\r\n        /**\r\n         * The orientation of the map data (as specified in Tiled), usually 'orthogonal'.\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#orientation\r\n         * @type {string}\r\n         * @since 3.0.0\r\n         */\r\n        this.orientation = mapData.orientation;\r\n\r\n        /**\r\n         * The format of the map data.\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#format\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.format = mapData.format;\r\n\r\n        /**\r\n         * The version of the map data (as specified in Tiled, usually 1).\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#version\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.version = mapData.version;\r\n\r\n        /**\r\n         * Map specific properties as specified in Tiled.\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#properties\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         */\r\n        this.properties = mapData.properties;\r\n\r\n        /**\r\n         * The width of the map in pixels based on width * tileWidth.\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#widthInPixels\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.widthInPixels = mapData.widthInPixels;\r\n\r\n        /**\r\n         * The height of the map in pixels based on height * tileHeight.\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#heightInPixels\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.heightInPixels = mapData.heightInPixels;\r\n\r\n        /**\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#imageCollections\r\n         * @type {Phaser.Tilemaps.ImageCollection[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.imageCollections = mapData.imageCollections;\r\n\r\n        /**\r\n         * An array of Tiled Image Layers.\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#images\r\n         * @type {array}\r\n         * @since 3.0.0\r\n         */\r\n        this.images = mapData.images;\r\n\r\n        /**\r\n         * An array of Tilemap layer data.\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#layers\r\n         * @type {Phaser.Tilemaps.LayerData[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.layers = mapData.layers;\r\n\r\n        /**\r\n         * An array of Tilesets used in the map.\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#tilesets\r\n         * @type {Phaser.Tilemaps.Tileset[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.tilesets = mapData.tilesets;\r\n\r\n        /**\r\n         * An array of ObjectLayer instances parsed from Tiled object layers.\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#objects\r\n         * @type {Phaser.Tilemaps.ObjectLayer[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.objects = mapData.objects;\r\n\r\n        /**\r\n         * The index of the currently selected LayerData object.\r\n         *\r\n         * @name Phaser.Tilemaps.Tilemap#currentLayerIndex\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.currentLayerIndex = 0;\r\n    },\r\n\r\n    /**\r\n     * Adds an image to the map to be used as a tileset. A single map may use multiple tilesets.\r\n     * Note that the tileset name can be found in the JSON file exported from Tiled, or in the Tiled\r\n     * editor.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#addTilesetImage\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} tilesetName - The name of the tileset as specified in the map data.\r\n     * @param {string} [key] - The key of the Phaser.Cache image used for this tileset. If\r\n     * `undefined` or `null` it will look for an image with a key matching the tileset parameter.\r\n     * @param {integer} [tileWidth] - The width of the tile (in pixels) in the Tileset Image. If not\r\n     * given it will default to the map's tileWidth value, or the tileWidth specified in the Tiled\r\n     * JSON file.\r\n     * @param {integer} [tileHeight] - The height of the tiles (in pixels) in the Tileset Image. If\r\n     * not given it will default to the map's tileHeight value, or the tileHeight specified in the\r\n     * Tiled JSON file.\r\n     * @param {integer} [tileMargin] - The margin around the tiles in the sheet (in pixels). If not\r\n     * specified, it will default to 0 or the value specified in the Tiled JSON file.\r\n     * @param {integer} [tileSpacing] - The spacing between each the tile in the sheet (in pixels).\r\n     * If not specified, it will default to 0 or the value specified in the Tiled JSON file.\r\n     * @param {integer} [gid=0] - If adding multiple tilesets to a blank map, specify the starting\r\n     * GID this set will use here.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tileset} Returns the Tileset object that was created or updated, or null if it\r\n     * failed.\r\n     */\r\n    addTilesetImage: function (tilesetName, key, tileWidth, tileHeight, tileMargin, tileSpacing, gid)\r\n    {\r\n        if (tilesetName === undefined) { return null; }\r\n        if (key === undefined || key === null) { key = tilesetName; }\r\n\r\n        if (!this.scene.sys.textures.exists(key))\r\n        {\r\n            console.warn('Invalid image key given for tileset: \"' + key + '\"');\r\n            return null;\r\n        }\r\n\r\n        var texture = this.scene.sys.textures.get(key);\r\n\r\n        var index = this.getTilesetIndex(tilesetName);\r\n\r\n        if (index === null && this.format === Formats.TILED_JSON)\r\n        {\r\n            console.warn('No data found in the JSON tilemap from Tiled matching the tileset name: \"' + tilesetName + '\"');\r\n            return null;\r\n        }\r\n\r\n        if (this.tilesets[index])\r\n        {\r\n            this.tilesets[index].setTileSize(tileWidth, tileHeight);\r\n            this.tilesets[index].setSpacing(tileMargin, tileSpacing);\r\n            this.tilesets[index].setImage(texture);\r\n            return this.tilesets[index];\r\n        }\r\n\r\n        if (tileWidth === undefined) { tileWidth = this.tileWidth; }\r\n        if (tileHeight === undefined) { tileHeight = this.tileHeight; }\r\n        if (tileMargin === undefined) { tileMargin = 0; }\r\n        if (tileSpacing === undefined) { tileSpacing = 0; }\r\n        if (gid === undefined) { gid = 0; }\r\n\r\n        var tileset = new Tileset(tilesetName, gid, tileWidth, tileHeight, tileMargin, tileSpacing);\r\n        tileset.setImage(texture);\r\n        this.tilesets.push(tileset);\r\n\r\n        return tileset;\r\n    },\r\n\r\n    /**\r\n     * Turns the StaticTilemapLayer associated with the given layer into a DynamicTilemapLayer. If\r\n     * no layer specified, the map's current layer is used. This is useful if you want to manipulate\r\n     * a map at the start of a scene, but then make it non-manipulable and optimize it for speed.\r\n     * Note: the DynamicTilemapLayer passed in is destroyed, so make sure to store the value\r\n     * returned from this method if you want to manipulate the new StaticTilemapLayer.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#convertLayerToStatic\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer)} [layer] - The name of the layer from Tiled, the\r\n     * index of the layer in the map, or a DynamicTilemapLayer.\r\n     *\r\n     * @return {?Phaser.Tilemaps.StaticTilemapLayer} Returns the new layer that was created, or null if it\r\n     * failed.\r\n     */\r\n    convertLayerToStatic: function (layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        var dynamicLayer = layer.tilemapLayer;\r\n\r\n        if (!dynamicLayer || !(dynamicLayer instanceof DynamicTilemapLayer))\r\n        {\r\n            return null;\r\n        }\r\n\r\n        var staticLayer = new StaticTilemapLayer(\r\n            dynamicLayer.scene,\r\n            dynamicLayer.tilemap,\r\n            dynamicLayer.layerIndex,\r\n            dynamicLayer.tileset,\r\n            dynamicLayer.x,\r\n            dynamicLayer.y\r\n        );\r\n\r\n        this.scene.sys.displayList.add(staticLayer);\r\n\r\n        dynamicLayer.destroy();\r\n\r\n        return staticLayer;\r\n    },\r\n\r\n    /**\r\n     * See component documentation. If no layer specified, the map's current layer is used. This\r\n     * cannot be applied to StaticTilemapLayers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#copy\r\n     * @since 3.0.0\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Returns this, or null if the layer given was invalid.\r\n     */\r\n    copy: function (srcTileX, srcTileY, width, height, destTileX, destTileY, recalculateFaces, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (this._isStaticCall(layer, 'copy')) { return this; }\r\n\r\n        if (layer !== null)\r\n        {\r\n            TilemapComponents.Copy(\r\n                srcTileX, srcTileY,\r\n                width, height,\r\n                destTileX, destTileY,\r\n                recalculateFaces, layer\r\n            );\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Creates a new and empty DynamicTilemapLayer. The currently selected layer in the map is set\r\n     * to this new layer.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#createBlankDynamicLayer\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} name - The name of this layer. Must be unique within the map.\r\n     * @param {Phaser.Tilemaps.Tileset} tileset - The tileset the new layer will use.\r\n     * @param {integer} width - The width of the layer in tiles. If not specified, it will default\r\n     * to the map's width.\r\n     * @param {integer} height - The height of the layer in tiles. If not specified, it will default\r\n     * to the map's height.\r\n     * @param {integer} tileWidth - The width of the tiles the layer uses for calculations. If not\r\n     * specified, it will default to the map's tileWidth.\r\n     * @param {integer} tileHeight - The height of the tiles the layer uses for calculations. If not\r\n     * specified, it will default to the map's tileHeight.\r\n     * @return {?Phaser.Tilemaps.DynamicTilemapLayer} Returns the new layer was created, or null if it failed.\r\n     */\r\n    createBlankDynamicLayer: function (name, tileset, x, y, width, height, tileWidth, tileHeight)\r\n    {\r\n        if (tileWidth === undefined) { tileWidth = tileset.tileWidth; }\r\n        if (tileHeight === undefined) { tileHeight = tileset.tileHeight; }\r\n        if (width === undefined) { width = this.width; }\r\n        if (height === undefined) { height = this.height; }\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n\r\n        var index = this.getLayerIndex(name);\r\n\r\n        if (index !== null)\r\n        {\r\n            console.warn('Cannot create blank layer: layer with matching name already exists ' + name);\r\n            return null;\r\n        }\r\n\r\n        var layerData = new LayerData({\r\n            name: name,\r\n            tileWidth: tileWidth,\r\n            tileHeight: tileHeight,\r\n            width: width,\r\n            height: height\r\n        });\r\n\r\n        var row;\r\n\r\n        for (var tileY = 0; tileY < height; tileY++)\r\n        {\r\n            row = [];\r\n\r\n            for (var tileX = 0; tileX < width; tileX++)\r\n            {\r\n                row.push(new Tile(layerData, -1, tileX, tileY, tileWidth, tileHeight, this.tileWidth, this.tileHeight));\r\n            }\r\n\r\n            layerData.data.push(row);\r\n        }\r\n\r\n        this.layers.push(layerData);\r\n        this.currentLayerIndex = this.layers.length - 1;\r\n\r\n        var dynamicLayer = new DynamicTilemapLayer(this.scene, this, this.currentLayerIndex, tileset, x, y);\r\n        this.scene.sys.displayList.add(dynamicLayer);\r\n\r\n        return dynamicLayer;\r\n    },\r\n\r\n    /**\r\n     * Creates a new DynamicTilemapLayer that renders the LayerData associated with the given\r\n     * `layerID`. The currently selected layer in the map is set to this new layer.\r\n     *\r\n     * The `layerID` is important. If you've created your map in Tiled then you can get this by\r\n     * looking in Tiled and looking at the layer name. Or you can open the JSON file it exports and\r\n     * look at the layers[].name value. Either way it must match.\r\n     *\r\n     * Unlike a static layer, a dynamic layer can be modified. See DynamicTilemapLayer for more\r\n     * information.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#createDynamicLayer\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|string)} layerID - The layer array index value, or if a string is given, the\r\n     * layer name from Tiled.\r\n     * @param {Phaser.Tilemaps.Tileset} tileset - The tileset the new layer will use.\r\n     * @param {number} x - The x position to place the layer in the world. If not specified, it will\r\n     * default to the layer offset from Tiled or 0.\r\n     * @param {number} y - The y position to place the layer in the world. If not specified, it will\r\n     * default to the layer offset from Tiled or 0.\r\n     *\r\n     * @return {?Phaser.Tilemaps.DynamicTilemapLayer} Returns the new layer was created, or null if it failed.\r\n     */\r\n    createDynamicLayer: function (layerID, tileset, x, y)\r\n    {\r\n        var index = this.getLayerIndex(layerID);\r\n\r\n        if (index === null)\r\n        {\r\n            console.warn('Cannot create tilemap layer, invalid layer ID given: ' + layerID);\r\n            return null;\r\n        }\r\n\r\n        var layerData = this.layers[index];\r\n\r\n        // Check for an associated static or dynamic tilemap layer\r\n        if (layerData.tilemapLayer)\r\n        {\r\n            console.warn('Cannot create dynamic tilemap layer since a static or dynamic tilemap layer exists for layer ID:' + layerID);\r\n            return null;\r\n        }\r\n\r\n        this.currentLayerIndex = index;\r\n\r\n        // Make sure that all the LayerData & the tiles have the correct tile size. They usually\r\n        // are, but wouldn't match if you try to load a 2x or 4x res tileset when the map was made\r\n        // with a 1x res tileset.\r\n        if (layerData.tileWidth !== tileset.tileWidth || layerData.tileHeight !== tileset.tileHeight)\r\n        {\r\n            this.setLayerTileSize(tileset.tileWidth, tileset.tileHeight, index);\r\n        }\r\n\r\n        // Default the x/y position to match Tiled layer offset, if it exists.\r\n        if (x === undefined && this.layers[index].x) { x = this.layers[index].x; }\r\n        if (y === undefined && this.layers[index].y) { y = this.layers[index].y; }\r\n\r\n        var layer = new DynamicTilemapLayer(this.scene, this, index, tileset, x, y);\r\n        this.scene.sys.displayList.add(layer);\r\n\r\n        return layer;\r\n    },\r\n\r\n    /**\r\n     * Creates a Sprite for every object matching the given gid in the map data. All properties from\r\n     * the map data objectgroup are copied into the `spriteConfig`, so you can use this as an easy\r\n     * way to configure Sprite properties from within the map editor. For example giving an object a\r\n     * property of alpha: 0.5 in the map editor will duplicate that when the Sprite is created.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#createFromObjects\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} name - The name of the object layer (from Tiled) to create Sprites from.\r\n     * @param {(integer|string)} id - Either the id (object), gid (tile object) or name (object or\r\n     * tile object) from Tiled. Ids are unique in Tiled, but a gid is shared by all tile objects\r\n     * with the same graphic. The same name can be used on multiple objects.\r\n     * @param {object} spriteConfig - The config object to pass into the Sprite creator (i.e.\r\n     * scene.make.sprite).\r\n     * @param {Phaser.Scene} [scene=the scene the map is within] - The Scene to create the Sprites within.\r\n     *\r\n     * @return {Phaser.GameObjects.Sprite[]} An array of the Sprites that were created.\r\n     */\r\n    createFromObjects: function (name, id, spriteConfig, scene)\r\n    {\r\n        if (spriteConfig === undefined) { spriteConfig = {}; }\r\n        if (scene === undefined) { scene = this.scene; }\r\n\r\n        var objectLayer = this.getObjectLayer(name);\r\n        if (!objectLayer)\r\n        {\r\n            console.warn('Cannot create from object. Invalid objectgroup name given: ' + name);\r\n            return;\r\n        }\r\n\r\n        var objects = objectLayer.objects;\r\n        var sprites = [];\r\n\r\n        for (var i = 0; i < objects.length; i++)\r\n        {\r\n            var found = false;\r\n            var obj = objects[i];\r\n\r\n            if (obj.gid !== undefined && typeof id === 'number' && obj.gid === id ||\r\n                obj.id !== undefined && typeof id === 'number' && obj.id === id ||\r\n                obj.name !== undefined && typeof id === 'string' && obj.name === id)\r\n            {\r\n                found = true;\r\n            }\r\n\r\n            if (found)\r\n            {\r\n                var config = Extend({}, spriteConfig, obj.properties);\r\n\r\n                config.x = obj.x;\r\n                config.y = obj.y;\r\n\r\n                var sprite = this.scene.make.sprite(config);\r\n\r\n                sprite.name = obj.name;\r\n\r\n                if (obj.width) { sprite.displayWidth = obj.width; }\r\n                if (obj.height) { sprite.displayHeight = obj.height; }\r\n\r\n                // Origin is (0, 1) in Tiled, so find the offset that matches the Sprite's origin.\r\n                var offset = {\r\n                    x: sprite.originX * sprite.displayWidth,\r\n                    y: (sprite.originY - 1) * sprite.displayHeight\r\n                };\r\n\r\n                // If the object is rotated, then the origin offset also needs to be rotated.\r\n                if (obj.rotation)\r\n                {\r\n                    var angle = DegToRad(obj.rotation);\r\n                    Rotate(offset, angle);\r\n                    sprite.rotation = angle;\r\n                }\r\n\r\n                sprite.x += offset.x;\r\n                sprite.y += offset.y;\r\n\r\n                if (obj.flippedHorizontal !== undefined || obj.flippedVertical !== undefined)\r\n                {\r\n                    sprite.setFlip(obj.flippedHorizontal, obj.flippedVertical);\r\n                }\r\n\r\n                if (!obj.visible) { sprite.visible = false; }\r\n\r\n                sprites.push(sprite);\r\n            }\r\n        }\r\n\r\n        return sprites;\r\n    },\r\n\r\n    /**\r\n     * Creates a Sprite for every object matching the given tile indexes in the layer. You can\r\n     * optionally specify if each tile will be replaced with a new tile after the Sprite has been\r\n     * created. This is useful if you want to lay down special tiles in a level that are converted to\r\n     * Sprites, but want to replace the tile itself with a floor tile or similar once converted.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#createFromTiles\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|array)} indexes - The tile index, or array of indexes, to create Sprites from.\r\n     * @param {(integer|array)} replacements - The tile index, or array of indexes, to change a converted\r\n     * tile to. Set to `null` to leave the tiles unchanged. If an array is given, it is assumed to be a\r\n     * one-to-one mapping with the indexes array.\r\n     * @param {object} spriteConfig - The config object to pass into the Sprite creator (i.e.\r\n     * scene.make.sprite).\r\n     * @param {Phaser.Scene} [scene=scene the map is within] - The Scene to create the Sprites within.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when determining the world XY\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.GameObjects.Sprite[]} Returns an array of Tiles, or null if the layer given was invalid.\r\n     */\r\n    createFromTiles: function (indexes, replacements, spriteConfig, scene, camera, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.CreateFromTiles(indexes, replacements, spriteConfig, scene, camera, layer);\r\n    },\r\n\r\n    /**\r\n     * Creates a new StaticTilemapLayer that renders the LayerData associated with the given\r\n     * `layerID`. The currently selected layer in the map is set to this new layer.\r\n     *\r\n     * The `layerID` is important. If you've created your map in Tiled then you can get this by\r\n     * looking in Tiled and looking at the layer name. Or you can open the JSON file it exports and\r\n     * look at the layers[].name value. Either way it must match.\r\n     *\r\n     * It's important to remember that a static layer cannot be modified. See StaticTilemapLayer for\r\n     * more information.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#createStaticLayer\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|string)} layerID - The layer array index value, or if a string is given, the\r\n     * layer name from Tiled.\r\n     * @param {Phaser.Tilemaps.Tileset} tileset - The tileset the new layer will use.\r\n     * @param {number} x - The x position to place the layer in the world. If not specified, it will\r\n     * default to the layer offset from Tiled or 0.\r\n     * @param {number} y - The y position to place the layer in the world. If not specified, it will\r\n     * default to the layer offset from Tiled or 0.\r\n     *\r\n     * @return {?Phaser.Tilemaps.StaticTilemapLayer} Returns the new layer was created, or null if it failed.\r\n     */\r\n    createStaticLayer: function (layerID, tileset, x, y)\r\n    {\r\n        var index = this.getLayerIndex(layerID);\r\n\r\n        if (index === null)\r\n        {\r\n            console.warn('Cannot create tilemap layer, invalid layer ID given: ' + layerID);\r\n            return null;\r\n        }\r\n\r\n        var layerData = this.layers[index];\r\n\r\n        // Check for an associated static or dynamic tilemap layer\r\n        if (layerData.tilemapLayer)\r\n        {\r\n            console.warn('Cannot create static tilemap layer since a static or dynamic tilemap layer exists for layer ID:' + layerID);\r\n            return null;\r\n        }\r\n\r\n        this.currentLayerIndex = index;\r\n\r\n        // Make sure that all the LayerData & the tiles have the correct tile size. They usually\r\n        // are, but wouldn't match if you try to load a 2x or 4x res tileset when the map was made\r\n        // with a 1x res tileset.\r\n        if (layerData.tileWidth !== tileset.tileWidth || layerData.tileHeight !== tileset.tileHeight)\r\n        {\r\n            this.setLayerTileSize(tileset.tileWidth, tileset.tileHeight, index);\r\n        }\r\n\r\n        // Default the x/y position to match Tiled layer offset, if it exists.\r\n        if (x === undefined && this.layers[index].x) { x = this.layers[index].x; }\r\n        if (y === undefined && this.layers[index].y) { y = this.layers[index].y; }\r\n\r\n        var layer = new StaticTilemapLayer(this.scene, this, index, tileset, x, y);\r\n        this.scene.sys.displayList.add(layer);\r\n\r\n        return layer;\r\n    },\r\n\r\n    /**\r\n     * Removes all layer data from this Tilemap and nulls the scene reference. This will destroy any\r\n     * StaticTilemapLayers or DynamicTilemapLayers that have been linked to LayerData.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.removeAllLayers();\r\n        this.tilesets.length = 0;\r\n        this.objects.length = 0;\r\n        this.scene = undefined;\r\n    },\r\n\r\n    /**\r\n     * Sets the tiles in the given rectangular area (in tile coordinates) of the layer with the\r\n     * specified index. Tiles will be set to collide if the given index is a colliding index.\r\n     * Collision information in the region will be recalculated.\r\n     *\r\n     * If no layer specified, the map's current layer is used.\r\n     * This cannot be applied to StaticTilemapLayers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#fill\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} index - [description]\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {boolean} [recalculateFaces=true] - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Returns this, or null if the layer given was invalid.\r\n     */\r\n    fill: function (index, tileX, tileY, width, height, recalculateFaces, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (this._isStaticCall(layer, 'fill')) { return this; }\r\n\r\n        if (layer !== null)\r\n        {\r\n            TilemapComponents.Fill(index, tileX, tileY, width, height, recalculateFaces, layer);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * For each object in the given object layer, run the given filter callback function. Any\r\n     * objects that pass the filter test (i.e. where the callback returns true) will returned as a\r\n     * new array. Similar to Array.prototype.Filter in vanilla JS.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#filterObjects\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Tilemaps.ObjectLayer|string)} [objectLayer] - The name of an object layer (from Tiled) or an\r\n     * ObjectLayer instance.\r\n     * @param {TilemapFilterCallback} callback - The callback. Each object in the given area will be passed to\r\n     * this callback as the first and only parameter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     *\r\n     * @return {?Phaser.GameObjects.GameObject[]} An array of object that match the search, or null if the objectLayer\r\n     * given was invalid.\r\n     */\r\n    filterObjects: function (objectLayer, callback, context)\r\n    {\r\n        if (typeof objectLayer === 'string')\r\n        {\r\n            var name = objectLayer;\r\n\r\n            objectLayer = this.getObjectLayer(objectLayer);\r\n\r\n            if (!objectLayer)\r\n            {\r\n                console.warn('No object layer found with the name: ' + name);\r\n                return null;\r\n            }\r\n        }\r\n\r\n        return objectLayer.objects.filter(callback, context);\r\n    },\r\n\r\n    /**\r\n     * For each tile in the given rectangular area (in tile coordinates) of the layer, run the given\r\n     * filter callback function. Any tiles that pass the filter test (i.e. where the callback returns\r\n     * true) will returned as a new array. Similar to Array.prototype.Filter in vanilla JS.\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#filterTiles\r\n     * @since 3.0.0\r\n     *\r\n     * @param {function} callback - The callback. Each tile in the given area will be passed to this\r\n     * callback as the first and only parameter. The callback should return true for tiles that pass the\r\n     * filter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have\r\n     * -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide\r\n     * on at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that\r\n     * have at least one interesting face.\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile[]} Returns an array of Tiles, or null if the layer given was invalid.\r\n     */\r\n    filterTiles: function (callback, context, tileX, tileY, width, height, filteringOptions, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.FilterTiles(callback, context, tileX, tileY, width, height, filteringOptions, layer);\r\n    },\r\n\r\n    /**\r\n     * Searches the entire map layer for the first tile matching the given index, then returns that Tile\r\n     * object. If no match is found, it returns null. The search starts from the top-left tile and\r\n     * continues horizontally until it hits the end of the row, then it drops down to the next column.\r\n     * If the reverse boolean is true, it scans starting from the bottom-right corner traveling up to\r\n     * the top-left.\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#findByIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} index - The tile index value to search for.\r\n     * @param {integer} [skip=0] - The number of times to skip a matching tile before returning.\r\n     * @param {boolean} [reverse=false] - If true it will scan the layer in reverse, starting at the\r\n     * bottom-right. Otherwise it scans from the top-left.\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile} Returns a Tiles, or null if the layer given was invalid.\r\n     */\r\n    findByIndex: function (findIndex, skip, reverse, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.FindByIndex(findIndex, skip, reverse, layer);\r\n    },\r\n\r\n    /**\r\n     * Find the first object in the given object layer that satisfies the provided testing function.\r\n     * I.e. finds the first object for which `callback` returns true. Similar to\r\n     * Array.prototype.find in vanilla JS.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#findObject\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Tilemaps.ObjectLayer|string)} [objectLayer] - The name of an object layer (from Tiled) or an\r\n     * ObjectLayer instance.\r\n     * @param {TilemapFindCallback} callback - The callback. Each object in the given area will be passed to\r\n     * this callback as the first and only parameter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     *\r\n     * @return {?Phaser.GameObjects.GameObject} An object that matches the search, or null if no object found\r\n     */\r\n    findObject: function (objectLayer, callback, context)\r\n    {\r\n        if (typeof objectLayer === 'string')\r\n        {\r\n            var name = objectLayer;\r\n\r\n            objectLayer = this.getObjectLayer(objectLayer);\r\n\r\n            if (!objectLayer)\r\n            {\r\n                console.warn('No object layer found with the name: ' + name);\r\n                return null;\r\n            }\r\n        }\r\n\r\n        return objectLayer.objects.find(callback, context) || null;\r\n    },\r\n\r\n    /**\r\n     * Find the first tile in the given rectangular area (in tile coordinates) of the layer that\r\n     * satisfies the provided testing function. I.e. finds the first tile for which `callback` returns\r\n     * true. Similar to Array.prototype.find in vanilla JS.\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#findTile\r\n     * @since 3.0.0\r\n     *\r\n     * @param {FindTileCallback} callback - The callback. Each tile in the given area will be passed to this\r\n     * callback as the first and only parameter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have\r\n     * -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide\r\n     * on at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that\r\n     * have at least one interesting face.\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile} Returns a Tiles, or null if the layer given was invalid.\r\n     */\r\n    findTile: function (callback, context, tileX, tileY, width, height, filteringOptions, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.FindTile(callback, context, tileX, tileY, width, height, filteringOptions, layer);\r\n    },\r\n\r\n    /**\r\n     * For each tile in the given rectangular area (in tile coordinates) of the layer, run the given\r\n     * callback. Similar to Array.prototype.forEach in vanilla JS.\r\n     *\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#forEachTile\r\n     * @since 3.0.0\r\n     *\r\n     * @param {EachTileCallback} callback - The callback. Each tile in the given area will be passed to this\r\n     * callback as the first and only parameter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have\r\n     * -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide\r\n     * on at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that\r\n     * have at least one interesting face.\r\n     * @param {LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Returns this, or null if the layer given was invalid.\r\n     */\r\n    forEachTile: function (callback, context, tileX, tileY, width, height, filteringOptions, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer !== null)\r\n        {\r\n            TilemapComponents.ForEachTile(callback, context, tileX, tileY, width, height, filteringOptions, layer);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Gets the image layer index based on its name.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#getImageIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} name - The name of the image to get.\r\n     *\r\n     * @return {integer} The index of the image in this tilemap, or null if not found.\r\n     */\r\n    getImageIndex: function (name)\r\n    {\r\n        return this.getIndex(this.images, name);\r\n    },\r\n\r\n    /**\r\n     * Internally used. Returns the index of the object in one of the Tilemaps arrays whose name\r\n     * property matches the given `name`.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#getIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {array} location - The Tilemap array to search.\r\n     * @param {string} name - The name of the array element to get.\r\n     *\r\n     * @return {number} The index of the element in the array, or null if not found.\r\n     */\r\n    getIndex: function (location, name)\r\n    {\r\n        for (var i = 0; i < location.length; i++)\r\n        {\r\n            if (location[i].name === name)\r\n            {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    },\r\n\r\n    /**\r\n     * Gets the LayerData from this.layers that is associated with `layer`, or null if an invalid\r\n     * `layer` is given.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#getLayer\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The name of the\r\n     * layer from Tiled, the index of the layer in the map, a DynamicTilemapLayer or a\r\n     * StaticTilemapLayer. If not given will default to the maps current layer index.\r\n     *\r\n     * @return {Phaser.Tilemaps.LayerData} The corresponding LayerData within this.layers.\r\n     */\r\n    getLayer: function (layer)\r\n    {\r\n        var index = this.getLayerIndex(layer);\r\n\r\n        return index !== null ? this.layers[index] : null;\r\n    },\r\n\r\n    /**\r\n     * Gets the ObjectLayer from this.objects that has the given `name`, or null if no ObjectLayer\r\n     * is found with that name.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#getObjectLayer\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} [name] - The name of the object layer from Tiled.\r\n     *\r\n     * @return {?Phaser.Tilemaps.ObjectLayer} The corresponding ObjectLayer within this.objects or null.\r\n     */\r\n    getObjectLayer: function (name)\r\n    {\r\n        var index = this.getIndex(this.objects, name);\r\n\r\n        return index !== null ? this.objects[index] : null;\r\n    },\r\n\r\n    /**\r\n     * Gets the LayerData index of the given `layer` within this.layers, or null if an invalid\r\n     * `layer` is given.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#getLayerIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The name of the\r\n     * layer from Tiled, the index of the layer in the map, a DynamicTilemapLayer or a\r\n     * StaticTilemapLayer. If not given will default to the map's current layer index.\r\n     *\r\n     * @return {integer} The LayerData index within this.layers.\r\n     */\r\n    getLayerIndex: function (layer)\r\n    {\r\n        if (layer === undefined)\r\n        {\r\n            return this.currentLayerIndex;\r\n        }\r\n        else if (typeof layer === 'string')\r\n        {\r\n            return this.getLayerIndexByName(layer);\r\n        }\r\n        else if (typeof layer === 'number' && layer < this.layers.length)\r\n        {\r\n            return layer;\r\n        }\r\n        else if (layer instanceof StaticTilemapLayer || layer instanceof DynamicTilemapLayer)\r\n        {\r\n            return layer.layerIndex;\r\n        }\r\n        else\r\n        {\r\n            return null;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Gets the index of the LayerData within this.layers that has the given `name`, or null if an\r\n     * invalid `name` is given.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#getLayerIndexByName\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} name - The name of the layer to get.\r\n     *\r\n     * @return {integer} The LayerData index within this.layers.\r\n     */\r\n    getLayerIndexByName: function (name)\r\n    {\r\n        return this.getIndex(this.layers, name);\r\n    },\r\n\r\n    /**\r\n     * Gets a tile at the given tile coordinates from the given layer.\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#getTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - X position to get the tile from (given in tile units, not pixels).\r\n     * @param {integer} tileY - Y position to get the tile from (given in tile units, not pixels).\r\n     * @param {boolean} [nonNull=false] - If true getTile won't return null for empty tiles, but a Tile\r\n     * object with an index of -1.\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile} Returns a Tile, or null if the layer given was invalid.\r\n     */\r\n    getTileAt: function (tileX, tileY, nonNull, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.GetTileAt(tileX, tileY, nonNull, layer);\r\n    },\r\n\r\n    /**\r\n     * Gets a tile at the given world coordinates from the given layer.\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#getTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - X position to get the tile from (given in pixels)\r\n     * @param {number} worldY - Y position to get the tile from (given in pixels)\r\n     * @param {boolean} [nonNull=false] - If true, function won't return null for empty tiles, but a Tile\r\n     * object with an index of -1.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile} Returns a Tile, or null if the layer given was invalid.\r\n     */\r\n    getTileAtWorldXY: function (worldX, worldY, nonNull, camera, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.GetTileAtWorldXY(worldX, worldY, nonNull, camera, layer);\r\n    },\r\n\r\n    /**\r\n     * Gets the tiles in the given rectangular area (in tile coordinates) of the layer.\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#getTilesWithin\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have\r\n     * -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on\r\n     * at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that\r\n     * have at least one interesting face.\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile[]} Returns an array of Tiles, or null if the layer given was invalid.\r\n     */\r\n    getTilesWithin: function (tileX, tileY, width, height, filteringOptions, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.GetTilesWithin(tileX, tileY, width, height, filteringOptions, layer);\r\n    },\r\n\r\n    /**\r\n     * Gets the tiles that overlap with the given shape in the given layer. The shape must be a Circle,\r\n     * Line, Rectangle or Triangle. The shape should be in world coordinates.\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#getTilesWithinShape\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Geom.Circle|Phaser.Geom.Line|Phaser.Geom.Rectangle|Phaser.Geom.Triangle)} shape - A shape in world (pixel) coordinates\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have\r\n     * -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on\r\n     * at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that\r\n     * have at least one interesting face.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile[]} Returns an array of Tiles, or null if the layer given was invalid.\r\n     */\r\n    getTilesWithinShape: function (shape, filteringOptions, camera, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.GetTilesWithinShape(shape, filteringOptions, camera, layer);\r\n    },\r\n\r\n    /**\r\n     * Gets the tiles in the given rectangular area (in world coordinates) of the layer.\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#getTilesWithinWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - [description]\r\n     * @param {number} worldY - [description]\r\n     * @param {number} width - [description]\r\n     * @param {number} height - [description]\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have\r\n     * -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on\r\n     * at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that\r\n     * have at least one interesting face.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile[]} Returns an array of Tiles, or null if the layer given was invalid.\r\n     */\r\n    getTilesWithinWorldXY: function (worldX, worldY, width, height, filteringOptions, camera, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.GetTilesWithinWorldXY(worldX, worldY, width, height, filteringOptions, camera, layer);\r\n    },\r\n\r\n    /**\r\n     * Gets the index of the Tileset within this.tilesets that has the given `name`, or null if an\r\n     * invalid `name` is given.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#getTilesetIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} name - The name of the Tileset to get.\r\n     *\r\n     * @return {integer} The Tileset index within this.tilesets.\r\n     */\r\n    getTilesetIndex: function (name)\r\n    {\r\n        return this.getIndex(this.tilesets, name);\r\n    },\r\n\r\n    /**\r\n     * Checks if there is a tile at the given location (in tile coordinates) in the given layer. Returns\r\n     * false if there is no tile or if the tile at that location has an index of -1.\r\n     *\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#hasTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - [description]\r\n     * @param {integer} tileY - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?boolean} Returns a boolean, or null if the layer given was invalid.\r\n     */\r\n    hasTileAt: function (tileX, tileY, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.HasTileAt(tileX, tileY, layer);\r\n    },\r\n\r\n    /**\r\n     * Checks if there is a tile at the given location (in world coordinates) in the given layer. Returns\r\n     * false if there is no tile or if the tile at that location has an index of -1.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#hasTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - [description]\r\n     * @param {number} worldY - [description]\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?boolean} Returns a boolean, or null if the layer given was invalid.\r\n     */\r\n    hasTileAtWorldXY: function (worldX, worldY, camera, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.HasTileAtWorldXY(worldX, worldY, camera, layer);\r\n    },\r\n\r\n    /**\r\n     * The LayerData object that is currently selected in the map. You can set this property using\r\n     * any type supported by setLayer.\r\n     *\r\n     * @name Phaser.Tilemaps.Tilemap#layer\r\n     * @type {Phaser.Tilemaps.LayerData}\r\n     * @since 3.0.0\r\n     */\r\n    layer: {\r\n        get: function ()\r\n        {\r\n            return this.layers[this.currentLayerIndex];\r\n        },\r\n\r\n        set: function (layer)\r\n        {\r\n            this.setLayer(layer);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Puts a tile at the given tile coordinates in the specified layer. You can pass in either an index\r\n     * or a Tile object. If you pass in a Tile, all attributes will be copied over to the specified\r\n     * location. If you pass in an index, only the index at the specified location will be changed.\r\n     * Collision information will be recalculated at the specified location.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * This cannot be applied to StaticTilemapLayers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#putTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|Phaser.Tilemaps.Tile)} tile - The index of this tile to set or a Tile object.\r\n     * @param {integer} tileX - [description]\r\n     * @param {integer} tileY - [description]\r\n     * @param {boolean} [recalculateFaces=true] - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile} Returns a Tile, or null if the layer given was invalid.\r\n     */\r\n    putTileAt: function (tile, tileX, tileY, recalculateFaces, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (this._isStaticCall(layer, 'putTileAt')) { return null; }\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.PutTileAt(tile, tileX, tileY, recalculateFaces, layer);\r\n    },\r\n\r\n    /**\r\n     * Puts a tile at the given world coordinates (pixels) in the specified layer. You can pass in either\r\n     * an index or a Tile object. If you pass in a Tile, all attributes will be copied over to the\r\n     * specified location. If you pass in an index, only the index at the specified location will be\r\n     * changed. Collision information will be recalculated at the specified location.\r\n     *\r\n     * If no layer specified, the maps current layer is used. This\r\n     * cannot be applied to StaticTilemapLayers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#putTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|Phaser.Tilemaps.Tile)} tile - The index of this tile to set or a Tile object.\r\n     * @param {integer} worldX - [description]\r\n     * @param {integer} worldY - [description]\r\n     * @param {boolean} [recalculateFaces=true] - [description]\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile} Returns a Tile, or null if the layer given was invalid.\r\n     */\r\n    putTileAtWorldXY: function (tile, worldX, worldY, recalculateFaces, camera, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (this._isStaticCall(layer, 'putTileAtWorldXY')) { return null; }\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.PutTileAtWorldXY(tile, worldX, worldY, recalculateFaces, camera, layer);\r\n    },\r\n\r\n    /**\r\n     * Puts an array of tiles or a 2D array of tiles at the given tile coordinates in the specified\r\n     * layer. The array can be composed of either tile indexes or Tile objects. If you pass in a Tile,\r\n     * all attributes will be copied over to the specified location. If you pass in an index, only the\r\n     * index at the specified location will be changed. Collision information will be recalculated\r\n     * within the region tiles were changed.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     * This cannot be applied to StaticTilemapLayers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#putTilesAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer[]|integer[][]|Phaser.Tilemaps.Tile[]|Phaser.Tilemaps.Tile[][])} tile - A row (array) or grid (2D array) of Tiles\r\n     * or tile indexes to place.\r\n     * @param {integer} tileX - [description]\r\n     * @param {integer} tileY - [description]\r\n     * @param {boolean} [recalculateFaces=true] - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Returns this, or null if the layer given was invalid.\r\n     */\r\n    putTilesAt: function (tilesArray, tileX, tileY, recalculateFaces, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (this._isStaticCall(layer, 'putTilesAt')) { return this; }\r\n\r\n        if (layer !== null)\r\n        {\r\n            TilemapComponents.PutTilesAt(tilesArray, tileX, tileY, recalculateFaces, layer);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Randomizes the indexes of a rectangular region of tiles (in tile coordinates) within the\r\n     * specified layer. Each tile will recieve a new index. If an array of indexes is passed in, then\r\n     * those will be used for randomly assigning new tile indexes. If an array is not provided, the\r\n     * indexes found within the region (excluding -1) will be used for randomly assigning new tile\r\n     * indexes. This method only modifies tile indexes and does not change collision information.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     * This cannot be applied to StaticTilemapLayers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#randomize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {integer[]} [indexes] - An array of indexes to randomly draw from during randomization.\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Returns this, or null if the layer given was invalid.\r\n     */\r\n    randomize: function (tileX, tileY, width, height, indexes, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (this._isStaticCall(layer, 'randomize')) { return this; }\r\n\r\n        if (layer !== null)\r\n        {\r\n            TilemapComponents.Randomize(tileX, tileY, width, height, indexes, layer);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculates interesting faces at the given tile coordinates of the specified layer. Interesting\r\n     * faces are used internally for optimizing collisions against tiles. This method is mostly used\r\n     * internally to optimize recalculating faces when only one tile has been changed.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#calculateFacesAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - [description]\r\n     * @param {integer} tileY - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Returns this, or null if the layer given was invalid.\r\n     */\r\n    calculateFacesAt: function (tileX, tileY, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return this; }\r\n\r\n        TilemapComponents.CalculateFacesAt(tileX, tileY, layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculates interesting faces within the rectangular area specified (in tile coordinates) of the\r\n     * layer. Interesting faces are used internally for optimizing collisions against tiles. This method\r\n     * is mostly used internally.\r\n     *\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#calculateFacesWithin\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Returns this, or null if the layer given was invalid.\r\n     */\r\n    calculateFacesWithin: function (tileX, tileY, width, height, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return this; }\r\n\r\n        TilemapComponents.CalculateFacesWithin(tileX, tileY, width, height, layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Removes all layers from this Tilemap and destroys any associated StaticTilemapLayers or\r\n     * DynamicTilemapLayers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#removeAllLayers\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Tilemaps.Tilemap} This Tilemap object.\r\n     */\r\n    removeAllLayers: function ()\r\n    {\r\n        // Destroy any StaticTilemapLayers or DynamicTilemapLayers that are stored in LayerData\r\n        for (var i = 0; i < this.layers.length; i++)\r\n        {\r\n            if (this.layers[i].tilemapLayer)\r\n            {\r\n                this.layers[i].tilemapLayer.destroy();\r\n            }\r\n        }\r\n\r\n        this.layers.length = 0;\r\n        this.currentLayerIndex = 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Removes the tile at the given tile coordinates in the specified layer and updates the layer's\r\n     * collision information.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     * This cannot be applied to StaticTilemapLayers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#removeTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|Phaser.Tilemaps.Tile)} tile - The index of this tile to set or a Tile object.\r\n     * @param {integer} tileX - [description]\r\n     * @param {integer} tileY - [description]\r\n     * @param {boolean} [replaceWithNull=true] - If true, this will replace the tile at the specified\r\n     * location with null instead of a Tile with an index of -1.\r\n     * @param {boolean} [recalculateFaces=true] - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile} Returns a Tile, or null if the layer given was invalid.\r\n     */\r\n    removeTileAt: function (tileX, tileY, replaceWithNull, recalculateFaces, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (this._isStaticCall(layer, 'removeTileAt')) { return null; }\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.RemoveTileAt(tileX, tileY, replaceWithNull, recalculateFaces, layer);\r\n    },\r\n\r\n    /**\r\n     * Removes the tile at the given world coordinates in the specified layer and updates the layer's\r\n     * collision information.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     * This cannot be applied to StaticTilemapLayers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#removeTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|Phaser.Tilemaps.Tile)} tile - The index of this tile to set or a Tile object.\r\n     * @param {number} worldX - [description]\r\n     * @param {number} worldY - [description]\r\n     * @param {boolean} [replaceWithNull=true] - If true, this will replace the tile at the specified\r\n     * location with null instead of a Tile with an index of -1.\r\n     * @param {boolean} [recalculateFaces=true] - [description]\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile} Returns a Tile, or null if the layer given was invalid.\r\n     */\r\n    removeTileAtWorldXY: function (worldX, worldY, replaceWithNull, recalculateFaces, camera, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (this._isStaticCall(layer, 'removeTileAtWorldXY')) { return null; }\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.RemoveTileAtWorldXY(worldX, worldY, replaceWithNull, recalculateFaces, camera, layer);\r\n    },\r\n\r\n    /**\r\n     * Draws a debug representation of the layer to the given Graphics. This is helpful when you want to\r\n     * get a quick idea of which of your tiles are colliding and which have interesting faces. The tiles\r\n     * are drawn starting at (0, 0) in the Graphics, allowing you to place the debug representation\r\n     * wherever you want on the screen.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#renderDebug\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Graphics} graphics - The target Graphics object to draw upon.\r\n     * @param {object} styleConfig - An object specifying the colors to use for the debug drawing.\r\n     * @param {?Color} [styleConfig.tileColor=blue] - Color to use for drawing a filled rectangle at\r\n     * non-colliding tile locations. If set to null, non-colliding tiles will not be drawn.\r\n     * @param {?Color} [styleConfig.collidingTileColor=orange] - Color to use for drawing a filled\r\n     * rectangle at colliding tile locations. If set to null, colliding tiles will not be drawn.\r\n     * @param {?Color} [styleConfig.faceColor=grey] - Color to use for drawing a line at interesting\r\n     * tile faces. If set to null, interesting tile faces will not be drawn.\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n     */\r\n    renderDebug: function (graphics, styleConfig, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return this; }\r\n\r\n        TilemapComponents.RenderDebug(graphics, styleConfig, layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Scans the given rectangular area (given in tile coordinates) for tiles with an index matching\r\n     * `findIndex` and updates their index to match `newIndex`. This only modifies the index and does\r\n     * not change collision information.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     * This cannot be applied to StaticTilemapLayers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#replaceByIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} findIndex - [description]\r\n     * @param {integer} newIndex - [description]\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n     */\r\n    replaceByIndex: function (findIndex, newIndex, tileX, tileY, width, height, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (this._isStaticCall(layer, 'replaceByIndex')) { return this; }\r\n\r\n        if (layer !== null)\r\n        {\r\n            TilemapComponents.ReplaceByIndex(findIndex, newIndex, tileX, tileY, width, height, layer);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on the given tile or tiles within a layer by index. You can pass in either a\r\n     * single numeric index or an array of indexes: [2, 3, 15, 20]. The `collides` parameter controls if\r\n     * collision will be enabled (true) or disabled (false).\r\n     *\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#setCollision\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|array)} indexes - Either a single tile index, or an array of tile indexes.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n     */\r\n    setCollision: function (indexes, collides, recalculateFaces, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return this; }\r\n\r\n        TilemapComponents.SetCollision(indexes, collides, recalculateFaces, layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on a range of tiles in a layer whose index is between the specified `start` and\r\n     * `stop` (inclusive). Calling this with a start value of 10 and a stop value of 14 would set\r\n     * collision for tiles 10, 11, 12, 13 and 14. The `collides` parameter controls if collision will be\r\n     * enabled (true) or disabled (false).\r\n     *\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#setCollisionBetween\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} start - The first index of the tile to be set for collision.\r\n     * @param {integer} stop - The last index of the tile to be set for collision.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n     */\r\n    setCollisionBetween: function (start, stop, collides, recalculateFaces, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return this; }\r\n\r\n        TilemapComponents.SetCollisionBetween(start, stop, collides, recalculateFaces, layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on the tiles within a layer by checking tile properties. If a tile has a property\r\n     * that matches the given properties object, its collision flag will be set. The `collides`\r\n     * parameter controls if collision will be enabled (true) or disabled (false). Passing in\r\n     * `{ collides: true }` would update the collision flag on any tiles with a \"collides\" property that\r\n     * has a value of true. Any tile that doesn't have \"collides\" set to true will be ignored. You can\r\n     * also use an array of values, e.g. `{ types: [\"stone\", \"lava\", \"sand\" ] }`. If a tile has a\r\n     * \"types\" property that matches any of those values, its collision flag will be updated.\r\n     *\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#setCollisionByProperty\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} properties - An object with tile properties and corresponding values that should\r\n     * be checked.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n     */\r\n    setCollisionByProperty: function (properties, collides, recalculateFaces, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return this; }\r\n\r\n        TilemapComponents.SetCollisionByProperty(properties, collides, recalculateFaces, layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on all tiles in the given layer, except for tiles that have an index specified in\r\n     * the given array. The `collides` parameter controls if collision will be enabled (true) or\r\n     * disabled (false).\r\n     *\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#setCollisionByExclusion\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer[]} indexes - An array of the tile indexes to not be counted for collision.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n     */\r\n    setCollisionByExclusion: function (indexes, collides, recalculateFaces, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return this; }\r\n\r\n        TilemapComponents.SetCollisionByExclusion(indexes, collides, recalculateFaces, layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on the tiles within a layer by checking each tile's collision group data\r\n     * (typically defined in Tiled within the tileset collision editor). If any objects are found within\r\n     * a tile's collision group, the tile's colliding information will be set. The `collides` parameter\r\n     * controls if collision will be enabled (true) or disabled (false).\r\n     *\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#setCollisionFromCollisionGroup\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n     */\r\n    setCollisionFromCollisionGroup: function (collides, recalculateFaces, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return this; }\r\n\r\n        TilemapComponents.SetCollisionFromCollisionGroup(collides, recalculateFaces, layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets a global collision callback for the given tile index within the layer. This will affect all\r\n     * tiles on this layer that have the same index. If a callback is already set for the tile index it\r\n     * will be replaced. Set the callback to null to remove it. If you want to set a callback for a tile\r\n     * at a specific location on the map then see setTileLocationCallback.\r\n     *\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#setTileIndexCallback\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|array)} indexes - Either a single tile index, or an array of tile indexes to have a\r\n     * collision callback set for.\r\n     * @param {function} callback - The callback that will be invoked when the tile is collided with.\r\n     * @param {object} callbackContext - The context under which the callback is called.\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n     */\r\n    setTileIndexCallback: function (indexes, callback, callbackContext, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return this; }\r\n\r\n        TilemapComponents.SetTileIndexCallback(indexes, callback, callbackContext, layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets a collision callback for the given rectangular area (in tile coordindates) within the layer.\r\n     * If a callback is already set for the tile index it will be replaced. Set the callback to null to\r\n     * remove it.\r\n     *\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#setTileLocationCallback\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {function} callback - The callback that will be invoked when the tile is collided with.\r\n     * @param {object} callbackContext - The context under which the callback is called.\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n     */\r\n    setTileLocationCallback: function (tileX, tileY, width, height, callback, callbackContext, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return this; }\r\n\r\n        TilemapComponents.SetTileLocationCallback(tileX, tileY, width, height, callback, callbackContext, layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the current layer to the LayerData associated with `layer`.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#setLayer\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The name of the\r\n     * layer from Tiled, the index of the layer in the map, a DynamicTilemapLayer or a\r\n     * StaticTilemapLayer. If not given will default to the map's current layer index.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tilemap} This Tilemap object.\r\n     */\r\n    setLayer: function (layer)\r\n    {\r\n        var index = this.getLayerIndex(layer);\r\n\r\n        if (index !== null)\r\n        {\r\n            this.currentLayerIndex = index;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the base tile size for the map. Note: this does not necessarily match the tileWidth and\r\n     * tileHeight for all layers. This also updates the base size on all tiles across all layers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#setBaseTileSize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileWidth - The width of the tiles the map uses for calculations.\r\n     * @param {integer} tileHeight - The height of the tiles the map uses for calculations.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tilemap} This Tilemap object.\r\n     */\r\n    setBaseTileSize: function (tileWidth, tileHeight)\r\n    {\r\n        this.tileWidth = tileWidth;\r\n        this.tileHeight = tileHeight;\r\n        this.widthInPixels = this.width * tileWidth;\r\n        this.heightInPixels = this.height * tileHeight;\r\n\r\n        // Update the base tile size on all layers & tiles\r\n        for (var i = 0; i < this.layers.length; i++)\r\n        {\r\n            this.layers[i].baseWidth = tileWidth;\r\n            this.layers[i].baseHeight = tileHeight;\r\n\r\n            var mapData = this.layers[i].data;\r\n            var mapWidth = this.layers[i].width;\r\n            var mapHeight = this.layers[i].height;\r\n\r\n            for (var row = 0; row < mapHeight; ++row)\r\n            {\r\n                for (var col = 0; col < mapWidth; ++col)\r\n                {\r\n                    var tile = mapData[row][col];\r\n\r\n                    if (tile !== null)\r\n                    {\r\n                        tile.setSize(undefined, undefined, tileWidth, tileHeight);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the tile size for a specific `layer`. Note: this does not necessarily match the map's\r\n     * tileWidth and tileHeight for all layers. This will set the tile size for the layer and any\r\n     * tiles the layer has.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#setLayerTileSize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileWidth - The width of the tiles (in pixels) in the layer.\r\n     * @param {integer} tileHeight - The height of the tiles (in pixels) in the layer.\r\n     * @param {(string|integer|Phaser.Tilemaps.DynamicTilemapLayer|Phaser.Tilemaps.StaticTilemapLayer)} [layer] - The name of the\r\n     * layer from Tiled, the index of the layer in the map, a DynamicTilemapLayer or a\r\n     * StaticTilemapLayer. If not given will default to the map's current layer index.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tilemap} This Tilemap object.\r\n     */\r\n    setLayerTileSize: function (tileWidth, tileHeight, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return this; }\r\n\r\n        layer.tileWidth = tileWidth;\r\n        layer.tileHeight = tileHeight;\r\n\r\n        var mapData = layer.data;\r\n        var mapWidth = layer.width;\r\n        var mapHeight = layer.height;\r\n\r\n        for (var row = 0; row < mapHeight; ++row)\r\n        {\r\n            for (var col = 0; col < mapWidth; ++col)\r\n            {\r\n                var tile = mapData[row][col];\r\n\r\n                if (tile !== null) { tile.setSize(tileWidth, tileHeight); }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Shuffles the tiles in a rectangular region (specified in tile coordinates) within the given\r\n     * layer. It will only randomize the tiles in that area, so if they're all the same nothing will\r\n     * appear to have changed! This method only modifies tile indexes and does not change collision\r\n     * information.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     * This cannot be applied to StaticTilemapLayers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#shuffle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n     */\r\n    shuffle: function (tileX, tileY, width, height, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (this._isStaticCall(layer, 'shuffle')) { return this; }\r\n\r\n        if (layer !== null)\r\n        {\r\n            TilemapComponents.Shuffle(tileX, tileY, width, height, layer);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Scans the given rectangular area (given in tile coordinates) for tiles with an index matching\r\n     * `indexA` and swaps then with `indexB`. This only modifies the index and does not change collision\r\n     * information.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     * This cannot be applied to StaticTilemapLayers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#swapByIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileA - First tile index.\r\n     * @param {integer} tileB - Second tile index.\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n     */\r\n    swapByIndex: function (indexA, indexB, tileX, tileY, width, height, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (this._isStaticCall(layer, 'swapByIndex')) { return this; }\r\n\r\n        if (layer !== null)\r\n        {\r\n            TilemapComponents.SwapByIndex(indexA, indexB, tileX, tileY, width, height, layer);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Converts from tile X coordinates (tile units) to world X coordinates (pixels), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#tileToWorldX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - [description]\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?number} Returns a number, or null if the layer given was invalid.\r\n     */\r\n    tileToWorldX: function (tileX, camera, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.TileToWorldX(tileX, camera, layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from tile Y coordinates (tile units) to world Y coordinates (pixels), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#tileToWorldY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileY - [description]\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?number} Returns a number, or null if the layer given was invalid.\r\n     */\r\n    tileToWorldY: function (tileX, camera, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.TileToWorldY(tileX, camera, layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from tile XY coordinates (tile units) to world XY coordinates (pixels), factoring in the\r\n     * layers position, scale and scroll. This will return a new Vector2 object or update the given\r\n     * `point` object.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#tileToWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - [description]\r\n     * @param {integer} tileY - [description]\r\n     * @param {Phaser.Math.Vector2} [point] - [description]\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Math.Vector2} Returns a point, or null if the layer given was invalid.\r\n     */\r\n    tileToWorldXY: function (tileX, tileY, point, camera, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.TileToWorldXY(tileX, tileY, point, camera, layer);\r\n    },\r\n\r\n    /**\r\n     * Randomizes the indexes of a rectangular region of tiles (in tile coordinates) within the\r\n     * specified layer. Each tile will receive a new index. New indexes are drawn from the given\r\n     * weightedIndexes array. An example weighted array:\r\n     *\r\n     * [\r\n     *  { index: 6, weight: 4 },    // Probability of index 6 is 4 / 8\r\n     *  { index: 7, weight: 2 },    // Probability of index 7 would be 2 / 8\r\n     *  { index: 8, weight: 1.5 },  // Probability of index 8 would be 1.5 / 8\r\n     *  { index: 26, weight: 0.5 }  // Probability of index 27 would be 0.5 / 8\r\n     * ]\r\n     *\r\n     * The probability of any index being choose is (the index's weight) / (sum of all weights). This\r\n     * method only modifies tile indexes and does not change collision information.\r\n     *\r\n     * If no layer specified, the map's current layer is used. This\r\n     * cannot be applied to StaticTilemapLayers.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#weightedRandomize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {object[]} [weightedIndexes] - An array of objects to randomly draw from during\r\n     * randomization. They should be in the form: { index: 0, weight: 4 } or\r\n     * { index: [0, 1], weight: 4 } if you wish to draw from multiple tile indexes.\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n     */\r\n    weightedRandomize: function (tileX, tileY, width, height, weightedIndexes, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (this._isStaticCall(layer, 'weightedRandomize')) { return this; }\r\n\r\n        if (layer !== null)\r\n        {\r\n            TilemapComponents.WeightedRandomize(tileX, tileY, width, height, weightedIndexes, layer);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Converts from world X coordinates (pixels) to tile X coordinates (tile units), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#worldToTileX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - [description]\r\n     * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the\r\n     * nearest integer.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?number} Returns a number, or null if the layer given was invalid.\r\n     */\r\n    worldToTileX: function (worldX, snapToFloor, camera, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.WorldToTileX(worldX, snapToFloor, camera, layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from world Y coordinates (pixels) to tile Y coordinates (tile units), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#worldToTileY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldY - [description]\r\n     * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the\r\n     * nearest integer.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?number} Returns a number, or null if the layer given was invalid.\r\n     */\r\n    worldToTileY: function (worldY, snapToFloor, camera, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.WorldToTileY(worldY, snapToFloor, camera, layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from world XY coordinates (pixels) to tile XY coordinates (tile units), factoring in the\r\n     * layers position, scale and scroll. This will return a new Vector2 object or update the given\r\n     * `point` object.\r\n     *\r\n     * If no layer specified, the maps current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#worldToTileXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - [description]\r\n     * @param {number} worldY - [description]\r\n     * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the\r\n     * nearest integer.\r\n     * @param {Phaser.Math.Vector2} [point] - [description]\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     * @param {Phaser.Tilemaps.LayerData} layer - [description]\r\n     *\r\n     * @return {?Phaser.Math.Vector2} Returns a point, or null if the layer given was invalid.\r\n     */\r\n    worldToTileXY: function (worldX, worldY, snapToFloor, point, camera, layer)\r\n    {\r\n        layer = this.getLayer(layer);\r\n\r\n        if (layer === null) { return null; }\r\n\r\n        return TilemapComponents.WorldToTileXY(worldX, worldY, snapToFloor, point, camera, layer);\r\n    },\r\n\r\n    /**\r\n     * Used internally to check if a layer is static and prints out a warning.\r\n     *\r\n     * @method Phaser.Tilemaps.Tilemap#_isStaticCall\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean}\r\n     */\r\n    _isStaticCall: function (layer, functionName)\r\n    {\r\n        if (layer.tilemapLayer instanceof StaticTilemapLayer)\r\n        {\r\n            console.warn(functionName + ': You cannot change the tiles in a static tilemap layer');\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Tilemap;\r\n"},"lineCount":2274}},"hash":"097f43dfa9b733719bfacc7240dc3eeb","cacheData":{"env":{}}}