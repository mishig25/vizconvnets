{"dependencies":[{"name":"/home/mishig/Desktop/vizgithub/frontend/package.json","includedInParent":true,"mtime":1523230167415},{"name":"/home/mishig/Desktop/vizgithub/frontend/node_modules/@tensorflow/tfjs-layers/package.json","includedInParent":true,"mtime":1522260134000},{"name":"underscore","loc":{"line":13,"column":16}},{"name":"../activations","loc":{"line":14,"column":28}},{"name":"../backend/tfjs_backend","loc":{"line":15,"column":16}},{"name":"../common","loc":{"line":16,"column":23}},{"name":"../constraints","loc":{"line":17,"column":28}},{"name":"../engine/topology","loc":{"line":18,"column":25}},{"name":"../errors","loc":{"line":19,"column":23}},{"name":"../initializers","loc":{"line":20,"column":29}},{"name":"../regularizers","loc":{"line":21,"column":29}},{"name":"../utils/conv_utils","loc":{"line":22,"column":27}},{"name":"../utils/generic_utils","loc":{"line":23,"column":28}}],"generated":{"js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _ = require(\"underscore\");\nvar activations_1 = require(\"../activations\");\nvar K = require(\"../backend/tfjs_backend\");\nvar common_1 = require(\"../common\");\nvar constraints_1 = require(\"../constraints\");\nvar topology_1 = require(\"../engine/topology\");\nvar errors_1 = require(\"../errors\");\nvar initializers_1 = require(\"../initializers\");\nvar regularizers_1 = require(\"../regularizers\");\nvar conv_utils_1 = require(\"../utils/conv_utils\");\nvar generic_utils = require(\"../utils/generic_utils\");\nvar Conv = (function (_super) {\n    __extends(Conv, _super);\n    function Conv(rank, config) {\n        var _this = _super.call(this, config) || this;\n        _this.kernel = null;\n        _this.bias = null;\n        _this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n        _this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n        _this.rank = rank;\n        if (_this.rank !== 1 && _this.rank !== 2) {\n            throw new errors_1.NotImplementedError(\"Convolution layer for rank other than 1 or 2 (\" + _this.rank + \") is \" +\n                \"not implemented yet.\");\n        }\n        _this.filters = config.filters;\n        _this.kernelSize = conv_utils_1.normalizeArray(config.kernelSize, rank, 'kernelSize');\n        _this.strides = conv_utils_1.normalizeArray(config.strides == null ? 1 : config.strides, rank, 'strides');\n        _this.padding = config.padding == null ? 'valid' : config.padding;\n        common_1.checkPaddingMode(_this.padding);\n        _this.dataFormat =\n            config.dataFormat == null ? 'channelsLast' : config.dataFormat;\n        common_1.checkDataFormat(_this.dataFormat);\n        _this.dilationRate = config.dilationRate == null ? 1 : config.dilationRate;\n        if (!(_this.dilationRate === 1 ||\n            (Array.isArray(_this.dilationRate) &&\n                _.isEqual(_.uniq(_this.dilationRate), [1])))) {\n            throw new errors_1.NotImplementedError('Non-default dilation is not implemented for convolution layers ' +\n                'yet.');\n        }\n        _this.activation = activations_1.getActivation(config.activation);\n        _this.useBias = config.useBias == null ? true : config.useBias;\n        _this.kernelInitializer = initializers_1.getInitializer(config.kernelInitializer || _this.DEFAULT_KERNEL_INITIALIZER);\n        _this.biasInitializer =\n            initializers_1.getInitializer(config.biasInitializer || _this.DEFAULT_BIAS_INITIALIZER);\n        _this.kernelConstraint = constraints_1.getConstraint(config.kernelConstraint);\n        _this.biasConstraint = constraints_1.getConstraint(config.biasConstraint);\n        _this.kernelRegularizer = regularizers_1.getRegularizer(config.kernelRegularizer);\n        _this.biasRegularizer = regularizers_1.getRegularizer(config.biasRegularizer);\n        _this.activityRegularizer = regularizers_1.getRegularizer(config.activityRegularizer);\n        return _this;\n    }\n    Conv.prototype.build = function (inputShape) {\n        inputShape = generic_utils.getExactlyOneShape(inputShape);\n        var channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n        if (inputShape[channelAxis] == null) {\n            throw new errors_1.ValueError(\"The channel dimension of the input should be defined. \" +\n                (\"Found \" + inputShape[channelAxis]));\n        }\n        var inputDim = inputShape[channelAxis];\n        var kernelShape = this.kernelSize.concat([inputDim, this.filters]);\n        this.kernel = this.addWeight('kernel', kernelShape, null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [this.filters], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        this.inputSpec = [{ ndim: this.rank + 2, axes: (_a = {}, _a[channelAxis] = inputDim, _a) }];\n        this.built = true;\n        var _a;\n    };\n    Conv.prototype.call = function (inputs, kwargs) {\n        inputs = generic_utils.getExactlyOneTensor(inputs);\n        var outputs;\n        var biasValue = this.bias == null ? null : this.bias.read();\n        if (this.rank === 1) {\n            outputs = K.conv1dWithBias(inputs, this.kernel.read(), biasValue, this.strides[0], this.padding, this.dataFormat);\n        }\n        else if (this.rank === 2) {\n            outputs = K.conv2dWithBias(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat);\n        }\n        else if (this.rank === 3) {\n            throw new errors_1.NotImplementedError('3D convolution is not implemented yet.');\n        }\n        if (this.activation != null) {\n            outputs = this.activation(outputs);\n        }\n        return outputs;\n    };\n    Conv.prototype.computeOutputShape = function (inputShape) {\n        inputShape = generic_utils.getExactlyOneShape(inputShape);\n        var newSpace = [];\n        var space = (this.dataFormat === 'channelsLast') ?\n            inputShape.slice(1, inputShape.length - 1) :\n            inputShape.slice(2);\n        for (var i = 0; i < space.length; ++i) {\n            var newDim = conv_utils_1.convOutputLength(space[i], this.kernelSize[i], this.padding, this.strides[i], typeof this.dilationRate === 'number' ? this.dilationRate :\n                this.dilationRate[i]);\n            newSpace.push(newDim);\n        }\n        var outputShape = [inputShape[0]];\n        if (this.dataFormat === 'channelsLast') {\n            outputShape = outputShape.concat(newSpace);\n            outputShape.push(this.filters);\n        }\n        else {\n            outputShape.push(this.filters);\n            outputShape = outputShape.concat(newSpace);\n        }\n        return outputShape;\n    };\n    Conv.prototype.getConfig = function () {\n        var config = {\n            rank: this.rank,\n            filters: this.filters,\n            kernelSize: this.kernelSize,\n            strides: this.strides,\n            padding: this.padding,\n            dataFormat: this.dataFormat,\n            dilationRate: this.dilationRate,\n            activation: activations_1.serializeActivation(this.activation),\n            useBias: this.useBias,\n            kernelInitializer: initializers_1.serializeInitializer(this.kernelInitializer),\n            biasInitializer: initializers_1.serializeInitializer(this.biasInitializer),\n            kernelRegularizer: regularizers_1.serializeRegularizer(this.kernelRegularizer),\n            biasRegularizer: regularizers_1.serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: regularizers_1.serializeRegularizer(this.activityRegularizer),\n            kernelConstraint: constraints_1.serializeConstraint(this.kernelConstraint),\n            biasConstraint: constraints_1.serializeConstraint(this.biasConstraint)\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    return Conv;\n}(topology_1.Layer));\nexports.Conv = Conv;\nvar Conv2D = (function (_super) {\n    __extends(Conv2D, _super);\n    function Conv2D(config) {\n        return _super.call(this, 2, config) || this;\n    }\n    Conv2D.prototype.getConfig = function () {\n        var config = _super.prototype.getConfig.call(this);\n        delete config['rank'];\n        return config;\n    };\n    return Conv2D;\n}(Conv));\nexports.Conv2D = Conv2D;\ngeneric_utils.ClassNameMap.register('Conv2D', Conv2D);\nvar Conv1D = (function (_super) {\n    __extends(Conv1D, _super);\n    function Conv1D(config) {\n        var _this = _super.call(this, 1, config) || this;\n        _this.inputSpec = [{ ndim: 3 }];\n        return _this;\n    }\n    Conv1D.prototype.getConfig = function () {\n        var config = _super.prototype.getConfig.call(this);\n        delete config['rank'];\n        delete config['dataFormat'];\n        return config;\n    };\n    return Conv1D;\n}(Conv));\nexports.Conv1D = Conv1D;\ngeneric_utils.ClassNameMap.register('Conv1D', Conv1D);\n","map":{"mappings":[{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}}],"sources":{"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _ = require(\"underscore\");\nvar activations_1 = require(\"../activations\");\nvar K = require(\"../backend/tfjs_backend\");\nvar common_1 = require(\"../common\");\nvar constraints_1 = require(\"../constraints\");\nvar topology_1 = require(\"../engine/topology\");\nvar errors_1 = require(\"../errors\");\nvar initializers_1 = require(\"../initializers\");\nvar regularizers_1 = require(\"../regularizers\");\nvar conv_utils_1 = require(\"../utils/conv_utils\");\nvar generic_utils = require(\"../utils/generic_utils\");\nvar Conv = (function (_super) {\n    __extends(Conv, _super);\n    function Conv(rank, config) {\n        var _this = _super.call(this, config) || this;\n        _this.kernel = null;\n        _this.bias = null;\n        _this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n        _this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n        _this.rank = rank;\n        if (_this.rank !== 1 && _this.rank !== 2) {\n            throw new errors_1.NotImplementedError(\"Convolution layer for rank other than 1 or 2 (\" + _this.rank + \") is \" +\n                \"not implemented yet.\");\n        }\n        _this.filters = config.filters;\n        _this.kernelSize = conv_utils_1.normalizeArray(config.kernelSize, rank, 'kernelSize');\n        _this.strides = conv_utils_1.normalizeArray(config.strides == null ? 1 : config.strides, rank, 'strides');\n        _this.padding = config.padding == null ? 'valid' : config.padding;\n        common_1.checkPaddingMode(_this.padding);\n        _this.dataFormat =\n            config.dataFormat == null ? 'channelsLast' : config.dataFormat;\n        common_1.checkDataFormat(_this.dataFormat);\n        _this.dilationRate = config.dilationRate == null ? 1 : config.dilationRate;\n        if (!(_this.dilationRate === 1 ||\n            (Array.isArray(_this.dilationRate) &&\n                _.isEqual(_.uniq(_this.dilationRate), [1])))) {\n            throw new errors_1.NotImplementedError('Non-default dilation is not implemented for convolution layers ' +\n                'yet.');\n        }\n        _this.activation = activations_1.getActivation(config.activation);\n        _this.useBias = config.useBias == null ? true : config.useBias;\n        _this.kernelInitializer = initializers_1.getInitializer(config.kernelInitializer || _this.DEFAULT_KERNEL_INITIALIZER);\n        _this.biasInitializer =\n            initializers_1.getInitializer(config.biasInitializer || _this.DEFAULT_BIAS_INITIALIZER);\n        _this.kernelConstraint = constraints_1.getConstraint(config.kernelConstraint);\n        _this.biasConstraint = constraints_1.getConstraint(config.biasConstraint);\n        _this.kernelRegularizer = regularizers_1.getRegularizer(config.kernelRegularizer);\n        _this.biasRegularizer = regularizers_1.getRegularizer(config.biasRegularizer);\n        _this.activityRegularizer = regularizers_1.getRegularizer(config.activityRegularizer);\n        return _this;\n    }\n    Conv.prototype.build = function (inputShape) {\n        inputShape = generic_utils.getExactlyOneShape(inputShape);\n        var channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n        if (inputShape[channelAxis] == null) {\n            throw new errors_1.ValueError(\"The channel dimension of the input should be defined. \" +\n                (\"Found \" + inputShape[channelAxis]));\n        }\n        var inputDim = inputShape[channelAxis];\n        var kernelShape = this.kernelSize.concat([inputDim, this.filters]);\n        this.kernel = this.addWeight('kernel', kernelShape, null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [this.filters], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        this.inputSpec = [{ ndim: this.rank + 2, axes: (_a = {}, _a[channelAxis] = inputDim, _a) }];\n        this.built = true;\n        var _a;\n    };\n    Conv.prototype.call = function (inputs, kwargs) {\n        inputs = generic_utils.getExactlyOneTensor(inputs);\n        var outputs;\n        var biasValue = this.bias == null ? null : this.bias.read();\n        if (this.rank === 1) {\n            outputs = K.conv1dWithBias(inputs, this.kernel.read(), biasValue, this.strides[0], this.padding, this.dataFormat);\n        }\n        else if (this.rank === 2) {\n            outputs = K.conv2dWithBias(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat);\n        }\n        else if (this.rank === 3) {\n            throw new errors_1.NotImplementedError('3D convolution is not implemented yet.');\n        }\n        if (this.activation != null) {\n            outputs = this.activation(outputs);\n        }\n        return outputs;\n    };\n    Conv.prototype.computeOutputShape = function (inputShape) {\n        inputShape = generic_utils.getExactlyOneShape(inputShape);\n        var newSpace = [];\n        var space = (this.dataFormat === 'channelsLast') ?\n            inputShape.slice(1, inputShape.length - 1) :\n            inputShape.slice(2);\n        for (var i = 0; i < space.length; ++i) {\n            var newDim = conv_utils_1.convOutputLength(space[i], this.kernelSize[i], this.padding, this.strides[i], typeof this.dilationRate === 'number' ? this.dilationRate :\n                this.dilationRate[i]);\n            newSpace.push(newDim);\n        }\n        var outputShape = [inputShape[0]];\n        if (this.dataFormat === 'channelsLast') {\n            outputShape = outputShape.concat(newSpace);\n            outputShape.push(this.filters);\n        }\n        else {\n            outputShape.push(this.filters);\n            outputShape = outputShape.concat(newSpace);\n        }\n        return outputShape;\n    };\n    Conv.prototype.getConfig = function () {\n        var config = {\n            rank: this.rank,\n            filters: this.filters,\n            kernelSize: this.kernelSize,\n            strides: this.strides,\n            padding: this.padding,\n            dataFormat: this.dataFormat,\n            dilationRate: this.dilationRate,\n            activation: activations_1.serializeActivation(this.activation),\n            useBias: this.useBias,\n            kernelInitializer: initializers_1.serializeInitializer(this.kernelInitializer),\n            biasInitializer: initializers_1.serializeInitializer(this.biasInitializer),\n            kernelRegularizer: regularizers_1.serializeRegularizer(this.kernelRegularizer),\n            biasRegularizer: regularizers_1.serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: regularizers_1.serializeRegularizer(this.activityRegularizer),\n            kernelConstraint: constraints_1.serializeConstraint(this.kernelConstraint),\n            biasConstraint: constraints_1.serializeConstraint(this.biasConstraint)\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    return Conv;\n}(topology_1.Layer));\nexports.Conv = Conv;\nvar Conv2D = (function (_super) {\n    __extends(Conv2D, _super);\n    function Conv2D(config) {\n        return _super.call(this, 2, config) || this;\n    }\n    Conv2D.prototype.getConfig = function () {\n        var config = _super.prototype.getConfig.call(this);\n        delete config['rank'];\n        return config;\n    };\n    return Conv2D;\n}(Conv));\nexports.Conv2D = Conv2D;\ngeneric_utils.ClassNameMap.register('Conv2D', Conv2D);\nvar Conv1D = (function (_super) {\n    __extends(Conv1D, _super);\n    function Conv1D(config) {\n        var _this = _super.call(this, 1, config) || this;\n        _this.inputSpec = [{ ndim: 3 }];\n        return _this;\n    }\n    Conv1D.prototype.getConfig = function () {\n        var config = _super.prototype.getConfig.call(this);\n        delete config['rank'];\n        delete config['dataFormat'];\n        return config;\n    };\n    return Conv1D;\n}(Conv));\nexports.Conv1D = Conv1D;\ngeneric_utils.ClassNameMap.register('Conv1D', Conv1D);\n"},"lineCount":178}},"hash":"9ea16588dc4ae792be8fa83401c219e0","cacheData":{"env":{}}}