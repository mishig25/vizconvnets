{"dependencies":[{"name":"/home/mishig/Desktop/viz/final/package.json","includedInParent":true,"mtime":1522648746056},{"name":"/home/mishig/Desktop/viz/final/node_modules/phaser/package.json","includedInParent":true,"mtime":1521632677000},{"name":"../../utils/Class","loc":{"line":7,"column":20}},{"name":"../../gameobjects/components","loc":{"line":8,"column":25}},{"name":"../../const","loc":{"line":9,"column":20}},{"name":"../../gameobjects/GameObject","loc":{"line":10,"column":25}},{"name":"./StaticTilemapLayerRender","loc":{"line":11,"column":39}},{"name":"../components","loc":{"line":12,"column":32}},{"name":"../../renderer/webgl/Utils","loc":{"line":13,"column":20}}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Components = require('../../gameobjects/components');\r\nvar CONST = require('../../const');\r\nvar GameObject = require('../../gameobjects/GameObject');\r\nvar StaticTilemapLayerRender = require('./StaticTilemapLayerRender');\r\nvar TilemapComponents = require('../components');\r\nvar Utils = require('../../renderer/webgl/Utils');\r\n\r\n/**\r\n * @classdesc\r\n * A StaticTilemapLayer is a game object that renders LayerData from a Tilemap. A\r\n * StaticTilemapLayer can only render tiles from a single tileset.\r\n *\r\n * A StaticTilemapLayer is optimized for speed over flexibility. You cannot apply per-tile\r\n * effects like tint or alpha. You cannot change the tiles in a StaticTilemapLayer. Use this\r\n * over a DynamicTilemapLayer when you don't need either of those features.\r\n *\r\n * @class StaticTilemapLayer\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberOf Phaser.Tilemaps\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.Alpha\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.Flip\r\n * @extends Phaser.GameObjects.Components.GetBounds\r\n * @extends Phaser.GameObjects.Components.Origin\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.ScaleMode\r\n * @extends Phaser.GameObjects.Components.Size\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n *\r\n * @param {Phaser.Scene} scene - [description]\r\n * @param {Phaser.Tilemaps.Tilemap} tilemap - The Tilemap this layer is a part of.\r\n * @param {integer} layerIndex - The index of the LayerData associated with this layer.\r\n * @param {Phaser.Tilemaps.Tileset} tileset - The tileset used to render the tiles in this layer.\r\n * @param {number} [x=0] - The world x position where the top left of this layer will be placed.\r\n * @param {number} [y=0] - The world y position where the top left of this layer will be placed.\r\n */\r\nvar StaticTilemapLayer = new Class({\r\n\r\n    Extends: GameObject,\r\n\r\n    Mixins: [\r\n        Components.Alpha,\r\n        Components.BlendMode,\r\n        Components.Depth,\r\n        Components.Flip,\r\n        Components.GetBounds,\r\n        Components.Origin,\r\n        Components.Pipeline,\r\n        Components.ScaleMode,\r\n        Components.Size,\r\n        Components.Transform,\r\n        Components.Visible,\r\n        Components.ScrollFactor,\r\n        StaticTilemapLayerRender\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function StaticTilemapLayer (scene, tilemap, layerIndex, tileset, x, y)\r\n    {\r\n        GameObject.call(this, scene, 'StaticTilemapLayer');\r\n\r\n        /**\r\n         * Used internally by physics system to perform fast type checks.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#isTilemap\r\n         * @type {boolean}\r\n         * @readOnly\r\n         * @since 3.0.0\r\n         */\r\n        this.isTilemap = true;\r\n\r\n        /**\r\n         * The Tilemap that this layer is a part of.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#tilemap\r\n         * @type {Phaser.Tilemaps.Tilemap}\r\n         * @since 3.0.0\r\n         */\r\n        this.tilemap = tilemap;\r\n\r\n        /**\r\n         * The index of the LayerData associated with this layer.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#layerIndex\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.layerIndex = layerIndex;\r\n\r\n        /**\r\n         * The LayerData associated with this layer. LayerData can only be associated with one\r\n         * tilemap layer.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#layer\r\n         * @type {Phaser.Tilemaps.LayerData}\r\n         * @since 3.0.0\r\n         */\r\n        this.layer = tilemap.layers[layerIndex];\r\n\r\n        this.layer.tilemapLayer = this; // Link the LayerData with this static tilemap layer\r\n\r\n        /**\r\n         * The Tileset associated with this layer. A tilemap layer can only render from one Tileset.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#tileset\r\n         * @type {Phaser.Tilemaps.Tileset}\r\n         * @since 3.0.0\r\n         */\r\n        this.tileset = tileset;\r\n\r\n        /**\r\n         * Used internally with the canvas render. This holds the tiles that are visible within the\r\n         * camera.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#culledTiles\r\n         * @type {array}\r\n         * @since 3.0.0\r\n         */\r\n        this.culledTiles = [];\r\n\r\n        /**\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#vertexBuffer\r\n         * @type {array}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.vertexBuffer = null;\r\n\r\n        /**\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#renderer\r\n         * @type {(Phaser.Renderer.CanvasRenderer|Phaser.Renderer.WebGLRenderer)}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.renderer = scene.sys.game.renderer;\r\n\r\n        /**\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#bufferData\r\n         * @type {ArrayBuffer}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.bufferData = null;\r\n\r\n        /**\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#vertexViewF32\r\n         * @type {Float32Array}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.vertexViewF32 = null;\r\n\r\n        /**\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#vertexViewU32\r\n         * @type {Uint32Array}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.vertexViewU32 = null;\r\n\r\n        /**\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#dirty\r\n         * @type {boolean}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.dirty = true;\r\n\r\n        /**\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#vertexCount\r\n         * @type {integer}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.vertexCount = 0;\r\n\r\n        this.setAlpha(this.layer.alpha);\r\n        this.setPosition(x, y);\r\n        this.setOrigin();\r\n        this.setSize(this.layer.tileWidth * this.layer.width, this.layer.tileHeight * this.layer.height);\r\n\r\n        this.initPipeline('TextureTintPipeline');\r\n\r\n        if (scene.sys.game.config.renderType === CONST.WEBGL)\r\n        {\r\n            scene.sys.game.renderer.onContextRestored(function ()\r\n            {\r\n                this.dirty = true;\r\n                this.vertexBuffer = null;\r\n            }, this);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Upload the tile data to a VBO.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#upload\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera to render to.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    upload: function (camera)\r\n    {\r\n        var tileset = this.tileset;\r\n        var mapWidth = this.layer.width;\r\n        var mapHeight = this.layer.height;\r\n        var width = tileset.image.get().width;\r\n        var height = tileset.image.get().height;\r\n        var mapData = this.layer.data;\r\n        var renderer = this.renderer;\r\n        var tile;\r\n        var row;\r\n        var col;\r\n        var texCoords;\r\n\r\n        if (renderer.gl)\r\n        {\r\n            var pipeline = renderer.pipelines.TextureTintPipeline;\r\n\r\n            if (this.dirty)\r\n            {\r\n                var gl = renderer.gl;\r\n                var vertexBuffer = this.vertexBuffer;\r\n                var bufferData = this.bufferData;\r\n                var voffset = 0;\r\n                var vertexCount = 0;\r\n                var bufferSize = (mapWidth * mapHeight) * pipeline.vertexSize * 6;\r\n\r\n                if (bufferData === null)\r\n                {\r\n                    bufferData = new ArrayBuffer(bufferSize);\r\n                    this.bufferData = bufferData;\r\n                    this.vertexViewF32 = new Float32Array(bufferData);\r\n                    this.vertexViewU32 = new Uint32Array(bufferData);\r\n                }\r\n\r\n                var vertexViewF32 = this.vertexViewF32;\r\n                var vertexViewU32 = this.vertexViewU32;\r\n\r\n                for (row = 0; row < mapHeight; ++row)\r\n                {\r\n                    for (col = 0; col < mapWidth; ++col)\r\n                    {\r\n                        tile = mapData[row][col];\r\n                        if (tile === null || tile.index === -1) { continue; }\r\n\r\n                        var tx = tile.pixelX;\r\n                        var ty = tile.pixelY;\r\n                        var txw = tx + tile.width;\r\n                        var tyh = ty + tile.height;\r\n\r\n                        texCoords = tileset.getTileTextureCoordinates(tile.index);\r\n                        if (texCoords === null) { continue; }\r\n\r\n                        var u0 = texCoords.x / width;\r\n                        var v0 = texCoords.y / height;\r\n                        var u1 = (texCoords.x + tile.width) / width;\r\n                        var v1 = (texCoords.y + tile.height) / height;\r\n\r\n                        var tx0 = tx;\r\n                        var ty0 = ty;\r\n                        var tx1 = tx;\r\n                        var ty1 = tyh;\r\n                        var tx2 = txw;\r\n                        var ty2 = tyh;\r\n                        var tx3 = txw;\r\n                        var ty3 = ty;\r\n                        var tint = Utils.getTintAppendFloatAlpha(0xffffff, this.alpha * tile.alpha);\r\n\r\n                        vertexViewF32[voffset + 0] = tx0;\r\n                        vertexViewF32[voffset + 1] = ty0;\r\n                        vertexViewF32[voffset + 2] = u0;\r\n                        vertexViewF32[voffset + 3] = v0;\r\n                        vertexViewU32[voffset + 4] = tint;\r\n                        vertexViewF32[voffset + 5] = tx1;\r\n                        vertexViewF32[voffset + 6] = ty1;\r\n                        vertexViewF32[voffset + 7] = u0;\r\n                        vertexViewF32[voffset + 8] = v1;\r\n                        vertexViewU32[voffset + 9] = tint;\r\n                        vertexViewF32[voffset + 10] = tx2;\r\n                        vertexViewF32[voffset + 11] = ty2;\r\n                        vertexViewF32[voffset + 12] = u1;\r\n                        vertexViewF32[voffset + 13] = v1;\r\n                        vertexViewU32[voffset + 14] = tint;\r\n                        vertexViewF32[voffset + 15] = tx0;\r\n                        vertexViewF32[voffset + 16] = ty0;\r\n                        vertexViewF32[voffset + 17] = u0;\r\n                        vertexViewF32[voffset + 18] = v0;\r\n                        vertexViewU32[voffset + 19] = tint;\r\n                        vertexViewF32[voffset + 20] = tx2;\r\n                        vertexViewF32[voffset + 21] = ty2;\r\n                        vertexViewF32[voffset + 22] = u1;\r\n                        vertexViewF32[voffset + 23] = v1;\r\n                        vertexViewU32[voffset + 24] = tint;\r\n                        vertexViewF32[voffset + 25] = tx3;\r\n                        vertexViewF32[voffset + 26] = ty3;\r\n                        vertexViewF32[voffset + 27] = u1;\r\n                        vertexViewF32[voffset + 28] = v0;\r\n                        vertexViewU32[voffset + 29] = tint;\r\n\r\n                        voffset += 30;\r\n                        vertexCount += 6;\r\n                    }\r\n                }\r\n\r\n                this.vertexCount = vertexCount;\r\n                this.dirty = false;\r\n                if (vertexBuffer === null)\r\n                {\r\n                    vertexBuffer = renderer.createVertexBuffer(bufferData, gl.STATIC_DRAW);\r\n                    this.vertexBuffer = vertexBuffer;\r\n                }\r\n                else\r\n                {\r\n                    renderer.setVertexBuffer(vertexBuffer);\r\n                    gl.bufferSubData(gl.ARRAY_BUFFER, 0, bufferData);\r\n                }\r\n            }\r\n\r\n            pipeline.modelIdentity();\r\n            pipeline.modelTranslate(this.x - (camera.scrollX * this.scrollFactorX), this.y - (camera.scrollY * this.scrollFactorY), 0.0);\r\n            pipeline.modelScale(this.scaleX, this.scaleY, 1.0);\r\n            pipeline.viewLoad2D(camera.matrix.matrix);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculates interesting faces at the given tile coordinates of the specified layer. Interesting\r\n     * faces are used internally for optimizing collisions against tiles. This method is mostly used\r\n     * internally to optimize recalculating faces when only one tile has been changed.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#calculateFacesAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - The x coordinate.\r\n     * @param {integer} tileY - The y coordinate.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    calculateFacesAt: function (tileX, tileY)\r\n    {\r\n        TilemapComponents.CalculateFacesAt(tileX, tileY, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculates interesting faces within the rectangular area specified (in tile coordinates) of the\r\n     * layer. Interesting faces are used internally for optimizing collisions against tiles. This method\r\n     * is mostly used internally.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#calculateFacesWithin\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    calculateFacesWithin: function (tileX, tileY, width, height)\r\n    {\r\n        TilemapComponents.CalculateFacesWithin(tileX, tileY, width, height, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Creates a Sprite for every object matching the given tile indexes in the layer. You can\r\n     * optionally specify if each tile will be replaced with a new tile after the Sprite has been\r\n     * created. This is useful if you want to lay down special tiles in a level that are converted to\r\n     * Sprites, but want to replace the tile itself with a floor tile or similar once converted.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#createFromTiles\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|array)} indexes - The tile index, or array of indexes, to create Sprites from.\r\n     * @param {(integer|array)} replacements - The tile index, or array of indexes, to change a converted\r\n     * tile to. Set to `null` to leave the tiles unchanged. If an array is given, it is assumed to be a\r\n     * one-to-one mapping with the indexes array.\r\n     * @param {object} spriteConfig - The config object to pass into the Sprite creator (i.e.\r\n     * scene.make.sprite).\r\n     * @param {Phaser.Scene} [scene=scene the map is within] - The Scene to create the Sprites within.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when determining the world XY\r\n     *\r\n     * @return {Phaser.GameObjects.Sprite[]} An array of the Sprites that were created.\r\n     */\r\n    createFromTiles: function (indexes, replacements, spriteConfig, scene, camera)\r\n    {\r\n        return TilemapComponents.CreateFromTiles(indexes, replacements, spriteConfig, scene, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Returns the tiles in the given layer that are within the cameras viewport.\r\n     * This is used internally.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#cull\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera] - The Camera to run the cull check against.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    cull: function (camera)\r\n    {\r\n        return TilemapComponents.CullTiles(this.layer, camera, this.culledTiles);\r\n    },\r\n\r\n    /**\r\n     * Destroys this StaticTilemapLayer and removes its link to the associated LayerData.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        // Uninstall this layer only if it is still installed on the LayerData object\r\n        if (this.layer.tilemapLayer === this)\r\n        {\r\n            this.layer.tilemapLayer = undefined;\r\n        }\r\n\r\n        this.tilemap = undefined;\r\n        this.layer = undefined;\r\n        this.tileset = undefined;\r\n\r\n        GameObject.prototype.destroy.call(this);\r\n    },\r\n\r\n    /**\r\n     * Searches the entire map layer for the first tile matching the given index, then returns that Tile\r\n     * object. If no match is found, it returns null. The search starts from the top-left tile and\r\n     * continues horizontally until it hits the end of the row, then it drops down to the next column.\r\n     * If the reverse boolean is true, it scans starting from the bottom-right corner traveling up to\r\n     * the top-left.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#findByIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} index - The tile index value to search for.\r\n     * @param {integer} [skip=0] - The number of times to skip a matching tile before returning.\r\n     * @param {boolean} [reverse=false] - If true it will scan the layer in reverse, starting at the\r\n     * bottom-right. Otherwise it scans from the top-left.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n     */\r\n    findByIndex: function (findIndex, skip, reverse)\r\n    {\r\n        return TilemapComponents.FindByIndex(findIndex, skip, reverse, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Find the first tile in the given rectangular area (in tile coordinates) of the layer that\r\n     * satisfies the provided testing function. I.e. finds the first tile for which `callback` returns\r\n     * true. Similar to Array.prototype.find in vanilla JS.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#findTile\r\n     * @since 3.0.0\r\n     *\r\n     * @param {function} callback - The callback. Each tile in the given area will be passed to this\r\n     * callback as the first and only parameter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have\r\n     * -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide\r\n     * on at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that\r\n     * have at least one interesting face.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile}\r\n     */\r\n    findTile: function (callback, context, tileX, tileY, width, height, filteringOptions)\r\n    {\r\n        return TilemapComponents.FindTile(callback, context, tileX, tileY, width, height, filteringOptions, this.layer);\r\n    },\r\n\r\n    /**\r\n     * For each tile in the given rectangular area (in tile coordinates) of the layer, run the given\r\n     * filter callback function. Any tiles that pass the filter test (i.e. where the callback returns\r\n     * true) will returned as a new array. Similar to Array.prototype.Filter in vanilla JS.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#filterTiles\r\n     * @since 3.0.0\r\n     *\r\n     * @param {function} callback - The callback. Each tile in the given area will be passed to this\r\n     * callback as the first and only parameter. The callback should return true for tiles that pass the\r\n     * filter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have\r\n     * -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide\r\n     * on at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that\r\n     * have at least one interesting face.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    filterTiles: function (callback, context, tileX, tileY, width, height, filteringOptions)\r\n    {\r\n        return TilemapComponents.FilterTiles(callback, context, tileX, tileY, width, height, filteringOptions, this.layer);\r\n    },\r\n\r\n    /**\r\n     * For each tile in the given rectangular area (in tile coordinates) of the layer, run the given\r\n     * callback. Similar to Array.prototype.forEach in vanilla JS.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#forEachTile\r\n     * @since 3.0.0\r\n     *\r\n     * @param {function} callback - The callback. Each tile in the given area will be passed to this\r\n     * callback as the first and only parameter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have\r\n     * -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide\r\n     * on at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that\r\n     * have at least one interesting face.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    forEachTile: function (callback, context, tileX, tileY, width, height, filteringOptions)\r\n    {\r\n        TilemapComponents.ForEachTile(callback, context, tileX, tileY, width, height, filteringOptions, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Gets a tile at the given tile coordinates from the given layer.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#getTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - X position to get the tile from (given in tile units, not pixels).\r\n     * @param {integer} tileY - Y position to get the tile from (given in tile units, not pixels).\r\n     * @param {boolean} [nonNull=false] - If true getTile won't return null for empty tiles, but a Tile\r\n     * object with an index of -1.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} The tile at the given coordinates or null if no tile was found or the coordinates were invalid.\r\n     */\r\n    getTileAt: function (tileX, tileY, nonNull)\r\n    {\r\n        return TilemapComponents.GetTileAt(tileX, tileY, nonNull, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Gets a tile at the given world coordinates from the given layer.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#getTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - X position to get the tile from (given in pixels)\r\n     * @param {number} worldY - Y position to get the tile from (given in pixels)\r\n     * @param {boolean} [nonNull=false] - If true, function won't return null for empty tiles, but a Tile\r\n     * object with an index of -1.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} The tile at the given coordinates or null if no tile was found or the coordinates\r\n     * were invalid.\r\n     */\r\n    getTileAtWorldXY: function (worldX, worldY, nonNull, camera)\r\n    {\r\n        return TilemapComponents.GetTileAtWorldXY(worldX, worldY, nonNull, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Gets the tiles in the given rectangular area (in tile coordinates) of the layer.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#getTilesWithin\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have\r\n     * -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on\r\n     * at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that\r\n     * have at least one interesting face.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    getTilesWithin: function (tileX, tileY, width, height, filteringOptions)\r\n    {\r\n        return TilemapComponents.GetTilesWithin(tileX, tileY, width, height, filteringOptions, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Gets the tiles in the given rectangular area (in world coordinates) of the layer.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#getTilesWithinWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - [description]\r\n     * @param {number} worldY - [description]\r\n     * @param {number} width - [description]\r\n     * @param {number} height - [description]\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have\r\n     * -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on\r\n     * at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that\r\n     * have at least one interesting face.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    getTilesWithinWorldXY: function (worldX, worldY, width, height, filteringOptions, camera)\r\n    {\r\n        return TilemapComponents.GetTilesWithinWorldXY(worldX, worldY, width, height, filteringOptions, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Gets the tiles that overlap with the given shape in the given layer. The shape must be a Circle,\r\n     * Line, Rectangle or Triangle. The shape should be in world coordinates.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#getTilesWithinShape\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Geom.Circle|Phaser.Geom.Line|Phaser.Geom.Rectangle|Phaser.Geom.Triangle)} shape - A shape in world (pixel) coordinates\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have\r\n     * -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on\r\n     * at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that\r\n     * have at least one interesting face.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    getTilesWithinShape: function (shape, filteringOptions, camera)\r\n    {\r\n        return TilemapComponents.GetTilesWithinShape(shape, filteringOptions, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Checks if there is a tile at the given location (in tile coordinates) in the given layer. Returns\r\n     * false if there is no tile or if the tile at that location has an index of -1.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#hasTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - [description]\r\n     * @param {integer} tileY - [description]\r\n     *\r\n     * @return {boolean}\r\n     */\r\n    hasTileAt: function (tileX, tileY)\r\n    {\r\n        return TilemapComponents.HasTileAt(tileX, tileY, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Checks if there is a tile at the given location (in world coordinates) in the given layer. Returns\r\n     * false if there is no tile or if the tile at that location has an index of -1.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#hasTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - [description]\r\n     * @param {number} worldY - [description]\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     *\r\n     * @return {boolean}\r\n     */\r\n    hasTileAtWorldXY: function (worldX, worldY, camera)\r\n    {\r\n        return TilemapComponents.HasTileAtWorldXY(worldX, worldY, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Draws a debug representation of the layer to the given Graphics. This is helpful when you want to\r\n     * get a quick idea of which of your tiles are colliding and which have interesting faces. The tiles\r\n     * are drawn starting at (0, 0) in the Graphics, allowing you to place the debug representation\r\n     * wherever you want on the screen.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#renderDebug\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Graphics} graphics - The target Graphics object to draw upon.\r\n     * @param {object} styleConfig - An object specifying the colors to use for the debug drawing.\r\n     * @param {?Color} [styleConfig.tileColor=blue] - Color to use for drawing a filled rectangle at\r\n     * non-colliding tile locations. If set to null, non-colliding tiles will not be drawn.\r\n     * @param {?Color} [styleConfig.collidingTileColor=orange] - Color to use for drawing a filled\r\n     * rectangle at colliding tile locations. If set to null, colliding tiles will not be drawn.\r\n     * @param {?Color} [styleConfig.faceColor=grey] - Color to use for drawing a line at interesting\r\n     * tile faces. If set to null, interesting tile faces will not be drawn.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    renderDebug: function (graphics, styleConfig)\r\n    {\r\n        TilemapComponents.RenderDebug(graphics, styleConfig, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on the given tile or tiles within a layer by index. You can pass in either a\r\n     * single numeric index or an array of indexes: [2, 3, 15, 20]. The `collides` parameter controls if\r\n     * collision will be enabled (true) or disabled (false).\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#setCollision\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|array)} indexes - Either a single tile index, or an array of tile indexes.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollision: function (indexes, collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollision(indexes, collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on a range of tiles in a layer whose index is between the specified `start` and\r\n     * `stop` (inclusive). Calling this with a start value of 10 and a stop value of 14 would set\r\n     * collision for tiles 10, 11, 12, 13 and 14. The `collides` parameter controls if collision will be\r\n     * enabled (true) or disabled (false).\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#setCollisionBetween\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} start - The first index of the tile to be set for collision.\r\n     * @param {integer} stop - The last index of the tile to be set for collision.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollisionBetween: function (start, stop, collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollisionBetween(start, stop, collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on the tiles within a layer by checking tile properties. If a tile has a property\r\n     * that matches the given properties object, its collision flag will be set. The `collides`\r\n     * parameter controls if collision will be enabled (true) or disabled (false). Passing in\r\n     * `{ collides: true }` would update the collision flag on any tiles with a \"collides\" property that\r\n     * has a value of true. Any tile that doesn't have \"collides\" set to true will be ignored. You can\r\n     * also use an array of values, e.g. `{ types: [\"stone\", \"lava\", \"sand\" ] }`. If a tile has a\r\n     * \"types\" property that matches any of those values, its collision flag will be updated.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#setCollisionByProperty\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} properties - An object with tile properties and corresponding values that should\r\n     * be checked.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollisionByProperty: function (properties, collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollisionByProperty(properties, collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on all tiles in the given layer, except for tiles that have an index specified in\r\n     * the given array. The `collides` parameter controls if collision will be enabled (true) or\r\n     * disabled (false).\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#setCollisionByExclusion\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer[]} indexes - An array of the tile indexes to not be counted for collision.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollisionByExclusion: function (indexes, collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollisionByExclusion(indexes, collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets a global collision callback for the given tile index within the layer. This will affect all\r\n     * tiles on this layer that have the same index. If a callback is already set for the tile index it\r\n     * will be replaced. Set the callback to null to remove it. If you want to set a callback for a tile\r\n     * at a specific location on the map then see setTileLocationCallback.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#setTileIndexCallback\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|array)} indexes - Either a single tile index, or an array of tile indexes to have a\r\n     * collision callback set for.\r\n     * @param {function} callback - The callback that will be invoked when the tile is collided with.\r\n     * @param {object} callbackContext - The context under which the callback is called.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setTileIndexCallback: function (indexes, callback, callbackContext)\r\n    {\r\n        TilemapComponents.SetTileIndexCallback(indexes, callback, callbackContext, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on the tiles within a layer by checking each tiles collision group data\r\n     * (typically defined in Tiled within the tileset collision editor). If any objects are found within\r\n     * a tiles collision group, the tile's colliding information will be set. The `collides` parameter\r\n     * controls if collision will be enabled (true) or disabled (false).\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#setCollisionFromCollisionGroup\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollisionFromCollisionGroup: function (collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollisionFromCollisionGroup(collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets a collision callback for the given rectangular area (in tile coordinates) within the layer.\r\n     * If a callback is already set for the tile index it will be replaced. Set the callback to null to\r\n     * remove it.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#setTileLocationCallback\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {function} callback - The callback that will be invoked when the tile is collided with.\r\n     * @param {object} callbackContext - The context under which the callback is called.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setTileLocationCallback: function (tileX, tileY, width, height, callback, callbackContext)\r\n    {\r\n        TilemapComponents.SetTileLocationCallback(tileX, tileY, width, height, callback, callbackContext, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Converts from tile X coordinates (tile units) to world X coordinates (pixels), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#tileToWorldX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - [description]\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     *\r\n     * @return {number}\r\n     */\r\n    tileToWorldX: function (tileX, camera)\r\n    {\r\n        return TilemapComponents.TileToWorldX(tileX, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from tile Y coordinates (tile units) to world Y coordinates (pixels), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#tileToWorldY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileY - [description]\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     *\r\n     * @return {number}\r\n     */\r\n    tileToWorldY: function (tileY, camera)\r\n    {\r\n        return TilemapComponents.TileToWorldY(tileY, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from tile XY coordinates (tile units) to world XY coordinates (pixels), factoring in the\r\n     * layers position, scale and scroll. This will return a new Vector2 object or update the given\r\n     * `point` object.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#tileToWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - [description]\r\n     * @param {integer} tileY - [description]\r\n     * @param {Phaser.Math.Vector2} [point] - [description]\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     *\r\n     * @return {Phaser.Math.Vector2}\r\n     */\r\n    tileToWorldXY: function (tileX, tileY, point, camera)\r\n    {\r\n        return TilemapComponents.TileToWorldXY(tileX, tileY, point, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from world X coordinates (pixels) to tile X coordinates (tile units), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#worldToTileX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - [description]\r\n     * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the\r\n     * nearest integer.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     *\r\n     * @return {number}\r\n     */\r\n    worldToTileX: function (worldX, snapToFloor, camera)\r\n    {\r\n        return TilemapComponents.WorldToTileX(worldX, snapToFloor, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from world Y coordinates (pixels) to tile Y coordinates (tile units), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#worldToTileXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldY - [description]\r\n     * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the\r\n     * nearest integer.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     *\r\n     * @return {number}\r\n     */\r\n    worldToTileY: function (worldY, snapToFloor, camera)\r\n    {\r\n        return TilemapComponents.WorldToTileY(worldY, snapToFloor, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from world XY coordinates (pixels) to tile XY coordinates (tile units), factoring in the\r\n     * layers position, scale and scroll. This will return a new Vector2 object or update the given\r\n     * `point` object.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#worldToTileXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - [description]\r\n     * @param {number} worldY - [description]\r\n     * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the\r\n     * nearest integer.\r\n     * @param {Phaser.Math.Vector2} [point] - [description]\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     *\r\n     * @return {Phaser.Math.Vector2}\r\n     */\r\n    worldToTileXY: function (worldX, worldY, snapToFloor, point, camera)\r\n    {\r\n        return TilemapComponents.WorldToTileXY(worldX, worldY, snapToFloor, point, camera, this.layer);\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = StaticTilemapLayer;\r\n","map":{"mappings":[{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":607,"column":0},"generated":{"line":607,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":608,"column":0},"generated":{"line":608,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":609,"column":0},"generated":{"line":609,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":610,"column":0},"generated":{"line":610,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":611,"column":0},"generated":{"line":611,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":612,"column":0},"generated":{"line":612,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":613,"column":0},"generated":{"line":613,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":614,"column":0},"generated":{"line":614,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":615,"column":0},"generated":{"line":615,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":616,"column":0},"generated":{"line":616,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":617,"column":0},"generated":{"line":617,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":618,"column":0},"generated":{"line":618,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":619,"column":0},"generated":{"line":619,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":620,"column":0},"generated":{"line":620,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":621,"column":0},"generated":{"line":621,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":622,"column":0},"generated":{"line":622,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":623,"column":0},"generated":{"line":623,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":624,"column":0},"generated":{"line":624,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":625,"column":0},"generated":{"line":625,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":626,"column":0},"generated":{"line":626,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":627,"column":0},"generated":{"line":627,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":628,"column":0},"generated":{"line":628,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":629,"column":0},"generated":{"line":629,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":630,"column":0},"generated":{"line":630,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":631,"column":0},"generated":{"line":631,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":632,"column":0},"generated":{"line":632,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":633,"column":0},"generated":{"line":633,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":634,"column":0},"generated":{"line":634,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":635,"column":0},"generated":{"line":635,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":636,"column":0},"generated":{"line":636,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":637,"column":0},"generated":{"line":637,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":638,"column":0},"generated":{"line":638,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":639,"column":0},"generated":{"line":639,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":640,"column":0},"generated":{"line":640,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":641,"column":0},"generated":{"line":641,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":642,"column":0},"generated":{"line":642,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":643,"column":0},"generated":{"line":643,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":644,"column":0},"generated":{"line":644,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":645,"column":0},"generated":{"line":645,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":646,"column":0},"generated":{"line":646,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":647,"column":0},"generated":{"line":647,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":648,"column":0},"generated":{"line":648,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":649,"column":0},"generated":{"line":649,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":650,"column":0},"generated":{"line":650,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":651,"column":0},"generated":{"line":651,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":652,"column":0},"generated":{"line":652,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":653,"column":0},"generated":{"line":653,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":654,"column":0},"generated":{"line":654,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":655,"column":0},"generated":{"line":655,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":656,"column":0},"generated":{"line":656,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":657,"column":0},"generated":{"line":657,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":658,"column":0},"generated":{"line":658,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":659,"column":0},"generated":{"line":659,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":660,"column":0},"generated":{"line":660,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":661,"column":0},"generated":{"line":661,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":662,"column":0},"generated":{"line":662,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":663,"column":0},"generated":{"line":663,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":664,"column":0},"generated":{"line":664,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":665,"column":0},"generated":{"line":665,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":666,"column":0},"generated":{"line":666,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":667,"column":0},"generated":{"line":667,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":668,"column":0},"generated":{"line":668,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":669,"column":0},"generated":{"line":669,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":670,"column":0},"generated":{"line":670,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":671,"column":0},"generated":{"line":671,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":672,"column":0},"generated":{"line":672,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":673,"column":0},"generated":{"line":673,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":674,"column":0},"generated":{"line":674,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":675,"column":0},"generated":{"line":675,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":676,"column":0},"generated":{"line":676,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":677,"column":0},"generated":{"line":677,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":678,"column":0},"generated":{"line":678,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":679,"column":0},"generated":{"line":679,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":680,"column":0},"generated":{"line":680,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":681,"column":0},"generated":{"line":681,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":682,"column":0},"generated":{"line":682,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":683,"column":0},"generated":{"line":683,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":684,"column":0},"generated":{"line":684,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":685,"column":0},"generated":{"line":685,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":686,"column":0},"generated":{"line":686,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":687,"column":0},"generated":{"line":687,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":688,"column":0},"generated":{"line":688,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":689,"column":0},"generated":{"line":689,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":690,"column":0},"generated":{"line":690,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":691,"column":0},"generated":{"line":691,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":692,"column":0},"generated":{"line":692,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":693,"column":0},"generated":{"line":693,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":694,"column":0},"generated":{"line":694,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":695,"column":0},"generated":{"line":695,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":696,"column":0},"generated":{"line":696,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":697,"column":0},"generated":{"line":697,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":698,"column":0},"generated":{"line":698,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":699,"column":0},"generated":{"line":699,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":700,"column":0},"generated":{"line":700,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":701,"column":0},"generated":{"line":701,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":702,"column":0},"generated":{"line":702,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":703,"column":0},"generated":{"line":703,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":704,"column":0},"generated":{"line":704,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":705,"column":0},"generated":{"line":705,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":706,"column":0},"generated":{"line":706,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":707,"column":0},"generated":{"line":707,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":708,"column":0},"generated":{"line":708,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":709,"column":0},"generated":{"line":709,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":710,"column":0},"generated":{"line":710,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":711,"column":0},"generated":{"line":711,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":712,"column":0},"generated":{"line":712,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":713,"column":0},"generated":{"line":713,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":714,"column":0},"generated":{"line":714,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":715,"column":0},"generated":{"line":715,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":716,"column":0},"generated":{"line":716,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":717,"column":0},"generated":{"line":717,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":718,"column":0},"generated":{"line":718,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":719,"column":0},"generated":{"line":719,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":720,"column":0},"generated":{"line":720,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":721,"column":0},"generated":{"line":721,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":722,"column":0},"generated":{"line":722,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":723,"column":0},"generated":{"line":723,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":724,"column":0},"generated":{"line":724,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":725,"column":0},"generated":{"line":725,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":726,"column":0},"generated":{"line":726,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":727,"column":0},"generated":{"line":727,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":728,"column":0},"generated":{"line":728,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":729,"column":0},"generated":{"line":729,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":730,"column":0},"generated":{"line":730,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":731,"column":0},"generated":{"line":731,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":732,"column":0},"generated":{"line":732,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":733,"column":0},"generated":{"line":733,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":734,"column":0},"generated":{"line":734,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":735,"column":0},"generated":{"line":735,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":736,"column":0},"generated":{"line":736,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":737,"column":0},"generated":{"line":737,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":738,"column":0},"generated":{"line":738,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":739,"column":0},"generated":{"line":739,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":740,"column":0},"generated":{"line":740,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":741,"column":0},"generated":{"line":741,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":742,"column":0},"generated":{"line":742,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":743,"column":0},"generated":{"line":743,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":744,"column":0},"generated":{"line":744,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":745,"column":0},"generated":{"line":745,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":746,"column":0},"generated":{"line":746,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":747,"column":0},"generated":{"line":747,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":748,"column":0},"generated":{"line":748,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":749,"column":0},"generated":{"line":749,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":750,"column":0},"generated":{"line":750,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":751,"column":0},"generated":{"line":751,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":752,"column":0},"generated":{"line":752,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":753,"column":0},"generated":{"line":753,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":754,"column":0},"generated":{"line":754,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":755,"column":0},"generated":{"line":755,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":756,"column":0},"generated":{"line":756,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":757,"column":0},"generated":{"line":757,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":758,"column":0},"generated":{"line":758,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":759,"column":0},"generated":{"line":759,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":760,"column":0},"generated":{"line":760,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":761,"column":0},"generated":{"line":761,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":762,"column":0},"generated":{"line":762,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":763,"column":0},"generated":{"line":763,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":764,"column":0},"generated":{"line":764,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":765,"column":0},"generated":{"line":765,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":766,"column":0},"generated":{"line":766,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":767,"column":0},"generated":{"line":767,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":768,"column":0},"generated":{"line":768,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":769,"column":0},"generated":{"line":769,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":770,"column":0},"generated":{"line":770,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":771,"column":0},"generated":{"line":771,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":772,"column":0},"generated":{"line":772,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":773,"column":0},"generated":{"line":773,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":774,"column":0},"generated":{"line":774,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":775,"column":0},"generated":{"line":775,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":776,"column":0},"generated":{"line":776,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":777,"column":0},"generated":{"line":777,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":778,"column":0},"generated":{"line":778,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":779,"column":0},"generated":{"line":779,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":780,"column":0},"generated":{"line":780,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":781,"column":0},"generated":{"line":781,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":782,"column":0},"generated":{"line":782,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":783,"column":0},"generated":{"line":783,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":784,"column":0},"generated":{"line":784,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":785,"column":0},"generated":{"line":785,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":786,"column":0},"generated":{"line":786,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":787,"column":0},"generated":{"line":787,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":788,"column":0},"generated":{"line":788,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":789,"column":0},"generated":{"line":789,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":790,"column":0},"generated":{"line":790,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":791,"column":0},"generated":{"line":791,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":792,"column":0},"generated":{"line":792,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":793,"column":0},"generated":{"line":793,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":794,"column":0},"generated":{"line":794,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":795,"column":0},"generated":{"line":795,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":796,"column":0},"generated":{"line":796,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":797,"column":0},"generated":{"line":797,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":798,"column":0},"generated":{"line":798,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":799,"column":0},"generated":{"line":799,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":800,"column":0},"generated":{"line":800,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":801,"column":0},"generated":{"line":801,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":802,"column":0},"generated":{"line":802,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":803,"column":0},"generated":{"line":803,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":804,"column":0},"generated":{"line":804,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":805,"column":0},"generated":{"line":805,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":806,"column":0},"generated":{"line":806,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":807,"column":0},"generated":{"line":807,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":808,"column":0},"generated":{"line":808,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":809,"column":0},"generated":{"line":809,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":810,"column":0},"generated":{"line":810,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":811,"column":0},"generated":{"line":811,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":812,"column":0},"generated":{"line":812,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":813,"column":0},"generated":{"line":813,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":814,"column":0},"generated":{"line":814,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":815,"column":0},"generated":{"line":815,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":816,"column":0},"generated":{"line":816,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":817,"column":0},"generated":{"line":817,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":818,"column":0},"generated":{"line":818,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":819,"column":0},"generated":{"line":819,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":820,"column":0},"generated":{"line":820,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":821,"column":0},"generated":{"line":821,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":822,"column":0},"generated":{"line":822,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":823,"column":0},"generated":{"line":823,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":824,"column":0},"generated":{"line":824,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":825,"column":0},"generated":{"line":825,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":826,"column":0},"generated":{"line":826,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":827,"column":0},"generated":{"line":827,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":828,"column":0},"generated":{"line":828,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":829,"column":0},"generated":{"line":829,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":830,"column":0},"generated":{"line":830,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":831,"column":0},"generated":{"line":831,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":832,"column":0},"generated":{"line":832,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":833,"column":0},"generated":{"line":833,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":834,"column":0},"generated":{"line":834,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":835,"column":0},"generated":{"line":835,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":836,"column":0},"generated":{"line":836,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":837,"column":0},"generated":{"line":837,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":838,"column":0},"generated":{"line":838,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":839,"column":0},"generated":{"line":839,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":840,"column":0},"generated":{"line":840,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":841,"column":0},"generated":{"line":841,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":842,"column":0},"generated":{"line":842,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":843,"column":0},"generated":{"line":843,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":844,"column":0},"generated":{"line":844,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":845,"column":0},"generated":{"line":845,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":846,"column":0},"generated":{"line":846,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":847,"column":0},"generated":{"line":847,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":848,"column":0},"generated":{"line":848,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":849,"column":0},"generated":{"line":849,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":850,"column":0},"generated":{"line":850,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":851,"column":0},"generated":{"line":851,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":852,"column":0},"generated":{"line":852,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":853,"column":0},"generated":{"line":853,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":854,"column":0},"generated":{"line":854,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":855,"column":0},"generated":{"line":855,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":856,"column":0},"generated":{"line":856,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":857,"column":0},"generated":{"line":857,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":858,"column":0},"generated":{"line":858,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":859,"column":0},"generated":{"line":859,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":860,"column":0},"generated":{"line":860,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":861,"column":0},"generated":{"line":861,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":862,"column":0},"generated":{"line":862,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":863,"column":0},"generated":{"line":863,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":864,"column":0},"generated":{"line":864,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":865,"column":0},"generated":{"line":865,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":866,"column":0},"generated":{"line":866,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":867,"column":0},"generated":{"line":867,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":868,"column":0},"generated":{"line":868,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":869,"column":0},"generated":{"line":869,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":870,"column":0},"generated":{"line":870,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":871,"column":0},"generated":{"line":871,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":872,"column":0},"generated":{"line":872,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":873,"column":0},"generated":{"line":873,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":874,"column":0},"generated":{"line":874,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":875,"column":0},"generated":{"line":875,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":876,"column":0},"generated":{"line":876,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":877,"column":0},"generated":{"line":877,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":878,"column":0},"generated":{"line":878,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":879,"column":0},"generated":{"line":879,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":880,"column":0},"generated":{"line":880,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":881,"column":0},"generated":{"line":881,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":882,"column":0},"generated":{"line":882,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":883,"column":0},"generated":{"line":883,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":884,"column":0},"generated":{"line":884,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":885,"column":0},"generated":{"line":885,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":886,"column":0},"generated":{"line":886,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":887,"column":0},"generated":{"line":887,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":888,"column":0},"generated":{"line":888,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":889,"column":0},"generated":{"line":889,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":890,"column":0},"generated":{"line":890,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":891,"column":0},"generated":{"line":891,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":892,"column":0},"generated":{"line":892,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":893,"column":0},"generated":{"line":893,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":894,"column":0},"generated":{"line":894,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":895,"column":0},"generated":{"line":895,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":896,"column":0},"generated":{"line":896,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":897,"column":0},"generated":{"line":897,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":898,"column":0},"generated":{"line":898,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":899,"column":0},"generated":{"line":899,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":900,"column":0},"generated":{"line":900,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":901,"column":0},"generated":{"line":901,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":902,"column":0},"generated":{"line":902,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":903,"column":0},"generated":{"line":903,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":904,"column":0},"generated":{"line":904,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":905,"column":0},"generated":{"line":905,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":906,"column":0},"generated":{"line":906,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":907,"column":0},"generated":{"line":907,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":908,"column":0},"generated":{"line":908,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":909,"column":0},"generated":{"line":909,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":910,"column":0},"generated":{"line":910,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":911,"column":0},"generated":{"line":911,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":912,"column":0},"generated":{"line":912,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":913,"column":0},"generated":{"line":913,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":914,"column":0},"generated":{"line":914,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":915,"column":0},"generated":{"line":915,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":916,"column":0},"generated":{"line":916,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":917,"column":0},"generated":{"line":917,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":918,"column":0},"generated":{"line":918,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":919,"column":0},"generated":{"line":919,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":920,"column":0},"generated":{"line":920,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":921,"column":0},"generated":{"line":921,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":922,"column":0},"generated":{"line":922,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":923,"column":0},"generated":{"line":923,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":924,"column":0},"generated":{"line":924,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":925,"column":0},"generated":{"line":925,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":926,"column":0},"generated":{"line":926,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":927,"column":0},"generated":{"line":927,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":928,"column":0},"generated":{"line":928,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":929,"column":0},"generated":{"line":929,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":930,"column":0},"generated":{"line":930,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":931,"column":0},"generated":{"line":931,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":932,"column":0},"generated":{"line":932,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":933,"column":0},"generated":{"line":933,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":934,"column":0},"generated":{"line":934,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":935,"column":0},"generated":{"line":935,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":936,"column":0},"generated":{"line":936,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":937,"column":0},"generated":{"line":937,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":938,"column":0},"generated":{"line":938,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":939,"column":0},"generated":{"line":939,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":940,"column":0},"generated":{"line":940,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":941,"column":0},"generated":{"line":941,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":942,"column":0},"generated":{"line":942,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":943,"column":0},"generated":{"line":943,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":944,"column":0},"generated":{"line":944,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":945,"column":0},"generated":{"line":945,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":946,"column":0},"generated":{"line":946,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":947,"column":0},"generated":{"line":947,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":948,"column":0},"generated":{"line":948,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":949,"column":0},"generated":{"line":949,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":950,"column":0},"generated":{"line":950,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":951,"column":0},"generated":{"line":951,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":952,"column":0},"generated":{"line":952,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":953,"column":0},"generated":{"line":953,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":954,"column":0},"generated":{"line":954,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":955,"column":0},"generated":{"line":955,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":956,"column":0},"generated":{"line":956,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":957,"column":0},"generated":{"line":957,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":958,"column":0},"generated":{"line":958,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":959,"column":0},"generated":{"line":959,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":960,"column":0},"generated":{"line":960,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":961,"column":0},"generated":{"line":961,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":962,"column":0},"generated":{"line":962,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":963,"column":0},"generated":{"line":963,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":964,"column":0},"generated":{"line":964,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":965,"column":0},"generated":{"line":965,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":966,"column":0},"generated":{"line":966,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":967,"column":0},"generated":{"line":967,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":968,"column":0},"generated":{"line":968,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":969,"column":0},"generated":{"line":969,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":970,"column":0},"generated":{"line":970,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":971,"column":0},"generated":{"line":971,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":972,"column":0},"generated":{"line":972,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":973,"column":0},"generated":{"line":973,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":974,"column":0},"generated":{"line":974,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":975,"column":0},"generated":{"line":975,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":976,"column":0},"generated":{"line":976,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":977,"column":0},"generated":{"line":977,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":978,"column":0},"generated":{"line":978,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":979,"column":0},"generated":{"line":979,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":980,"column":0},"generated":{"line":980,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":981,"column":0},"generated":{"line":981,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":982,"column":0},"generated":{"line":982,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":983,"column":0},"generated":{"line":983,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":984,"column":0},"generated":{"line":984,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":985,"column":0},"generated":{"line":985,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":986,"column":0},"generated":{"line":986,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":987,"column":0},"generated":{"line":987,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":988,"column":0},"generated":{"line":988,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":989,"column":0},"generated":{"line":989,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":990,"column":0},"generated":{"line":990,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":991,"column":0},"generated":{"line":991,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":992,"column":0},"generated":{"line":992,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":993,"column":0},"generated":{"line":993,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":994,"column":0},"generated":{"line":994,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":995,"column":0},"generated":{"line":995,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":996,"column":0},"generated":{"line":996,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":997,"column":0},"generated":{"line":997,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":998,"column":0},"generated":{"line":998,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":999,"column":0},"generated":{"line":999,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":1000,"column":0},"generated":{"line":1000,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":1001,"column":0},"generated":{"line":1001,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":1002,"column":0},"generated":{"line":1002,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":1003,"column":0},"generated":{"line":1003,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":1004,"column":0},"generated":{"line":1004,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":1005,"column":0},"generated":{"line":1005,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":1006,"column":0},"generated":{"line":1006,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":1007,"column":0},"generated":{"line":1007,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":1008,"column":0},"generated":{"line":1008,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":1009,"column":0},"generated":{"line":1009,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":1010,"column":0},"generated":{"line":1010,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":1011,"column":0},"generated":{"line":1011,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":1012,"column":0},"generated":{"line":1012,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":1013,"column":0},"generated":{"line":1013,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":1014,"column":0},"generated":{"line":1014,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":1015,"column":0},"generated":{"line":1015,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":1016,"column":0},"generated":{"line":1016,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":1017,"column":0},"generated":{"line":1017,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":1018,"column":0},"generated":{"line":1018,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":1019,"column":0},"generated":{"line":1019,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":1020,"column":0},"generated":{"line":1020,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":1021,"column":0},"generated":{"line":1021,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":1022,"column":0},"generated":{"line":1022,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":1023,"column":0},"generated":{"line":1023,"column":0}},{"source":"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js","original":{"line":1024,"column":0},"generated":{"line":1024,"column":0}}],"sources":{"node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayer.js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Components = require('../../gameobjects/components');\r\nvar CONST = require('../../const');\r\nvar GameObject = require('../../gameobjects/GameObject');\r\nvar StaticTilemapLayerRender = require('./StaticTilemapLayerRender');\r\nvar TilemapComponents = require('../components');\r\nvar Utils = require('../../renderer/webgl/Utils');\r\n\r\n/**\r\n * @classdesc\r\n * A StaticTilemapLayer is a game object that renders LayerData from a Tilemap. A\r\n * StaticTilemapLayer can only render tiles from a single tileset.\r\n *\r\n * A StaticTilemapLayer is optimized for speed over flexibility. You cannot apply per-tile\r\n * effects like tint or alpha. You cannot change the tiles in a StaticTilemapLayer. Use this\r\n * over a DynamicTilemapLayer when you don't need either of those features.\r\n *\r\n * @class StaticTilemapLayer\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberOf Phaser.Tilemaps\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.Alpha\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.Flip\r\n * @extends Phaser.GameObjects.Components.GetBounds\r\n * @extends Phaser.GameObjects.Components.Origin\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.ScaleMode\r\n * @extends Phaser.GameObjects.Components.Size\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n *\r\n * @param {Phaser.Scene} scene - [description]\r\n * @param {Phaser.Tilemaps.Tilemap} tilemap - The Tilemap this layer is a part of.\r\n * @param {integer} layerIndex - The index of the LayerData associated with this layer.\r\n * @param {Phaser.Tilemaps.Tileset} tileset - The tileset used to render the tiles in this layer.\r\n * @param {number} [x=0] - The world x position where the top left of this layer will be placed.\r\n * @param {number} [y=0] - The world y position where the top left of this layer will be placed.\r\n */\r\nvar StaticTilemapLayer = new Class({\r\n\r\n    Extends: GameObject,\r\n\r\n    Mixins: [\r\n        Components.Alpha,\r\n        Components.BlendMode,\r\n        Components.Depth,\r\n        Components.Flip,\r\n        Components.GetBounds,\r\n        Components.Origin,\r\n        Components.Pipeline,\r\n        Components.ScaleMode,\r\n        Components.Size,\r\n        Components.Transform,\r\n        Components.Visible,\r\n        Components.ScrollFactor,\r\n        StaticTilemapLayerRender\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function StaticTilemapLayer (scene, tilemap, layerIndex, tileset, x, y)\r\n    {\r\n        GameObject.call(this, scene, 'StaticTilemapLayer');\r\n\r\n        /**\r\n         * Used internally by physics system to perform fast type checks.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#isTilemap\r\n         * @type {boolean}\r\n         * @readOnly\r\n         * @since 3.0.0\r\n         */\r\n        this.isTilemap = true;\r\n\r\n        /**\r\n         * The Tilemap that this layer is a part of.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#tilemap\r\n         * @type {Phaser.Tilemaps.Tilemap}\r\n         * @since 3.0.0\r\n         */\r\n        this.tilemap = tilemap;\r\n\r\n        /**\r\n         * The index of the LayerData associated with this layer.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#layerIndex\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.layerIndex = layerIndex;\r\n\r\n        /**\r\n         * The LayerData associated with this layer. LayerData can only be associated with one\r\n         * tilemap layer.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#layer\r\n         * @type {Phaser.Tilemaps.LayerData}\r\n         * @since 3.0.0\r\n         */\r\n        this.layer = tilemap.layers[layerIndex];\r\n\r\n        this.layer.tilemapLayer = this; // Link the LayerData with this static tilemap layer\r\n\r\n        /**\r\n         * The Tileset associated with this layer. A tilemap layer can only render from one Tileset.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#tileset\r\n         * @type {Phaser.Tilemaps.Tileset}\r\n         * @since 3.0.0\r\n         */\r\n        this.tileset = tileset;\r\n\r\n        /**\r\n         * Used internally with the canvas render. This holds the tiles that are visible within the\r\n         * camera.\r\n         *\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#culledTiles\r\n         * @type {array}\r\n         * @since 3.0.0\r\n         */\r\n        this.culledTiles = [];\r\n\r\n        /**\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#vertexBuffer\r\n         * @type {array}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.vertexBuffer = null;\r\n\r\n        /**\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#renderer\r\n         * @type {(Phaser.Renderer.CanvasRenderer|Phaser.Renderer.WebGLRenderer)}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.renderer = scene.sys.game.renderer;\r\n\r\n        /**\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#bufferData\r\n         * @type {ArrayBuffer}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.bufferData = null;\r\n\r\n        /**\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#vertexViewF32\r\n         * @type {Float32Array}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.vertexViewF32 = null;\r\n\r\n        /**\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#vertexViewU32\r\n         * @type {Uint32Array}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.vertexViewU32 = null;\r\n\r\n        /**\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#dirty\r\n         * @type {boolean}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.dirty = true;\r\n\r\n        /**\r\n         * @name Phaser.Tilemaps.StaticTilemapLayer#vertexCount\r\n         * @type {integer}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.vertexCount = 0;\r\n\r\n        this.setAlpha(this.layer.alpha);\r\n        this.setPosition(x, y);\r\n        this.setOrigin();\r\n        this.setSize(this.layer.tileWidth * this.layer.width, this.layer.tileHeight * this.layer.height);\r\n\r\n        this.initPipeline('TextureTintPipeline');\r\n\r\n        if (scene.sys.game.config.renderType === CONST.WEBGL)\r\n        {\r\n            scene.sys.game.renderer.onContextRestored(function ()\r\n            {\r\n                this.dirty = true;\r\n                this.vertexBuffer = null;\r\n            }, this);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Upload the tile data to a VBO.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#upload\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera to render to.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    upload: function (camera)\r\n    {\r\n        var tileset = this.tileset;\r\n        var mapWidth = this.layer.width;\r\n        var mapHeight = this.layer.height;\r\n        var width = tileset.image.get().width;\r\n        var height = tileset.image.get().height;\r\n        var mapData = this.layer.data;\r\n        var renderer = this.renderer;\r\n        var tile;\r\n        var row;\r\n        var col;\r\n        var texCoords;\r\n\r\n        if (renderer.gl)\r\n        {\r\n            var pipeline = renderer.pipelines.TextureTintPipeline;\r\n\r\n            if (this.dirty)\r\n            {\r\n                var gl = renderer.gl;\r\n                var vertexBuffer = this.vertexBuffer;\r\n                var bufferData = this.bufferData;\r\n                var voffset = 0;\r\n                var vertexCount = 0;\r\n                var bufferSize = (mapWidth * mapHeight) * pipeline.vertexSize * 6;\r\n\r\n                if (bufferData === null)\r\n                {\r\n                    bufferData = new ArrayBuffer(bufferSize);\r\n                    this.bufferData = bufferData;\r\n                    this.vertexViewF32 = new Float32Array(bufferData);\r\n                    this.vertexViewU32 = new Uint32Array(bufferData);\r\n                }\r\n\r\n                var vertexViewF32 = this.vertexViewF32;\r\n                var vertexViewU32 = this.vertexViewU32;\r\n\r\n                for (row = 0; row < mapHeight; ++row)\r\n                {\r\n                    for (col = 0; col < mapWidth; ++col)\r\n                    {\r\n                        tile = mapData[row][col];\r\n                        if (tile === null || tile.index === -1) { continue; }\r\n\r\n                        var tx = tile.pixelX;\r\n                        var ty = tile.pixelY;\r\n                        var txw = tx + tile.width;\r\n                        var tyh = ty + tile.height;\r\n\r\n                        texCoords = tileset.getTileTextureCoordinates(tile.index);\r\n                        if (texCoords === null) { continue; }\r\n\r\n                        var u0 = texCoords.x / width;\r\n                        var v0 = texCoords.y / height;\r\n                        var u1 = (texCoords.x + tile.width) / width;\r\n                        var v1 = (texCoords.y + tile.height) / height;\r\n\r\n                        var tx0 = tx;\r\n                        var ty0 = ty;\r\n                        var tx1 = tx;\r\n                        var ty1 = tyh;\r\n                        var tx2 = txw;\r\n                        var ty2 = tyh;\r\n                        var tx3 = txw;\r\n                        var ty3 = ty;\r\n                        var tint = Utils.getTintAppendFloatAlpha(0xffffff, this.alpha * tile.alpha);\r\n\r\n                        vertexViewF32[voffset + 0] = tx0;\r\n                        vertexViewF32[voffset + 1] = ty0;\r\n                        vertexViewF32[voffset + 2] = u0;\r\n                        vertexViewF32[voffset + 3] = v0;\r\n                        vertexViewU32[voffset + 4] = tint;\r\n                        vertexViewF32[voffset + 5] = tx1;\r\n                        vertexViewF32[voffset + 6] = ty1;\r\n                        vertexViewF32[voffset + 7] = u0;\r\n                        vertexViewF32[voffset + 8] = v1;\r\n                        vertexViewU32[voffset + 9] = tint;\r\n                        vertexViewF32[voffset + 10] = tx2;\r\n                        vertexViewF32[voffset + 11] = ty2;\r\n                        vertexViewF32[voffset + 12] = u1;\r\n                        vertexViewF32[voffset + 13] = v1;\r\n                        vertexViewU32[voffset + 14] = tint;\r\n                        vertexViewF32[voffset + 15] = tx0;\r\n                        vertexViewF32[voffset + 16] = ty0;\r\n                        vertexViewF32[voffset + 17] = u0;\r\n                        vertexViewF32[voffset + 18] = v0;\r\n                        vertexViewU32[voffset + 19] = tint;\r\n                        vertexViewF32[voffset + 20] = tx2;\r\n                        vertexViewF32[voffset + 21] = ty2;\r\n                        vertexViewF32[voffset + 22] = u1;\r\n                        vertexViewF32[voffset + 23] = v1;\r\n                        vertexViewU32[voffset + 24] = tint;\r\n                        vertexViewF32[voffset + 25] = tx3;\r\n                        vertexViewF32[voffset + 26] = ty3;\r\n                        vertexViewF32[voffset + 27] = u1;\r\n                        vertexViewF32[voffset + 28] = v0;\r\n                        vertexViewU32[voffset + 29] = tint;\r\n\r\n                        voffset += 30;\r\n                        vertexCount += 6;\r\n                    }\r\n                }\r\n\r\n                this.vertexCount = vertexCount;\r\n                this.dirty = false;\r\n                if (vertexBuffer === null)\r\n                {\r\n                    vertexBuffer = renderer.createVertexBuffer(bufferData, gl.STATIC_DRAW);\r\n                    this.vertexBuffer = vertexBuffer;\r\n                }\r\n                else\r\n                {\r\n                    renderer.setVertexBuffer(vertexBuffer);\r\n                    gl.bufferSubData(gl.ARRAY_BUFFER, 0, bufferData);\r\n                }\r\n            }\r\n\r\n            pipeline.modelIdentity();\r\n            pipeline.modelTranslate(this.x - (camera.scrollX * this.scrollFactorX), this.y - (camera.scrollY * this.scrollFactorY), 0.0);\r\n            pipeline.modelScale(this.scaleX, this.scaleY, 1.0);\r\n            pipeline.viewLoad2D(camera.matrix.matrix);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculates interesting faces at the given tile coordinates of the specified layer. Interesting\r\n     * faces are used internally for optimizing collisions against tiles. This method is mostly used\r\n     * internally to optimize recalculating faces when only one tile has been changed.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#calculateFacesAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - The x coordinate.\r\n     * @param {integer} tileY - The y coordinate.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    calculateFacesAt: function (tileX, tileY)\r\n    {\r\n        TilemapComponents.CalculateFacesAt(tileX, tileY, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculates interesting faces within the rectangular area specified (in tile coordinates) of the\r\n     * layer. Interesting faces are used internally for optimizing collisions against tiles. This method\r\n     * is mostly used internally.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#calculateFacesWithin\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    calculateFacesWithin: function (tileX, tileY, width, height)\r\n    {\r\n        TilemapComponents.CalculateFacesWithin(tileX, tileY, width, height, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Creates a Sprite for every object matching the given tile indexes in the layer. You can\r\n     * optionally specify if each tile will be replaced with a new tile after the Sprite has been\r\n     * created. This is useful if you want to lay down special tiles in a level that are converted to\r\n     * Sprites, but want to replace the tile itself with a floor tile or similar once converted.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#createFromTiles\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|array)} indexes - The tile index, or array of indexes, to create Sprites from.\r\n     * @param {(integer|array)} replacements - The tile index, or array of indexes, to change a converted\r\n     * tile to. Set to `null` to leave the tiles unchanged. If an array is given, it is assumed to be a\r\n     * one-to-one mapping with the indexes array.\r\n     * @param {object} spriteConfig - The config object to pass into the Sprite creator (i.e.\r\n     * scene.make.sprite).\r\n     * @param {Phaser.Scene} [scene=scene the map is within] - The Scene to create the Sprites within.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when determining the world XY\r\n     *\r\n     * @return {Phaser.GameObjects.Sprite[]} An array of the Sprites that were created.\r\n     */\r\n    createFromTiles: function (indexes, replacements, spriteConfig, scene, camera)\r\n    {\r\n        return TilemapComponents.CreateFromTiles(indexes, replacements, spriteConfig, scene, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Returns the tiles in the given layer that are within the cameras viewport.\r\n     * This is used internally.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#cull\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera] - The Camera to run the cull check against.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    cull: function (camera)\r\n    {\r\n        return TilemapComponents.CullTiles(this.layer, camera, this.culledTiles);\r\n    },\r\n\r\n    /**\r\n     * Destroys this StaticTilemapLayer and removes its link to the associated LayerData.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        // Uninstall this layer only if it is still installed on the LayerData object\r\n        if (this.layer.tilemapLayer === this)\r\n        {\r\n            this.layer.tilemapLayer = undefined;\r\n        }\r\n\r\n        this.tilemap = undefined;\r\n        this.layer = undefined;\r\n        this.tileset = undefined;\r\n\r\n        GameObject.prototype.destroy.call(this);\r\n    },\r\n\r\n    /**\r\n     * Searches the entire map layer for the first tile matching the given index, then returns that Tile\r\n     * object. If no match is found, it returns null. The search starts from the top-left tile and\r\n     * continues horizontally until it hits the end of the row, then it drops down to the next column.\r\n     * If the reverse boolean is true, it scans starting from the bottom-right corner traveling up to\r\n     * the top-left.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#findByIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} index - The tile index value to search for.\r\n     * @param {integer} [skip=0] - The number of times to skip a matching tile before returning.\r\n     * @param {boolean} [reverse=false] - If true it will scan the layer in reverse, starting at the\r\n     * bottom-right. Otherwise it scans from the top-left.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n     */\r\n    findByIndex: function (findIndex, skip, reverse)\r\n    {\r\n        return TilemapComponents.FindByIndex(findIndex, skip, reverse, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Find the first tile in the given rectangular area (in tile coordinates) of the layer that\r\n     * satisfies the provided testing function. I.e. finds the first tile for which `callback` returns\r\n     * true. Similar to Array.prototype.find in vanilla JS.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#findTile\r\n     * @since 3.0.0\r\n     *\r\n     * @param {function} callback - The callback. Each tile in the given area will be passed to this\r\n     * callback as the first and only parameter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have\r\n     * -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide\r\n     * on at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that\r\n     * have at least one interesting face.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile}\r\n     */\r\n    findTile: function (callback, context, tileX, tileY, width, height, filteringOptions)\r\n    {\r\n        return TilemapComponents.FindTile(callback, context, tileX, tileY, width, height, filteringOptions, this.layer);\r\n    },\r\n\r\n    /**\r\n     * For each tile in the given rectangular area (in tile coordinates) of the layer, run the given\r\n     * filter callback function. Any tiles that pass the filter test (i.e. where the callback returns\r\n     * true) will returned as a new array. Similar to Array.prototype.Filter in vanilla JS.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#filterTiles\r\n     * @since 3.0.0\r\n     *\r\n     * @param {function} callback - The callback. Each tile in the given area will be passed to this\r\n     * callback as the first and only parameter. The callback should return true for tiles that pass the\r\n     * filter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have\r\n     * -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide\r\n     * on at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that\r\n     * have at least one interesting face.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    filterTiles: function (callback, context, tileX, tileY, width, height, filteringOptions)\r\n    {\r\n        return TilemapComponents.FilterTiles(callback, context, tileX, tileY, width, height, filteringOptions, this.layer);\r\n    },\r\n\r\n    /**\r\n     * For each tile in the given rectangular area (in tile coordinates) of the layer, run the given\r\n     * callback. Similar to Array.prototype.forEach in vanilla JS.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#forEachTile\r\n     * @since 3.0.0\r\n     *\r\n     * @param {function} callback - The callback. Each tile in the given area will be passed to this\r\n     * callback as the first and only parameter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have\r\n     * -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide\r\n     * on at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that\r\n     * have at least one interesting face.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    forEachTile: function (callback, context, tileX, tileY, width, height, filteringOptions)\r\n    {\r\n        TilemapComponents.ForEachTile(callback, context, tileX, tileY, width, height, filteringOptions, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Gets a tile at the given tile coordinates from the given layer.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#getTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - X position to get the tile from (given in tile units, not pixels).\r\n     * @param {integer} tileY - Y position to get the tile from (given in tile units, not pixels).\r\n     * @param {boolean} [nonNull=false] - If true getTile won't return null for empty tiles, but a Tile\r\n     * object with an index of -1.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} The tile at the given coordinates or null if no tile was found or the coordinates were invalid.\r\n     */\r\n    getTileAt: function (tileX, tileY, nonNull)\r\n    {\r\n        return TilemapComponents.GetTileAt(tileX, tileY, nonNull, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Gets a tile at the given world coordinates from the given layer.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#getTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - X position to get the tile from (given in pixels)\r\n     * @param {number} worldY - Y position to get the tile from (given in pixels)\r\n     * @param {boolean} [nonNull=false] - If true, function won't return null for empty tiles, but a Tile\r\n     * object with an index of -1.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} The tile at the given coordinates or null if no tile was found or the coordinates\r\n     * were invalid.\r\n     */\r\n    getTileAtWorldXY: function (worldX, worldY, nonNull, camera)\r\n    {\r\n        return TilemapComponents.GetTileAtWorldXY(worldX, worldY, nonNull, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Gets the tiles in the given rectangular area (in tile coordinates) of the layer.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#getTilesWithin\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have\r\n     * -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on\r\n     * at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that\r\n     * have at least one interesting face.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    getTilesWithin: function (tileX, tileY, width, height, filteringOptions)\r\n    {\r\n        return TilemapComponents.GetTilesWithin(tileX, tileY, width, height, filteringOptions, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Gets the tiles in the given rectangular area (in world coordinates) of the layer.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#getTilesWithinWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - [description]\r\n     * @param {number} worldY - [description]\r\n     * @param {number} width - [description]\r\n     * @param {number} height - [description]\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have\r\n     * -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on\r\n     * at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that\r\n     * have at least one interesting face.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    getTilesWithinWorldXY: function (worldX, worldY, width, height, filteringOptions, camera)\r\n    {\r\n        return TilemapComponents.GetTilesWithinWorldXY(worldX, worldY, width, height, filteringOptions, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Gets the tiles that overlap with the given shape in the given layer. The shape must be a Circle,\r\n     * Line, Rectangle or Triangle. The shape should be in world coordinates.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#getTilesWithinShape\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Geom.Circle|Phaser.Geom.Line|Phaser.Geom.Rectangle|Phaser.Geom.Triangle)} shape - A shape in world (pixel) coordinates\r\n     * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have\r\n     * -1 for an index.\r\n     * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on\r\n     * at least one side.\r\n     * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that\r\n     * have at least one interesting face.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    getTilesWithinShape: function (shape, filteringOptions, camera)\r\n    {\r\n        return TilemapComponents.GetTilesWithinShape(shape, filteringOptions, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Checks if there is a tile at the given location (in tile coordinates) in the given layer. Returns\r\n     * false if there is no tile or if the tile at that location has an index of -1.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#hasTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - [description]\r\n     * @param {integer} tileY - [description]\r\n     *\r\n     * @return {boolean}\r\n     */\r\n    hasTileAt: function (tileX, tileY)\r\n    {\r\n        return TilemapComponents.HasTileAt(tileX, tileY, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Checks if there is a tile at the given location (in world coordinates) in the given layer. Returns\r\n     * false if there is no tile or if the tile at that location has an index of -1.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#hasTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - [description]\r\n     * @param {number} worldY - [description]\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     *\r\n     * @return {boolean}\r\n     */\r\n    hasTileAtWorldXY: function (worldX, worldY, camera)\r\n    {\r\n        return TilemapComponents.HasTileAtWorldXY(worldX, worldY, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Draws a debug representation of the layer to the given Graphics. This is helpful when you want to\r\n     * get a quick idea of which of your tiles are colliding and which have interesting faces. The tiles\r\n     * are drawn starting at (0, 0) in the Graphics, allowing you to place the debug representation\r\n     * wherever you want on the screen.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#renderDebug\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Graphics} graphics - The target Graphics object to draw upon.\r\n     * @param {object} styleConfig - An object specifying the colors to use for the debug drawing.\r\n     * @param {?Color} [styleConfig.tileColor=blue] - Color to use for drawing a filled rectangle at\r\n     * non-colliding tile locations. If set to null, non-colliding tiles will not be drawn.\r\n     * @param {?Color} [styleConfig.collidingTileColor=orange] - Color to use for drawing a filled\r\n     * rectangle at colliding tile locations. If set to null, colliding tiles will not be drawn.\r\n     * @param {?Color} [styleConfig.faceColor=grey] - Color to use for drawing a line at interesting\r\n     * tile faces. If set to null, interesting tile faces will not be drawn.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    renderDebug: function (graphics, styleConfig)\r\n    {\r\n        TilemapComponents.RenderDebug(graphics, styleConfig, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on the given tile or tiles within a layer by index. You can pass in either a\r\n     * single numeric index or an array of indexes: [2, 3, 15, 20]. The `collides` parameter controls if\r\n     * collision will be enabled (true) or disabled (false).\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#setCollision\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|array)} indexes - Either a single tile index, or an array of tile indexes.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollision: function (indexes, collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollision(indexes, collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on a range of tiles in a layer whose index is between the specified `start` and\r\n     * `stop` (inclusive). Calling this with a start value of 10 and a stop value of 14 would set\r\n     * collision for tiles 10, 11, 12, 13 and 14. The `collides` parameter controls if collision will be\r\n     * enabled (true) or disabled (false).\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#setCollisionBetween\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} start - The first index of the tile to be set for collision.\r\n     * @param {integer} stop - The last index of the tile to be set for collision.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollisionBetween: function (start, stop, collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollisionBetween(start, stop, collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on the tiles within a layer by checking tile properties. If a tile has a property\r\n     * that matches the given properties object, its collision flag will be set. The `collides`\r\n     * parameter controls if collision will be enabled (true) or disabled (false). Passing in\r\n     * `{ collides: true }` would update the collision flag on any tiles with a \"collides\" property that\r\n     * has a value of true. Any tile that doesn't have \"collides\" set to true will be ignored. You can\r\n     * also use an array of values, e.g. `{ types: [\"stone\", \"lava\", \"sand\" ] }`. If a tile has a\r\n     * \"types\" property that matches any of those values, its collision flag will be updated.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#setCollisionByProperty\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} properties - An object with tile properties and corresponding values that should\r\n     * be checked.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollisionByProperty: function (properties, collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollisionByProperty(properties, collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on all tiles in the given layer, except for tiles that have an index specified in\r\n     * the given array. The `collides` parameter controls if collision will be enabled (true) or\r\n     * disabled (false).\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#setCollisionByExclusion\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer[]} indexes - An array of the tile indexes to not be counted for collision.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollisionByExclusion: function (indexes, collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollisionByExclusion(indexes, collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets a global collision callback for the given tile index within the layer. This will affect all\r\n     * tiles on this layer that have the same index. If a callback is already set for the tile index it\r\n     * will be replaced. Set the callback to null to remove it. If you want to set a callback for a tile\r\n     * at a specific location on the map then see setTileLocationCallback.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#setTileIndexCallback\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|array)} indexes - Either a single tile index, or an array of tile indexes to have a\r\n     * collision callback set for.\r\n     * @param {function} callback - The callback that will be invoked when the tile is collided with.\r\n     * @param {object} callbackContext - The context under which the callback is called.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setTileIndexCallback: function (indexes, callback, callbackContext)\r\n    {\r\n        TilemapComponents.SetTileIndexCallback(indexes, callback, callbackContext, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on the tiles within a layer by checking each tiles collision group data\r\n     * (typically defined in Tiled within the tileset collision editor). If any objects are found within\r\n     * a tiles collision group, the tile's colliding information will be set. The `collides` parameter\r\n     * controls if collision will be enabled (true) or disabled (false).\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#setCollisionFromCollisionGroup\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear\r\n     * collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the\r\n     * update.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollisionFromCollisionGroup: function (collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollisionFromCollisionGroup(collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets a collision callback for the given rectangular area (in tile coordinates) within the layer.\r\n     * If a callback is already set for the tile index it will be replaced. Set the callback to null to\r\n     * remove it.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#setTileLocationCallback\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - [description]\r\n     * @param {integer} [tileY=0] - [description]\r\n     * @param {integer} [width=max width based on tileX] - [description]\r\n     * @param {integer} [height=max height based on tileY] - [description]\r\n     * @param {function} callback - The callback that will be invoked when the tile is collided with.\r\n     * @param {object} callbackContext - The context under which the callback is called.\r\n     *\r\n     * @return {Phaser.Tilemaps.StaticTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setTileLocationCallback: function (tileX, tileY, width, height, callback, callbackContext)\r\n    {\r\n        TilemapComponents.SetTileLocationCallback(tileX, tileY, width, height, callback, callbackContext, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Converts from tile X coordinates (tile units) to world X coordinates (pixels), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#tileToWorldX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - [description]\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     *\r\n     * @return {number}\r\n     */\r\n    tileToWorldX: function (tileX, camera)\r\n    {\r\n        return TilemapComponents.TileToWorldX(tileX, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from tile Y coordinates (tile units) to world Y coordinates (pixels), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#tileToWorldY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileY - [description]\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     *\r\n     * @return {number}\r\n     */\r\n    tileToWorldY: function (tileY, camera)\r\n    {\r\n        return TilemapComponents.TileToWorldY(tileY, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from tile XY coordinates (tile units) to world XY coordinates (pixels), factoring in the\r\n     * layers position, scale and scroll. This will return a new Vector2 object or update the given\r\n     * `point` object.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#tileToWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - [description]\r\n     * @param {integer} tileY - [description]\r\n     * @param {Phaser.Math.Vector2} [point] - [description]\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     *\r\n     * @return {Phaser.Math.Vector2}\r\n     */\r\n    tileToWorldXY: function (tileX, tileY, point, camera)\r\n    {\r\n        return TilemapComponents.TileToWorldXY(tileX, tileY, point, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from world X coordinates (pixels) to tile X coordinates (tile units), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#worldToTileX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - [description]\r\n     * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the\r\n     * nearest integer.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     *\r\n     * @return {number}\r\n     */\r\n    worldToTileX: function (worldX, snapToFloor, camera)\r\n    {\r\n        return TilemapComponents.WorldToTileX(worldX, snapToFloor, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from world Y coordinates (pixels) to tile Y coordinates (tile units), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#worldToTileXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldY - [description]\r\n     * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the\r\n     * nearest integer.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     *\r\n     * @return {number}\r\n     */\r\n    worldToTileY: function (worldY, snapToFloor, camera)\r\n    {\r\n        return TilemapComponents.WorldToTileY(worldY, snapToFloor, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from world XY coordinates (pixels) to tile XY coordinates (tile units), factoring in the\r\n     * layers position, scale and scroll. This will return a new Vector2 object or update the given\r\n     * `point` object.\r\n     *\r\n     * @method Phaser.Tilemaps.StaticTilemapLayer#worldToTileXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - [description]\r\n     * @param {number} worldY - [description]\r\n     * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the\r\n     * nearest integer.\r\n     * @param {Phaser.Math.Vector2} [point] - [description]\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - [description]\r\n     *\r\n     * @return {Phaser.Math.Vector2}\r\n     */\r\n    worldToTileXY: function (worldX, worldY, snapToFloor, point, camera)\r\n    {\r\n        return TilemapComponents.WorldToTileXY(worldX, worldY, snapToFloor, point, camera, this.layer);\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = StaticTilemapLayer;\r\n"},"lineCount":1024}},"hash":"1a9a8c4e94604728279e30ff04f11346","cacheData":{"env":{}}}