{"dependencies":[{"name":"/home/mishig/Desktop/vizgithub/frontend/package.json","includedInParent":true,"mtime":1523230167415},{"name":"/home/mishig/Desktop/vizgithub/frontend/node_modules/@tensorflow/tfjs-core/package.json","includedInParent":true,"mtime":0},{"name":"../doc","loc":{"line":9,"column":20}},{"name":"../environment","loc":{"line":10,"column":28}},{"name":"../util","loc":{"line":11,"column":19}},{"name":"./broadcast_util","loc":{"line":12,"column":29}},{"name":"./operation","loc":{"line":13,"column":26}},{"name":"./ops","loc":{"line":14,"column":20}}],"generated":{"js":"\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = require(\"../doc\");\nvar environment_1 = require(\"../environment\");\nvar util = require(\"../util\");\nvar broadcast_util = require(\"./broadcast_util\");\nvar operation_1 = require(\"./operation\");\nvar ops_1 = require(\"./ops\");\nvar BinaryOps = (function () {\n    function BinaryOps() {\n    }\n    BinaryOps.add = function (a, b) {\n        util.assertTypesMatch(a, b);\n        var outShape = broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        var der = function (dy) {\n            var derA = function () {\n                var res = dy;\n                var reduceAxes = broadcast_util.getReductionAxes(a.shape, outShape);\n                if (reduceAxes.length > 0) {\n                    res = res.sum(reduceAxes);\n                }\n                return res.reshape(a.shape);\n            };\n            var derB = function () {\n                var res = dy;\n                var reduceAxes = broadcast_util.getReductionAxes(b.shape, outShape);\n                if (reduceAxes.length > 0) {\n                    res = res.sum(reduceAxes);\n                }\n                return res.reshape(b.shape);\n            };\n            return { a: derA, b: derB };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.add(a, b); }, { a: a, b: b }, der);\n    };\n    BinaryOps.addStrict = function (a, b) {\n        util.assertShapesMatch(a.shape, b.shape, 'Error in addStrict: ');\n        return a.add(b);\n    };\n    BinaryOps.sub = function (a, b) {\n        util.assertTypesMatch(a, b);\n        var outShape = broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        var der = function (dy) {\n            var derA = function () {\n                var res = dy;\n                var reduceAxes = broadcast_util.getReductionAxes(a.shape, outShape);\n                if (reduceAxes.length > 0) {\n                    res = res.sum(reduceAxes);\n                }\n                return res.reshape(a.shape);\n            };\n            var derB = function () {\n                var res = dy;\n                var reduceAxes = broadcast_util.getReductionAxes(b.shape, outShape);\n                if (reduceAxes.length > 0) {\n                    res = res.sum(reduceAxes);\n                }\n                return res.neg().reshape(b.shape);\n            };\n            return { a: derA, b: derB };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.subtract(a, b); }, { a: a, b: b }, der);\n    };\n    BinaryOps.subStrict = function (a, b) {\n        util.assertShapesMatch(a.shape, b.shape, 'Error in subStrict: ');\n        return a.sub(b);\n    };\n    BinaryOps.pow = function (base, exp) {\n        broadcast_util.assertAndGetBroadcastShape(base.shape, exp.shape);\n        var grad = function (dy) {\n            if (!util.arraysEqual(base.shape, exp.shape) &&\n                !util.isScalarShape(exp.shape)) {\n                throw new Error(\"Gradient of pow not yet supported for broadcasted shapes.\");\n            }\n            var derBase = function () {\n                var expFloat = exp.toFloat();\n                var dx = expFloat.mul(base.toFloat().pow(expFloat.sub(ops_1.scalar(1))));\n                return dy.mulStrict(dx);\n            };\n            return { base: derBase };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.pow(base, exp); }, { base: base }, grad);\n    };\n    BinaryOps.powStrict = function (base, exp) {\n        util.assertShapesMatch(base.shape, exp.shape, 'Error in powStrict: ');\n        return base.pow(exp);\n    };\n    BinaryOps.mul = function (a, b) {\n        util.assertTypesMatch(a, b);\n        var outShape = broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        var der = function (dy) {\n            var derA = function () {\n                var res = dy.mul(b.toFloat());\n                var reduceAxes = broadcast_util.getReductionAxes(a.shape, outShape);\n                if (reduceAxes.length > 0) {\n                    return res.sum(reduceAxes).reshape(a.shape);\n                }\n                return res;\n            };\n            var derB = function () {\n                var res = dy.mul(a.toFloat());\n                var reduceAxes = broadcast_util.getReductionAxes(b.shape, outShape);\n                if (reduceAxes.length > 0) {\n                    return res.sum(reduceAxes).reshape(b.shape);\n                }\n                return res;\n            };\n            return { a: derA, b: derB };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.multiply(a, b); }, { a: a, b: b }, der);\n    };\n    BinaryOps.mulStrict = function (a, b) {\n        util.assertShapesMatch(a.shape, b.shape, 'Error in multiplyStrict: ');\n        return a.mul(b);\n    };\n    BinaryOps.div = function (a, b) {\n        var outShape = broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        var der = function (dy) {\n            var derA = function () {\n                var res = dy.div(b.toFloat());\n                var reduceAxes = broadcast_util.getReductionAxes(a.shape, outShape);\n                if (reduceAxes.length > 0) {\n                    return res.sum(reduceAxes).reshape(a.shape);\n                }\n                return res;\n            };\n            var derB = function () {\n                var res = dy.mul(a.toFloat());\n                var reduceAxes = broadcast_util.getReductionAxes(b.shape, outShape);\n                if (reduceAxes.length > 0) {\n                    res = res.sum(reduceAxes).reshape(b.shape);\n                }\n                var tmp = b.square();\n                return res.div(tmp.toFloat()).neg();\n            };\n            return { a: derA, b: derB };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.divide(a, b); }, { a: a, b: b }, der);\n    };\n    BinaryOps.divStrict = function (a, b) {\n        util.assertShapesMatch(a.shape, b.shape, 'Error in divideStrict: ');\n        return a.div(b);\n    };\n    BinaryOps.minimum = function (a, b) {\n        util.assertTypesMatch(a, b);\n        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        var der = function (dy) {\n            var derA = function () { return dy.mul(a.lessEqual(b).toFloat()); };\n            var derB = function () { return dy.mul(a.greater(b).toFloat()); };\n            return { a: derA, b: derB };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.minimum(a, b); }, { a: a, b: b }, der);\n    };\n    BinaryOps.minimumStrict = function (a, b) {\n        util.assertShapesMatch(a.shape, b.shape, 'Error in minimumStrict: ');\n        return a.minimum(b);\n    };\n    BinaryOps.maximum = function (a, b) {\n        util.assertTypesMatch(a, b);\n        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        var der = function (dy) {\n            var derA = function () { return dy.mul(a.greaterEqual(b).toFloat()); };\n            var derB = function () { return dy.mul(a.less(b).toFloat()); };\n            return { a: derA, b: derB };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.maximum(a, b); }, { a: a, b: b }, der);\n    };\n    BinaryOps.maximumStrict = function (a, b) {\n        util.assertShapesMatch(a.shape, b.shape, 'Error in minimumStrict: ');\n        return a.maximum(b);\n    };\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Arithmetic' }),\n        operation_1.operation\n    ], BinaryOps, \"add\", null);\n    __decorate([\n        operation_1.operation\n    ], BinaryOps, \"addStrict\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Arithmetic' }),\n        operation_1.operation\n    ], BinaryOps, \"sub\", null);\n    __decorate([\n        operation_1.operation\n    ], BinaryOps, \"subStrict\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Arithmetic' }),\n        operation_1.operation\n    ], BinaryOps, \"pow\", null);\n    __decorate([\n        operation_1.operation\n    ], BinaryOps, \"powStrict\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Arithmetic' }),\n        operation_1.operation\n    ], BinaryOps, \"mul\", null);\n    __decorate([\n        operation_1.operation\n    ], BinaryOps, \"mulStrict\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Arithmetic' }),\n        operation_1.operation\n    ], BinaryOps, \"div\", null);\n    __decorate([\n        operation_1.operation\n    ], BinaryOps, \"divStrict\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Arithmetic' }),\n        operation_1.operation\n    ], BinaryOps, \"minimum\", null);\n    __decorate([\n        operation_1.operation\n    ], BinaryOps, \"minimumStrict\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Arithmetic' }),\n        operation_1.operation\n    ], BinaryOps, \"maximum\", null);\n    __decorate([\n        operation_1.operation\n    ], BinaryOps, \"maximumStrict\", null);\n    return BinaryOps;\n}());\nexports.BinaryOps = BinaryOps;\n","map":{"mappings":[{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}}],"sources":{"node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js":"\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = require(\"../doc\");\nvar environment_1 = require(\"../environment\");\nvar util = require(\"../util\");\nvar broadcast_util = require(\"./broadcast_util\");\nvar operation_1 = require(\"./operation\");\nvar ops_1 = require(\"./ops\");\nvar BinaryOps = (function () {\n    function BinaryOps() {\n    }\n    BinaryOps.add = function (a, b) {\n        util.assertTypesMatch(a, b);\n        var outShape = broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        var der = function (dy) {\n            var derA = function () {\n                var res = dy;\n                var reduceAxes = broadcast_util.getReductionAxes(a.shape, outShape);\n                if (reduceAxes.length > 0) {\n                    res = res.sum(reduceAxes);\n                }\n                return res.reshape(a.shape);\n            };\n            var derB = function () {\n                var res = dy;\n                var reduceAxes = broadcast_util.getReductionAxes(b.shape, outShape);\n                if (reduceAxes.length > 0) {\n                    res = res.sum(reduceAxes);\n                }\n                return res.reshape(b.shape);\n            };\n            return { a: derA, b: derB };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.add(a, b); }, { a: a, b: b }, der);\n    };\n    BinaryOps.addStrict = function (a, b) {\n        util.assertShapesMatch(a.shape, b.shape, 'Error in addStrict: ');\n        return a.add(b);\n    };\n    BinaryOps.sub = function (a, b) {\n        util.assertTypesMatch(a, b);\n        var outShape = broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        var der = function (dy) {\n            var derA = function () {\n                var res = dy;\n                var reduceAxes = broadcast_util.getReductionAxes(a.shape, outShape);\n                if (reduceAxes.length > 0) {\n                    res = res.sum(reduceAxes);\n                }\n                return res.reshape(a.shape);\n            };\n            var derB = function () {\n                var res = dy;\n                var reduceAxes = broadcast_util.getReductionAxes(b.shape, outShape);\n                if (reduceAxes.length > 0) {\n                    res = res.sum(reduceAxes);\n                }\n                return res.neg().reshape(b.shape);\n            };\n            return { a: derA, b: derB };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.subtract(a, b); }, { a: a, b: b }, der);\n    };\n    BinaryOps.subStrict = function (a, b) {\n        util.assertShapesMatch(a.shape, b.shape, 'Error in subStrict: ');\n        return a.sub(b);\n    };\n    BinaryOps.pow = function (base, exp) {\n        broadcast_util.assertAndGetBroadcastShape(base.shape, exp.shape);\n        var grad = function (dy) {\n            if (!util.arraysEqual(base.shape, exp.shape) &&\n                !util.isScalarShape(exp.shape)) {\n                throw new Error(\"Gradient of pow not yet supported for broadcasted shapes.\");\n            }\n            var derBase = function () {\n                var expFloat = exp.toFloat();\n                var dx = expFloat.mul(base.toFloat().pow(expFloat.sub(ops_1.scalar(1))));\n                return dy.mulStrict(dx);\n            };\n            return { base: derBase };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.pow(base, exp); }, { base: base }, grad);\n    };\n    BinaryOps.powStrict = function (base, exp) {\n        util.assertShapesMatch(base.shape, exp.shape, 'Error in powStrict: ');\n        return base.pow(exp);\n    };\n    BinaryOps.mul = function (a, b) {\n        util.assertTypesMatch(a, b);\n        var outShape = broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        var der = function (dy) {\n            var derA = function () {\n                var res = dy.mul(b.toFloat());\n                var reduceAxes = broadcast_util.getReductionAxes(a.shape, outShape);\n                if (reduceAxes.length > 0) {\n                    return res.sum(reduceAxes).reshape(a.shape);\n                }\n                return res;\n            };\n            var derB = function () {\n                var res = dy.mul(a.toFloat());\n                var reduceAxes = broadcast_util.getReductionAxes(b.shape, outShape);\n                if (reduceAxes.length > 0) {\n                    return res.sum(reduceAxes).reshape(b.shape);\n                }\n                return res;\n            };\n            return { a: derA, b: derB };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.multiply(a, b); }, { a: a, b: b }, der);\n    };\n    BinaryOps.mulStrict = function (a, b) {\n        util.assertShapesMatch(a.shape, b.shape, 'Error in multiplyStrict: ');\n        return a.mul(b);\n    };\n    BinaryOps.div = function (a, b) {\n        var outShape = broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        var der = function (dy) {\n            var derA = function () {\n                var res = dy.div(b.toFloat());\n                var reduceAxes = broadcast_util.getReductionAxes(a.shape, outShape);\n                if (reduceAxes.length > 0) {\n                    return res.sum(reduceAxes).reshape(a.shape);\n                }\n                return res;\n            };\n            var derB = function () {\n                var res = dy.mul(a.toFloat());\n                var reduceAxes = broadcast_util.getReductionAxes(b.shape, outShape);\n                if (reduceAxes.length > 0) {\n                    res = res.sum(reduceAxes).reshape(b.shape);\n                }\n                var tmp = b.square();\n                return res.div(tmp.toFloat()).neg();\n            };\n            return { a: derA, b: derB };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.divide(a, b); }, { a: a, b: b }, der);\n    };\n    BinaryOps.divStrict = function (a, b) {\n        util.assertShapesMatch(a.shape, b.shape, 'Error in divideStrict: ');\n        return a.div(b);\n    };\n    BinaryOps.minimum = function (a, b) {\n        util.assertTypesMatch(a, b);\n        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        var der = function (dy) {\n            var derA = function () { return dy.mul(a.lessEqual(b).toFloat()); };\n            var derB = function () { return dy.mul(a.greater(b).toFloat()); };\n            return { a: derA, b: derB };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.minimum(a, b); }, { a: a, b: b }, der);\n    };\n    BinaryOps.minimumStrict = function (a, b) {\n        util.assertShapesMatch(a.shape, b.shape, 'Error in minimumStrict: ');\n        return a.minimum(b);\n    };\n    BinaryOps.maximum = function (a, b) {\n        util.assertTypesMatch(a, b);\n        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        var der = function (dy) {\n            var derA = function () { return dy.mul(a.greaterEqual(b).toFloat()); };\n            var derB = function () { return dy.mul(a.less(b).toFloat()); };\n            return { a: derA, b: derB };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) { return backend.maximum(a, b); }, { a: a, b: b }, der);\n    };\n    BinaryOps.maximumStrict = function (a, b) {\n        util.assertShapesMatch(a.shape, b.shape, 'Error in minimumStrict: ');\n        return a.maximum(b);\n    };\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Arithmetic' }),\n        operation_1.operation\n    ], BinaryOps, \"add\", null);\n    __decorate([\n        operation_1.operation\n    ], BinaryOps, \"addStrict\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Arithmetic' }),\n        operation_1.operation\n    ], BinaryOps, \"sub\", null);\n    __decorate([\n        operation_1.operation\n    ], BinaryOps, \"subStrict\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Arithmetic' }),\n        operation_1.operation\n    ], BinaryOps, \"pow\", null);\n    __decorate([\n        operation_1.operation\n    ], BinaryOps, \"powStrict\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Arithmetic' }),\n        operation_1.operation\n    ], BinaryOps, \"mul\", null);\n    __decorate([\n        operation_1.operation\n    ], BinaryOps, \"mulStrict\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Arithmetic' }),\n        operation_1.operation\n    ], BinaryOps, \"div\", null);\n    __decorate([\n        operation_1.operation\n    ], BinaryOps, \"divStrict\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Arithmetic' }),\n        operation_1.operation\n    ], BinaryOps, \"minimum\", null);\n    __decorate([\n        operation_1.operation\n    ], BinaryOps, \"minimumStrict\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Arithmetic' }),\n        operation_1.operation\n    ], BinaryOps, \"maximum\", null);\n    __decorate([\n        operation_1.operation\n    ], BinaryOps, \"maximumStrict\", null);\n    return BinaryOps;\n}());\nexports.BinaryOps = BinaryOps;\n"},"lineCount":230}},"hash":"23508c750528988e1455eafde6462dbd","cacheData":{"env":{}}}