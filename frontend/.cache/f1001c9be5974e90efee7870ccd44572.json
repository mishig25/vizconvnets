{"dependencies":[{"name":"/home/mishig/Desktop/viz/final/package.json","includedInParent":true,"mtime":1522648746056},{"name":"/home/mishig/Desktop/viz/final/node_modules/phaser/package.json","includedInParent":true,"mtime":1521632677000},{"name":"../geometry/Vector","loc":{"line":13,"column":21}},{"name":"./SAT","loc":{"line":14,"column":18}},{"name":"../geometry/Bounds","loc":{"line":15,"column":21}},{"name":"../factory/Bodies","loc":{"line":16,"column":21}},{"name":"../geometry/Vertices","loc":{"line":17,"column":23}}],"generated":{"js":"/**\r\n* The `Matter.Query` module contains methods for performing collision queries.\r\n*\r\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\r\n*\r\n* @class Query\r\n*/\r\n\r\nvar Query = {};\r\n\r\nmodule.exports = Query;\r\n\r\nvar Vector = require('../geometry/Vector');\r\nvar SAT = require('./SAT');\r\nvar Bounds = require('../geometry/Bounds');\r\nvar Bodies = require('../factory/Bodies');\r\nvar Vertices = require('../geometry/Vertices');\r\n\r\n(function() {\r\n\r\n    /**\r\n     * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\r\n     * @method ray\r\n     * @param {body[]} bodies\r\n     * @param {vector} startPoint\r\n     * @param {vector} endPoint\r\n     * @param {number} [rayWidth]\r\n     * @return {object[]} Collisions\r\n     */\r\n    Query.ray = function(bodies, startPoint, endPoint, rayWidth) {\r\n        rayWidth = rayWidth || 1e-100;\r\n\r\n        var rayAngle = Vector.angle(startPoint, endPoint),\r\n            rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\r\n            rayX = (endPoint.x + startPoint.x) * 0.5,\r\n            rayY = (endPoint.y + startPoint.y) * 0.5,\r\n            ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, { angle: rayAngle }),\r\n            collisions = [];\r\n\r\n        for (var i = 0; i < bodies.length; i++) {\r\n            var bodyA = bodies[i];\r\n            \r\n            if (Bounds.overlaps(bodyA.bounds, ray.bounds)) {\r\n                for (var j = bodyA.parts.length === 1 ? 0 : 1; j < bodyA.parts.length; j++) {\r\n                    var part = bodyA.parts[j];\r\n\r\n                    if (Bounds.overlaps(part.bounds, ray.bounds)) {\r\n                        var collision = SAT.collides(part, ray);\r\n                        if (collision.collided) {\r\n                            collision.body = collision.bodyA = collision.bodyB = bodyA;\r\n                            collisions.push(collision);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return collisions;\r\n    };\r\n\r\n    /**\r\n     * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\r\n     * @method region\r\n     * @param {body[]} bodies\r\n     * @param {bounds} bounds\r\n     * @param {bool} [outside=false]\r\n     * @return {body[]} The bodies matching the query\r\n     */\r\n    Query.region = function(bodies, bounds, outside) {\r\n        var result = [];\r\n\r\n        for (var i = 0; i < bodies.length; i++) {\r\n            var body = bodies[i],\r\n                overlaps = Bounds.overlaps(body.bounds, bounds);\r\n            if ((overlaps && !outside) || (!overlaps && outside))\r\n                result.push(body);\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Returns all bodies whose vertices contain the given point, from the given set of bodies.\r\n     * @method point\r\n     * @param {body[]} bodies\r\n     * @param {vector} point\r\n     * @return {body[]} The bodies matching the query\r\n     */\r\n    Query.point = function(bodies, point) {\r\n        var result = [];\r\n\r\n        for (var i = 0; i < bodies.length; i++) {\r\n            var body = bodies[i];\r\n            \r\n            if (Bounds.contains(body.bounds, point)) {\r\n                for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\r\n                    var part = body.parts[j];\r\n\r\n                    if (Bounds.contains(part.bounds, point)\r\n                        && Vertices.contains(part.vertices, point)) {\r\n                        result.push(body);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n})();\r\n","map":{"mappings":[{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}}],"sources":{"node_modules/phaser/src/physics/matter-js/lib/collision/Query.js":"/**\r\n* The `Matter.Query` module contains methods for performing collision queries.\r\n*\r\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\r\n*\r\n* @class Query\r\n*/\r\n\r\nvar Query = {};\r\n\r\nmodule.exports = Query;\r\n\r\nvar Vector = require('../geometry/Vector');\r\nvar SAT = require('./SAT');\r\nvar Bounds = require('../geometry/Bounds');\r\nvar Bodies = require('../factory/Bodies');\r\nvar Vertices = require('../geometry/Vertices');\r\n\r\n(function() {\r\n\r\n    /**\r\n     * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\r\n     * @method ray\r\n     * @param {body[]} bodies\r\n     * @param {vector} startPoint\r\n     * @param {vector} endPoint\r\n     * @param {number} [rayWidth]\r\n     * @return {object[]} Collisions\r\n     */\r\n    Query.ray = function(bodies, startPoint, endPoint, rayWidth) {\r\n        rayWidth = rayWidth || 1e-100;\r\n\r\n        var rayAngle = Vector.angle(startPoint, endPoint),\r\n            rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\r\n            rayX = (endPoint.x + startPoint.x) * 0.5,\r\n            rayY = (endPoint.y + startPoint.y) * 0.5,\r\n            ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, { angle: rayAngle }),\r\n            collisions = [];\r\n\r\n        for (var i = 0; i < bodies.length; i++) {\r\n            var bodyA = bodies[i];\r\n            \r\n            if (Bounds.overlaps(bodyA.bounds, ray.bounds)) {\r\n                for (var j = bodyA.parts.length === 1 ? 0 : 1; j < bodyA.parts.length; j++) {\r\n                    var part = bodyA.parts[j];\r\n\r\n                    if (Bounds.overlaps(part.bounds, ray.bounds)) {\r\n                        var collision = SAT.collides(part, ray);\r\n                        if (collision.collided) {\r\n                            collision.body = collision.bodyA = collision.bodyB = bodyA;\r\n                            collisions.push(collision);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return collisions;\r\n    };\r\n\r\n    /**\r\n     * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\r\n     * @method region\r\n     * @param {body[]} bodies\r\n     * @param {bounds} bounds\r\n     * @param {bool} [outside=false]\r\n     * @return {body[]} The bodies matching the query\r\n     */\r\n    Query.region = function(bodies, bounds, outside) {\r\n        var result = [];\r\n\r\n        for (var i = 0; i < bodies.length; i++) {\r\n            var body = bodies[i],\r\n                overlaps = Bounds.overlaps(body.bounds, bounds);\r\n            if ((overlaps && !outside) || (!overlaps && outside))\r\n                result.push(body);\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Returns all bodies whose vertices contain the given point, from the given set of bodies.\r\n     * @method point\r\n     * @param {body[]} bodies\r\n     * @param {vector} point\r\n     * @return {body[]} The bodies matching the query\r\n     */\r\n    Query.point = function(bodies, point) {\r\n        var result = [];\r\n\r\n        for (var i = 0; i < bodies.length; i++) {\r\n            var body = bodies[i];\r\n            \r\n            if (Bounds.contains(body.bounds, point)) {\r\n                for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\r\n                    var part = body.parts[j];\r\n\r\n                    if (Bounds.contains(part.bounds, point)\r\n                        && Vertices.contains(part.vertices, point)) {\r\n                        result.push(body);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n})();\r\n"},"lineCount":113}},"hash":"652dca451f1293707102ba60364915a1","cacheData":{"env":{}}}